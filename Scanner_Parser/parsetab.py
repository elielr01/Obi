
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TRIANGLE DRAW YELLOW WHILE GREEN EIF PRINT CYAN LINE RED STRING BLUE POINT PURPLE ORANGE PINK PLAY SQUARE POLYGON GRAY ELSE FUNC INPUT WHITE CIRCLE RECTANGLE IF AND INT FLOAT BOOL NOT BLACK MAGENTA OR INT_CONST FLOAT_CONST STRING_CONST BOOL_CONST COMMENT BLOCK_COMMENT ASSIGN PLUS_SIGN MINUS_SIGN TIMES_SIGN DIVIDE_SIGN MOD_SIGN LESS LESS_EQUAL GREATER GREATER_EQUAL EQUAL DIFF PAR_OPEN PAR_CLOSE CURLYB_OPEN CURLYB_CLOSE SQRB_OPEN SQRB_CLOSE COMMA SEMICOLON ID\n    Obi : Prev_To_Play Play\n    \n    Prev_To_Play : GoTo_Global_Vars Declare_Var GoTo_Play Prev_To_Play\n    | Epsilon\n    \n    GoTo_Global_Vars :\n    \n    GoTo_Play :\n    \n    Play : PLAY Play_Init PAR_OPEN PAR_CLOSE Statements_Block\n    \n    Play_Init :\n    \n    Statements_Block : CURLYB_OPEN Multiple_Statements CURLYB_CLOSE\n    \n    Multiple_Statements : Statement Multiple_Statements\n    | Epsilon\n    \n    Statement : Print\n    | Declare_Var\n    | Assignment\n    | While_Loop\n    | If_Eif_Else\n    \n    Print : PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON\n    \n    If_Eif_Else : IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else\n    \n    Eif_Recursion : EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion\n    | Epsilon\n    \n    Optional_Else : ELSE Statements_Block\n    | Epsilon\n    \n    If_GoToF_Quad :\n    \n    GoTo_Fill :\n    \n    While_Loop : WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads\n    \n    Push_While_Jump :\n    \n    While_Quad :\n    \n    Fill_While_Quads :\n    \n    Declare_Var : Type ID SEMICOLON\n    | Type ID ASSIGN Push_Assign Exp SEMICOLON\n    \n    Type : INT\n    | FLOAT\n    | BOOL\n    | STRING\n    \n    Assignment : ID ASSIGN Push_Assign Exp SEMICOLON\n    \n    Push_Assign :\n    \n    Exp : Logical_Or\n    | Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad\n    | Logical_Or DIFF Push_Diff Logical_Or Equity_Quad\n    \n    Equity_Quad :\n    \n    Push_Equal :\n    \n    Push_Diff :\n    \n    Logical_Or : Logical_And Or_Quad Multiple_Ands\n    \n    Multiple_Ands : OR Push_Or Logical_And Or_Quad Multiple_Ands\n    | Epsilon\n    \n    Or_Quad :\n    \n    Push_Or :\n    \n    Logical_And : Logical_Not And_Quad Multiple_Nots\n    \n    Multiple_Nots : AND Push_And Logical_Not And_Quad Multiple_Nots\n    | Epsilon\n    \n    And_Quad :\n    \n    Push_And :\n    \n    Logical_Not : Relational\n    | NOT Push_Not Relational Not_Quad\n    \n    Not_Quad :\n    \n    Push_Not :\n    \n    Relational : Expression\n    | Expression LESS Push_Less Expression Relational_Quad\n    | Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad\n    | Expression GREATER Push_Greater Expression Relational_Quad\n    | Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad\n    \n    Relational_Quad :\n    \n    Push_Less :\n    \n    Push_Less_Equal :\n    \n    Push_Greater :\n    \n    Push_Greater_Equal :\n    \n    Expression : Term Sum_Sub_Quad Multiple_Terms\n    \n    Multiple_Terms : PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms\n    | MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms\n    | Epsilon\n    \n    Sum_Sub_Quad :\n    \n    Push_Plus_Sign :\n    \n    Push_Minus_Sign :\n    \n    Term : Factor Mult_Div_Mod_Quad Multiple_Factors\n    \n    Multiple_Factors : TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors\n    | DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors\n    | MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors\n    | Epsilon\n    \n    Mult_Div_Mod_Quad :\n    \n    Push_Times_Sign :\n    \n    Push_Divide_Sign :\n    \n    Push_Mod_Sign :\n    \n    Factor : PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom\n    | Var_Cte\n    \n    Push_False_Bottom :\n    \n    Pop_False_Bottom :\n    \n    Var_Cte : INT_CONST Save_Int_Const\n    | MINUS_SIGN INT_CONST Save_Neg_Int_Const\n    | FLOAT_CONST Save_Float_Const\n    | MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const\n    | BOOL_CONST Save_Bool_Const\n    | STRING_CONST Save_String_Const\n    | ID Get_Id_Value\n    \n    Save_Int_Const :\n    \n    Save_Neg_Int_Const :\n    \n    Save_Float_Const :\n    \n    Save_Neg_Float_Const :\n    \n    Save_Bool_Const :\n    \n    Save_String_Const :\n    \n    Get_Id_Value :\n    \n    Epsilon :\n    '
    
_lr_action_items = {'TIMES_SIGN':([25,27,29,30,32,33,38,54,55,57,58,60,69,70,71,101,102,108,127,131,132,133,148,149,150,],[-95,-93,-97,-98,-78,-83,-99,-88,-86,-90,-91,87,-92,-94,-96,-87,-89,-85,-82,-78,-78,-78,87,87,87,]),'PAR_CLOSE':([16,25,26,27,28,29,30,31,32,33,34,35,37,38,54,55,56,57,58,59,60,63,69,70,71,79,81,82,83,84,89,90,94,95,101,102,103,105,107,108,115,116,118,119,120,121,122,123,127,128,129,130,131,132,133,134,135,136,137,138,139,140,145,146,147,148,149,150,151,154,155,156,157,158,159,160,172,],[20,-95,-52,-93,-50,-97,-98,-70,-78,-83,-36,-45,-56,-99,-88,-86,-100,-90,-91,-100,-100,-100,-92,-94,-96,108,-49,-47,-66,-69,-77,-73,-42,-44,-87,-89,-54,124,126,-85,-39,-39,-61,-61,-61,-61,-53,141,-82,-50,-70,-70,-78,-78,-78,-37,-38,-45,-57,-58,-60,-59,-100,-100,-100,-100,-100,-100,-100,-48,-68,-67,-74,-76,-75,-43,173,]),'LESS':([25,27,29,30,31,32,33,37,38,54,55,57,58,59,60,69,70,71,83,84,89,90,101,102,108,127,129,130,131,132,133,146,147,148,149,150,155,156,157,158,159,],[-95,-93,-97,-98,-70,-78,-83,65,-99,-88,-86,-90,-91,-100,-100,-92,-94,-96,-66,-69,-77,-73,-87,-89,-85,-82,-70,-70,-78,-78,-78,-100,-100,-100,-100,-100,-68,-67,-74,-76,-75,]),'EQUAL':([25,26,27,28,29,30,31,32,33,34,35,37,38,54,55,56,57,58,59,60,63,69,70,71,81,82,83,84,89,90,94,95,101,102,103,108,118,119,120,121,122,127,128,129,130,131,132,133,136,137,138,139,140,145,146,147,148,149,150,151,154,155,156,157,158,159,160,],[-95,-52,-93,-50,-97,-98,-70,-78,-83,61,-45,-56,-99,-88,-86,-100,-90,-91,-100,-100,-100,-92,-94,-96,-49,-47,-66,-69,-77,-73,-42,-44,-87,-89,-54,-85,-61,-61,-61,-61,-53,-82,-50,-70,-70,-78,-78,-78,-45,-57,-58,-60,-59,-100,-100,-100,-100,-100,-100,-100,-48,-68,-67,-74,-76,-75,-43,]),'WHILE':([18,23,41,43,47,48,49,52,64,76,142,143,153,161,162,163,164,165,167,169,171,175,176,177,],[-28,42,-11,42,-14,-12,-15,-13,-29,-8,-16,-34,-23,-27,-100,-24,-100,-19,-17,-21,-20,-23,-100,-18,]),'PAR_OPEN':([6,13,19,21,24,40,42,44,51,53,61,62,65,66,67,68,72,73,75,77,78,80,85,86,87,88,91,92,93,96,97,98,99,100,104,106,109,110,111,112,113,114,117,166,170,],[-7,16,-35,24,-84,-55,-25,75,78,24,-40,-41,-62,-63,-65,-64,24,104,24,-35,24,-51,-72,-71,-79,-81,-80,24,24,-46,24,24,24,24,24,24,24,24,24,24,24,24,24,170,24,]),'FLOAT_CONST':([19,21,24,39,40,53,61,62,65,66,67,68,72,75,77,78,80,85,86,87,88,91,92,93,96,97,98,99,100,104,106,109,110,111,112,113,114,117,170,],[-35,25,-84,71,-55,25,-40,-41,-62,-63,-65,-64,25,25,-35,25,-51,-72,-71,-79,-81,-80,25,25,-46,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'EIF':([76,153,162,175,176,],[-8,-23,166,-23,166,]),'PRINT':([18,23,41,43,47,48,49,52,64,76,142,143,153,161,162,163,164,165,167,169,171,175,176,177,],[-28,44,-11,44,-14,-12,-15,-13,-29,-8,-16,-34,-23,-27,-100,-24,-100,-19,-17,-21,-20,-23,-100,-18,]),'DIFF':([25,26,27,28,29,30,31,32,33,34,35,37,38,54,55,56,57,58,59,60,63,69,70,71,81,82,83,84,89,90,94,95,101,102,103,108,118,119,120,121,122,127,128,129,130,131,132,133,136,137,138,139,140,145,146,147,148,149,150,151,154,155,156,157,158,159,160,],[-95,-52,-93,-50,-97,-98,-70,-78,-83,62,-45,-56,-99,-88,-86,-100,-90,-91,-100,-100,-100,-92,-94,-96,-49,-47,-66,-69,-77,-73,-42,-44,-87,-89,-54,-85,-61,-61,-61,-61,-53,-82,-50,-70,-70,-78,-78,-78,-45,-57,-58,-60,-59,-100,-100,-100,-100,-100,-100,-100,-48,-68,-67,-74,-76,-75,-43,]),'PLUS_SIGN':([25,27,29,30,31,32,33,38,54,55,57,58,59,60,69,70,71,89,90,101,102,108,127,129,130,131,132,133,146,147,148,149,150,157,158,159,],[-95,-93,-97,-98,-70,-78,-83,-99,-88,-86,-90,-91,86,-100,-92,-94,-96,-77,-73,-87,-89,-85,-82,-70,-70,-78,-78,-78,86,86,-100,-100,-100,-74,-76,-75,]),'STRING_CONST':([19,21,24,40,53,61,62,65,66,67,68,72,75,77,78,80,85,86,87,88,91,92,93,96,97,98,99,100,104,106,109,110,111,112,113,114,117,170,],[-35,30,-84,-55,30,-40,-41,-62,-63,-65,-64,30,30,-35,30,-51,-72,-71,-79,-81,-80,30,30,-46,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'INT_CONST':([19,21,24,39,40,53,61,62,65,66,67,68,72,75,77,78,80,85,86,87,88,91,92,93,96,97,98,99,100,104,106,109,110,111,112,113,114,117,170,],[-35,27,-84,70,-55,27,-40,-41,-62,-63,-65,-64,27,27,-35,27,-51,-72,-71,-79,-81,-80,27,27,-46,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'SEMICOLON':([15,25,26,27,28,29,30,31,32,33,34,35,36,37,38,54,55,56,57,58,59,60,63,69,70,71,81,82,83,84,89,90,94,95,101,102,103,108,115,116,118,119,120,121,122,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,145,146,147,148,149,150,151,154,155,156,157,158,159,160,],[18,-95,-52,-93,-50,-97,-98,-70,-78,-83,-36,-45,64,-56,-99,-88,-86,-100,-90,-91,-100,-100,-100,-92,-94,-96,-49,-47,-66,-69,-77,-73,-42,-44,-87,-89,-54,-85,-39,-39,-61,-61,-61,-61,-53,142,143,-82,-50,-70,-70,-78,-78,-78,-37,-38,-45,-57,-58,-60,-59,-100,-100,-100,-100,-100,-100,-100,-48,-68,-67,-74,-76,-75,-43,]),'MOD_SIGN':([25,27,29,30,32,33,38,54,55,57,58,60,69,70,71,101,102,108,127,131,132,133,148,149,150,],[-95,-93,-97,-98,-78,-83,-99,-88,-86,-90,-91,88,-92,-94,-96,-87,-89,-85,-82,-78,-78,-78,88,88,88,]),'BOOL_CONST':([19,21,24,40,53,61,62,65,66,67,68,72,75,77,78,80,85,86,87,88,91,92,93,96,97,98,99,100,104,106,109,110,111,112,113,114,117,170,],[-35,29,-84,-55,29,-40,-41,-62,-63,-65,-64,29,29,-35,29,-51,-72,-71,-79,-81,-80,29,29,-46,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'ASSIGN':([15,50,],[19,77,]),'$end':([1,5,22,76,],[0,-1,-6,-8,]),'PLAY':([0,2,3,9,14,17,18,64,],[-100,-3,6,-5,-100,-2,-28,-29,]),'STRING':([0,4,9,14,18,23,41,43,47,48,49,52,64,76,142,143,153,161,162,163,164,165,167,169,171,175,176,177,],[-4,7,-5,-4,-28,7,-11,7,-14,-12,-15,-13,-29,-8,-16,-34,-23,-27,-100,-24,-100,-19,-17,-21,-20,-23,-100,-18,]),'ELSE':([76,153,162,164,165,175,176,177,],[-8,-23,-100,168,-19,-23,-100,-18,]),'LESS_EQUAL':([25,27,29,30,31,32,33,37,38,54,55,57,58,59,60,69,70,71,83,84,89,90,101,102,108,127,129,130,131,132,133,146,147,148,149,150,155,156,157,158,159,],[-95,-93,-97,-98,-70,-78,-83,66,-99,-88,-86,-90,-91,-100,-100,-92,-94,-96,-66,-69,-77,-73,-87,-89,-85,-82,-70,-70,-78,-78,-78,-100,-100,-100,-100,-100,-68,-67,-74,-76,-75,]),'ID':([7,8,10,11,12,18,19,21,23,24,40,41,43,47,48,49,52,53,61,62,64,65,66,67,68,72,75,76,77,78,80,85,86,87,88,91,92,93,96,97,98,99,100,104,106,109,110,111,112,113,114,117,142,143,153,161,162,163,164,165,167,169,170,171,175,176,177,],[-33,-30,-31,-32,15,-28,-35,38,50,-84,-55,-11,50,-14,-12,-15,-13,38,-40,-41,-29,-62,-63,-65,-64,38,38,-8,-35,38,-51,-72,-71,-79,-81,-80,38,38,-46,38,38,38,38,38,38,38,38,38,38,38,38,38,-16,-34,-23,-27,-100,-24,-100,-19,-17,-21,38,-20,-23,-100,-18,]),'IF':([18,23,41,43,47,48,49,52,64,76,142,143,153,161,162,163,164,165,167,169,171,175,176,177,],[-28,51,-11,51,-14,-12,-15,-13,-29,-8,-16,-34,-23,-27,-100,-24,-100,-19,-17,-21,-20,-23,-100,-18,]),'AND':([25,26,27,28,29,30,31,32,33,37,38,54,55,56,57,58,59,60,69,70,71,83,84,89,90,101,102,103,108,118,119,120,121,122,127,128,129,130,131,132,133,137,138,139,140,145,146,147,148,149,150,155,156,157,158,159,],[-95,-52,-93,-50,-97,-98,-70,-78,-83,-56,-99,-88,-86,80,-90,-91,-100,-100,-92,-94,-96,-66,-69,-77,-73,-87,-89,-54,-85,-61,-61,-61,-61,-53,-82,-50,-70,-70,-78,-78,-78,-57,-58,-60,-59,80,-100,-100,-100,-100,-100,-68,-67,-74,-76,-75,]),'GREATER_EQUAL':([25,27,29,30,31,32,33,37,38,54,55,57,58,59,60,69,70,71,83,84,89,90,101,102,108,127,129,130,131,132,133,146,147,148,149,150,155,156,157,158,159,],[-95,-93,-97,-98,-70,-78,-83,67,-99,-88,-86,-90,-91,-100,-100,-92,-94,-96,-66,-69,-77,-73,-87,-89,-85,-82,-70,-70,-78,-78,-78,-100,-100,-100,-100,-100,-68,-67,-74,-76,-75,]),'GREATER':([25,27,29,30,31,32,33,37,38,54,55,57,58,59,60,69,70,71,83,84,89,90,101,102,108,127,129,130,131,132,133,146,147,148,149,150,155,156,157,158,159,],[-95,-93,-97,-98,-70,-78,-83,68,-99,-88,-86,-90,-91,-100,-100,-92,-94,-96,-66,-69,-77,-73,-87,-89,-85,-82,-70,-70,-78,-78,-78,-100,-100,-100,-100,-100,-68,-67,-74,-76,-75,]),'INT':([0,4,9,14,18,23,41,43,47,48,49,52,64,76,142,143,153,161,162,163,164,165,167,169,171,175,176,177,],[-4,8,-5,-4,-28,8,-11,8,-14,-12,-15,-13,-29,-8,-16,-34,-23,-27,-100,-24,-100,-19,-17,-21,-20,-23,-100,-18,]),'FLOAT':([0,4,9,14,18,23,41,43,47,48,49,52,64,76,142,143,153,161,162,163,164,165,167,169,171,175,176,177,],[-4,10,-5,-4,-28,10,-11,10,-14,-12,-15,-13,-29,-8,-16,-34,-23,-27,-100,-24,-100,-19,-17,-21,-20,-23,-100,-18,]),'OR':([25,26,27,28,29,30,31,32,33,35,37,38,54,55,56,57,58,59,60,63,69,70,71,81,82,83,84,89,90,101,102,103,108,118,119,120,121,122,127,128,129,130,131,132,133,136,137,138,139,140,145,146,147,148,149,150,151,154,155,156,157,158,159,],[-95,-52,-93,-50,-97,-98,-70,-78,-83,-45,-56,-99,-88,-86,-100,-90,-91,-100,-100,96,-92,-94,-96,-49,-47,-66,-69,-77,-73,-87,-89,-54,-85,-61,-61,-61,-61,-53,-82,-50,-70,-70,-78,-78,-78,-45,-57,-58,-60,-59,-100,-100,-100,-100,-100,-100,96,-48,-68,-67,-74,-76,-75,]),'BOOL':([0,4,9,14,18,23,41,43,47,48,49,52,64,76,142,143,153,161,162,163,164,165,167,169,171,175,176,177,],[-4,11,-5,-4,-28,11,-11,11,-14,-12,-15,-13,-29,-8,-16,-34,-23,-27,-100,-24,-100,-19,-17,-21,-20,-23,-100,-18,]),'DIVIDE_SIGN':([25,27,29,30,32,33,38,54,55,57,58,60,69,70,71,101,102,108,127,131,132,133,148,149,150,],[-95,-93,-97,-98,-78,-83,-99,-88,-86,-90,-91,91,-92,-94,-96,-87,-89,-85,-82,-78,-78,-78,91,91,91,]),'MINUS_SIGN':([19,21,24,25,27,29,30,31,32,33,38,40,53,54,55,57,58,59,60,61,62,65,66,67,68,69,70,71,72,75,77,78,80,85,86,87,88,89,90,91,92,93,96,97,98,99,100,101,102,104,106,108,109,110,111,112,113,114,117,127,129,130,131,132,133,146,147,148,149,150,157,158,159,170,],[-35,39,-84,-95,-93,-97,-98,-70,-78,-83,-99,-55,39,-88,-86,-90,-91,85,-100,-40,-41,-62,-63,-65,-64,-92,-94,-96,39,39,-35,39,-51,-72,-71,-79,-81,-77,-73,-80,39,39,-46,39,39,39,39,-87,-89,39,39,-85,39,39,39,39,39,39,39,-82,-70,-70,-78,-78,-78,85,85,-100,-100,-100,-74,-76,-75,39,]),'NOT':([19,21,24,53,61,62,75,77,78,80,92,93,96,104,106,109,117,170,],[-35,40,-84,40,-40,-41,40,-35,40,-51,40,40,-46,40,40,40,40,40,]),'CURLYB_OPEN':([20,126,141,144,152,168,173,174,],[23,-22,-26,23,23,23,-22,23,]),'CURLYB_CLOSE':([18,23,41,43,45,46,47,48,49,52,64,74,76,142,143,153,161,162,163,164,165,167,169,171,175,176,177,],[-28,-100,-11,-100,-10,76,-14,-12,-15,-13,-29,-9,-8,-16,-34,-23,-27,-100,-24,-100,-19,-17,-21,-20,-23,-100,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Push_Minus_Sign':([85,],[110,]),'Push_Greater':([68,],[100,]),'Multiple_Ands':([63,151,],[94,160,]),'Push_While_Jump':([42,],[73,]),'Push_Less_Equal':([66,],[98,]),'Not_Quad':([103,],[122,]),'Push_Greater_Equal':([67,],[99,]),'Term':([21,53,72,75,78,92,93,97,98,99,100,104,106,109,110,111,117,170,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,129,130,31,31,]),'Multiple_Nots':([56,145,],[82,154,]),'Equity_Quad':([115,116,],[134,135,]),'Statement':([23,43,],[43,43,]),'Factor':([21,53,72,75,78,92,93,97,98,99,100,104,106,109,110,111,112,113,114,117,170,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,131,132,133,32,32,]),'Print':([23,43,],[41,41,]),'Relational':([21,53,72,75,78,92,93,104,106,109,117,170,],[26,26,103,26,26,26,26,26,26,26,26,26,]),'Mult_Div_Mod_Quad':([32,131,132,133,],[60,148,149,150,]),'Type':([4,23,43,],[12,12,12,]),'Sum_Sub_Quad':([31,129,130,],[59,146,147,]),'Or_Quad':([35,136,],[63,151,]),'Play':([3,],[5,]),'Logical_Not':([21,53,75,78,92,93,104,106,109,117,170,],[28,28,28,28,28,28,28,28,128,28,28,]),'Push_And':([80,],[109,]),'Save_String_Const':([30,],[58,]),'Epsilon':([0,14,23,43,56,59,60,63,145,146,147,148,149,150,151,162,164,176,],[2,2,45,45,81,84,89,95,81,84,84,89,89,89,95,165,169,165,]),'Push_Times_Sign':([87,],[112,]),'GoTo_Play':([9,],[14,]),'Fill_While_Quads':([161,],[163,]),'Push_Mod_Sign':([88,],[113,]),'Multiple_Factors':([60,148,149,150,],[90,157,158,159,]),'Push_Or':([96,],[117,]),'Save_Bool_Const':([29,],[57,]),'Multiple_Statements':([23,43,],[46,74,]),'And_Quad':([28,128,],[56,145,]),'Push_Less':([65,],[97,]),'While_Loop':([23,43,],[47,47,]),'Obi':([0,],[1,]),'Save_Float_Const':([25,],[54,]),'Eif_Recursion':([162,176,],[164,177,]),'Save_Int_Const':([27,],[55,]),'Get_Id_Value':([38,],[69,]),'Var_Cte':([21,53,72,75,78,92,93,97,98,99,100,104,106,109,110,111,112,113,114,117,170,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'Logical_Or':([21,53,75,78,92,93,104,106,170,],[34,34,34,34,115,116,34,34,34,]),'Play_Init':([6,],[13,]),'Declare_Var':([4,23,43,],[9,48,48,]),'Logical_And':([21,53,75,78,92,93,104,106,117,170,],[35,35,35,35,35,35,35,35,136,35,]),'Exp':([21,53,75,78,104,106,170,],[36,79,105,107,123,125,172,]),'If_Eif_Else':([23,43,],[49,49,]),'Push_Not':([40,],[72,]),'Expression':([21,53,72,75,78,92,93,97,98,99,100,104,106,109,117,170,],[37,37,37,37,37,37,37,118,119,120,121,37,37,37,37,37,]),'While_Quad':([141,],[152,]),'Save_Neg_Int_Const':([70,],[101,]),'Pop_False_Bottom':([108,],[127,]),'Push_Assign':([19,77,],[21,106,]),'Multiple_Terms':([59,146,147,],[83,155,156,]),'If_GoToF_Quad':([126,173,],[144,174,]),'Optional_Else':([164,],[167,]),'Save_Neg_Float_Const':([71,],[102,]),'Statements_Block':([20,144,152,168,174,],[22,153,161,171,175,]),'Push_Diff':([62,],[93,]),'Push_Plus_Sign':([86,],[111,]),'Relational_Quad':([118,119,120,121,],[137,138,139,140,]),'Prev_To_Play':([0,14,],[3,17,]),'GoTo_Fill':([153,175,],[162,176,]),'Assignment':([23,43,],[52,52,]),'Push_Divide_Sign':([91,],[114,]),'Push_False_Bottom':([24,],[53,]),'Push_Equal':([61,],[92,]),'GoTo_Global_Vars':([0,14,],[4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Obi","S'",1,None,None,None),
  ('Obi -> Prev_To_Play Play','Obi',2,'p_Obi','Parser.py',54),
  ('Prev_To_Play -> GoTo_Global_Vars Declare_Var GoTo_Play Prev_To_Play','Prev_To_Play',4,'p_Prev_To_Play','Parser.py',60),
  ('Prev_To_Play -> Epsilon','Prev_To_Play',1,'p_Prev_To_Play','Parser.py',61),
  ('GoTo_Global_Vars -> <empty>','GoTo_Global_Vars',0,'p_GoTo_Global_Vars','Parser.py',68),
  ('GoTo_Play -> <empty>','GoTo_Play',0,'p_GoTo_Play','Parser.py',74),
  ('Play -> PLAY Play_Init PAR_OPEN PAR_CLOSE Statements_Block','Play',5,'p_Play','Parser.py',88),
  ('Play_Init -> <empty>','Play_Init',0,'p_Play_Init','Parser.py',93),
  ('Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE','Statements_Block',3,'p_Statements_Block','Parser.py',111),
  ('Multiple_Statements -> Statement Multiple_Statements','Multiple_Statements',2,'p_Multiple_Statements','Parser.py',117),
  ('Multiple_Statements -> Epsilon','Multiple_Statements',1,'p_Multiple_Statements','Parser.py',118),
  ('Statement -> Print','Statement',1,'p_Statement','Parser.py',124),
  ('Statement -> Declare_Var','Statement',1,'p_Statement','Parser.py',125),
  ('Statement -> Assignment','Statement',1,'p_Statement','Parser.py',126),
  ('Statement -> While_Loop','Statement',1,'p_Statement','Parser.py',127),
  ('Statement -> If_Eif_Else','Statement',1,'p_Statement','Parser.py',128),
  ('Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON','Print',5,'p_Print','Parser.py',141),
  ('If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else','If_Eif_Else',9,'p_If_Eif_Else','Parser.py',158),
  ('Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion','Eif_Recursion',8,'p_Eif_Recursion','Parser.py',169),
  ('Eif_Recursion -> Epsilon','Eif_Recursion',1,'p_Eif_Recursion','Parser.py',170),
  ('Optional_Else -> ELSE Statements_Block','Optional_Else',2,'p_Optional_Else','Parser.py',176),
  ('Optional_Else -> Epsilon','Optional_Else',1,'p_Optional_Else','Parser.py',177),
  ('If_GoToF_Quad -> <empty>','If_GoToF_Quad',0,'p_If_GoToF_Quad','Parser.py',184),
  ('GoTo_Fill -> <empty>','GoTo_Fill',0,'p_GoTo_Fill','Parser.py',204),
  ('While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads','While_Loop',8,'p_While_Loop','Parser.py',229),
  ('Push_While_Jump -> <empty>','Push_While_Jump',0,'p_Push_While_Jump','Parser.py',235),
  ('While_Quad -> <empty>','While_Quad',0,'p_While_Quad','Parser.py',241),
  ('Fill_While_Quads -> <empty>','Fill_While_Quads',0,'p_Fill_While_Quads','Parser.py',261),
  ('Declare_Var -> Type ID SEMICOLON','Declare_Var',3,'p_Declare_Var','Parser.py',282),
  ('Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON','Declare_Var',6,'p_Declare_Var','Parser.py',283),
  ('Type -> INT','Type',1,'p_Type','Parser.py',322),
  ('Type -> FLOAT','Type',1,'p_Type','Parser.py',323),
  ('Type -> BOOL','Type',1,'p_Type','Parser.py',324),
  ('Type -> STRING','Type',1,'p_Type','Parser.py',325),
  ('Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON','Assignment',5,'p_Assignment','Parser.py',336),
  ('Push_Assign -> <empty>','Push_Assign',0,'p_Push_assign','Parser.py',371),
  ('Exp -> Logical_Or','Exp',1,'p_Exp','Parser.py',383),
  ('Exp -> Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad','Exp',5,'p_Exp','Parser.py',384),
  ('Exp -> Logical_Or DIFF Push_Diff Logical_Or Equity_Quad','Exp',5,'p_Exp','Parser.py',385),
  ('Equity_Quad -> <empty>','Equity_Quad',0,'p_Equity_Quad','Parser.py',392),
  ('Push_Equal -> <empty>','Push_Equal',0,'p_Push_Equal','Parser.py',445),
  ('Push_Diff -> <empty>','Push_Diff',0,'p_Push_Diff','Parser.py',451),
  ('Logical_Or -> Logical_And Or_Quad Multiple_Ands','Logical_Or',3,'p_Logical_Or','Parser.py',461),
  ('Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands','Multiple_Ands',5,'p_Multiple_Ands','Parser.py',468),
  ('Multiple_Ands -> Epsilon','Multiple_Ands',1,'p_Multiple_Ands','Parser.py',469),
  ('Or_Quad -> <empty>','Or_Quad',0,'p_Or_Quad','Parser.py',476),
  ('Push_Or -> <empty>','Push_Or',0,'p_Push_Or','Parser.py',528),
  ('Logical_And -> Logical_Not And_Quad Multiple_Nots','Logical_And',3,'p_Logical_And','Parser.py',538),
  ('Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots','Multiple_Nots',5,'p_Multiple_Nots','Parser.py',545),
  ('Multiple_Nots -> Epsilon','Multiple_Nots',1,'p_Multiple_Nots','Parser.py',546),
  ('And_Quad -> <empty>','And_Quad',0,'p_And_Quad','Parser.py',553),
  ('Push_And -> <empty>','Push_And',0,'p_Push_And','Parser.py',606),
  ('Logical_Not -> Relational','Logical_Not',1,'p_Logical_Not','Parser.py',616),
  ('Logical_Not -> NOT Push_Not Relational Not_Quad','Logical_Not',4,'p_Logical_Not','Parser.py',617),
  ('Not_Quad -> <empty>','Not_Quad',0,'p_Not_Quad','Parser.py',624),
  ('Push_Not -> <empty>','Push_Not',0,'p_Push_Not','Parser.py',676),
  ('Relational -> Expression','Relational',1,'p_Relational','Parser.py',686),
  ('Relational -> Expression LESS Push_Less Expression Relational_Quad','Relational',5,'p_Relational','Parser.py',687),
  ('Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad','Relational',5,'p_Relational','Parser.py',688),
  ('Relational -> Expression GREATER Push_Greater Expression Relational_Quad','Relational',5,'p_Relational','Parser.py',689),
  ('Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad','Relational',5,'p_Relational','Parser.py',690),
  ('Relational_Quad -> <empty>','Relational_Quad',0,'p_Relational_Quad','Parser.py',697),
  ('Push_Less -> <empty>','Push_Less',0,'p_Push_Less','Parser.py',750),
  ('Push_Less_Equal -> <empty>','Push_Less_Equal',0,'p_Push_Less_Equal','Parser.py',756),
  ('Push_Greater -> <empty>','Push_Greater',0,'p_Push_Greater','Parser.py',762),
  ('Push_Greater_Equal -> <empty>','Push_Greater_Equal',0,'p_Push_Greater_Equal','Parser.py',768),
  ('Expression -> Term Sum_Sub_Quad Multiple_Terms','Expression',3,'p_Expression','Parser.py',778),
  ('Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms','Multiple_Terms',5,'p_Multiple_Terms','Parser.py',785),
  ('Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms','Multiple_Terms',5,'p_Multiple_Terms','Parser.py',786),
  ('Multiple_Terms -> Epsilon','Multiple_Terms',1,'p_Multiple_Terms','Parser.py',787),
  ('Sum_Sub_Quad -> <empty>','Sum_Sub_Quad',0,'p_Sum_Sub_Quad','Parser.py',794),
  ('Push_Plus_Sign -> <empty>','Push_Plus_Sign',0,'p_Push_Plus_Sign','Parser.py',847),
  ('Push_Minus_Sign -> <empty>','Push_Minus_Sign',0,'p_Push_Minus_Sign','Parser.py',853),
  ('Term -> Factor Mult_Div_Mod_Quad Multiple_Factors','Term',3,'p_Term','Parser.py',863),
  ('Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors','Multiple_Factors',5,'p_Multiple_Factors','Parser.py',869),
  ('Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors','Multiple_Factors',5,'p_Multiple_Factors','Parser.py',870),
  ('Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors','Multiple_Factors',5,'p_Multiple_Factors','Parser.py',871),
  ('Multiple_Factors -> Epsilon','Multiple_Factors',1,'p_Multiple_Factors','Parser.py',872),
  ('Mult_Div_Mod_Quad -> <empty>','Mult_Div_Mod_Quad',0,'p_Mult_Div_Mod_Quad','Parser.py',879),
  ('Push_Times_Sign -> <empty>','Push_Times_Sign',0,'p_Push_Times_Sign','Parser.py',933),
  ('Push_Divide_Sign -> <empty>','Push_Divide_Sign',0,'p_Push_Divide_Sign','Parser.py',939),
  ('Push_Mod_Sign -> <empty>','Push_Mod_Sign',0,'p_Push_Mod_Sign','Parser.py',945),
  ('Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom','Factor',5,'p_Factor','Parser.py',957),
  ('Factor -> Var_Cte','Factor',1,'p_Factor','Parser.py',958),
  ('Push_False_Bottom -> <empty>','Push_False_Bottom',0,'p_Push_False_Bottom','Parser.py',965),
  ('Pop_False_Bottom -> <empty>','Pop_False_Bottom',0,'p_Pop_False_Bottom','Parser.py',971),
  ('Var_Cte -> INT_CONST Save_Int_Const','Var_Cte',2,'p_Var_Cte','Parser.py',982),
  ('Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const','Var_Cte',3,'p_Var_Cte','Parser.py',983),
  ('Var_Cte -> FLOAT_CONST Save_Float_Const','Var_Cte',2,'p_Var_Cte','Parser.py',984),
  ('Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const','Var_Cte',3,'p_Var_Cte','Parser.py',985),
  ('Var_Cte -> BOOL_CONST Save_Bool_Const','Var_Cte',2,'p_Var_Cte','Parser.py',986),
  ('Var_Cte -> STRING_CONST Save_String_Const','Var_Cte',2,'p_Var_Cte','Parser.py',987),
  ('Var_Cte -> ID Get_Id_Value','Var_Cte',2,'p_Var_Cte','Parser.py',988),
  ('Save_Int_Const -> <empty>','Save_Int_Const',0,'p_Save_Int_Const','Parser.py',995),
  ('Save_Neg_Int_Const -> <empty>','Save_Neg_Int_Const',0,'p_Save_Neg_Int_Const','Parser.py',1014),
  ('Save_Float_Const -> <empty>','Save_Float_Const',0,'p_Save_Float_Const','Parser.py',1033),
  ('Save_Neg_Float_Const -> <empty>','Save_Neg_Float_Const',0,'p_Save_Neg_Float_Const','Parser.py',1052),
  ('Save_Bool_Const -> <empty>','Save_Bool_Const',0,'p_Save_Bool_Const','Parser.py',1071),
  ('Save_String_Const -> <empty>','Save_String_Const',0,'p_Save_String_Const','Parser.py',1090),
  ('Get_Id_Value -> <empty>','Get_Id_Value',0,'p_Get_Id_Value','Parser.py',1109),
  ('Epsilon -> <empty>','Epsilon',0,'p_Epsilon','Parser.py',1136),
]
