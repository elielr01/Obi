# -*- coding: utf-8 -*-

# Obi - SemanticCube
#
# Class that represents the semantic cube where we store the return types for each operation
#
# Author: El√≠ E. Linares
# ID: A00815654
# Date: Nov 27, 2017

class SemanticCube:

    # Constructor
    def __init__(self):

        # The semantic cub is represented as a dictionary
        #
        # DictSemanticCube:
        # Key = A tuple with
        # key: (operator, type) value: type
        self.dictSemanticCube = {
            # Integers
            (0, '+', 0): 0,
            (0, '-', 0): 0,
            (0, '*', 0): 0,
            (0, '/', 0): 0,
            (0, '%', 0): 0,
            (0, 'mod', 0): 1,
            (0, 'is', 0): 4,
            (0, '==', 0): 4,
            (0, '<=', 0): 4,
            (0, '>=', 0): 4,
            (0, '<', 0): 4,
            (0, '>', 0): 4,
            # Floats
            (1, '+', 1): 1,
            (1, '-', 1): 1,
            (1, '*', 1): 1,
            (1, '/', 1): 1,
            (1, '%', 1): 1,
            (1, 'mod', 1): 1,
            (1, 'is', 1): 4,
            (1, '==', 1): 4,
            (1, '<=', 1): 4,
            (1, '>=', 1): 4,
            (1, '<', 1): 4,
            (1, '>', 1): 4,
            # Strings
            (2, '+', 2): 2,
            (2, 'is', 2): 4,
            (2, '==', 2): 4,
            (2, '<=', 2): 4,
            (2, '>=', 2): 4,
            (2, '<', 2): 4,
            (2, '>', 2): 4,
            # Characters
            (3, 'is', 3): 4,
            (3, '==', 3): 4,
            (3, '<=', 3): 4,
            (3, '>=', 3): 4,
            (3, '<', 3): 4,
            (3, '>', 3): 4,
            # Booleans
            (4, 'and', 4): 4,
            (4, '&&', 4): 4,
            (4, 'or', 4): 4,
            (4, '||', 4): 4,
            ('not', 4): 4,
            ('!', 4): 4,
            (4, 'is', 4): 4,
            (4, '==', 4): 4,
            # Lists
            (5, '+', 5): 5,
            (5, 'is', 5): 4,
            (5, '==', 5): 4,
            # Mixtures
            # (0, '+', 1): 1,
            # (0, '-', 1): 1,
            # (1, '+', 0): 1,
            # (1, '-', 0): 1,
            # (0, '*', 1): 1,
            # (0, '/', 1): 1,
            # (1, '*', 0): 1,
            # (1, '/', 0): 1,
            # (0, '%', 1): 1,
            # (0, 'mod', 1): 1,
            # (0, '<=', 1): 4,
            # (0, '>=', 1): 4,
            # (0, '<', 1): 4,
            # (0, '>', 1): 4,
            # (0, 'is', 1): 4,
            # (0, '==', 1): 4,
            # (1, '%', 0): 1,
            # (1, 'mod', 0): 1,
            # (1, '<=', 0): 4,
            # (1, '>=', 0): 4,
            # (1, '<', 0): 4,
            # (1, '>', 0): 4,
            # (1, 'is', 0): 4,
            # (1, '==', 0): 4,
            (0, '=', 0): 0,
            # (0, '=', 1): 0,
            (1, '=', 1): 1,
            # (1, '=', 0): 1,
            (2, '=', 2): 2,
            (3, '=', 3): 3,
            (4, '=', 4): 4,
            (5, '=', 5): 5,
        }
