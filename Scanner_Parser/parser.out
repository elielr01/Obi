Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    TRIANGLE
    SQRB_OPEN
    YELLOW
    GREEN
    CYAN
    LINE
    RED
    POLYGON
    COMMENT
    GRAY
    POINT
    PURPLE
    SQRB_CLOSE
    COMMA
    ORANGE
    BLOCK_COMMENT
    PINK
    DRAW
    SQUARE
    FUNC
    INPUT
    WHITE
    MAGENTA
    RECTANGLE
    BLUE
    BLACK
    CIRCLE

Grammar

Rule 0     S' -> Obi
Rule 1     Obi -> Prev_To_Play Play
Rule 2     Prev_To_Play -> GoTo_Global_Vars Declare_Var GoTo_Play Prev_To_Play
Rule 3     Prev_To_Play -> Epsilon
Rule 4     GoTo_Global_Vars -> <empty>
Rule 5     GoTo_Play -> <empty>
Rule 6     Play -> PLAY Play_Init PAR_OPEN PAR_CLOSE Statements_Block
Rule 7     Play_Init -> <empty>
Rule 8     Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE
Rule 9     Multiple_Statements -> Statement Multiple_Statements
Rule 10    Multiple_Statements -> Epsilon
Rule 11    Statement -> Print
Rule 12    Statement -> Declare_Var
Rule 13    Statement -> Assignment
Rule 14    Statement -> While_Loop
Rule 15    Statement -> If_Eif_Else
Rule 16    Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON
Rule 17    If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else
Rule 18    Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion
Rule 19    Eif_Recursion -> Epsilon
Rule 20    Optional_Else -> ELSE Statements_Block
Rule 21    Optional_Else -> Epsilon
Rule 22    If_GoToF_Quad -> <empty>
Rule 23    GoTo_Fill -> <empty>
Rule 24    While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads
Rule 25    Push_While_Jump -> <empty>
Rule 26    While_Quad -> <empty>
Rule 27    Fill_While_Quads -> <empty>
Rule 28    Declare_Var -> Type ID SEMICOLON
Rule 29    Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON
Rule 30    Type -> INT
Rule 31    Type -> FLOAT
Rule 32    Type -> BOOL
Rule 33    Type -> STRING
Rule 34    Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON
Rule 35    Push_Assign -> <empty>
Rule 36    Exp -> Logical_Or
Rule 37    Exp -> Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
Rule 38    Exp -> Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
Rule 39    Equity_Quad -> <empty>
Rule 40    Push_Equal -> <empty>
Rule 41    Push_Diff -> <empty>
Rule 42    Logical_Or -> Logical_And Or_Quad Multiple_Ands
Rule 43    Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands
Rule 44    Multiple_Ands -> Epsilon
Rule 45    Or_Quad -> <empty>
Rule 46    Push_Or -> <empty>
Rule 47    Logical_And -> Logical_Not And_Quad Multiple_Nots
Rule 48    Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots
Rule 49    Multiple_Nots -> Epsilon
Rule 50    And_Quad -> <empty>
Rule 51    Push_And -> <empty>
Rule 52    Logical_Not -> Relational
Rule 53    Logical_Not -> NOT Push_Not Relational Not_Quad
Rule 54    Not_Quad -> <empty>
Rule 55    Push_Not -> <empty>
Rule 56    Relational -> Expression
Rule 57    Relational -> Expression LESS Push_Less Expression Relational_Quad
Rule 58    Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
Rule 59    Relational -> Expression GREATER Push_Greater Expression Relational_Quad
Rule 60    Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
Rule 61    Relational_Quad -> <empty>
Rule 62    Push_Less -> <empty>
Rule 63    Push_Less_Equal -> <empty>
Rule 64    Push_Greater -> <empty>
Rule 65    Push_Greater_Equal -> <empty>
Rule 66    Expression -> Term Sum_Sub_Quad Multiple_Terms
Rule 67    Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms
Rule 68    Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms
Rule 69    Multiple_Terms -> Epsilon
Rule 70    Sum_Sub_Quad -> <empty>
Rule 71    Push_Plus_Sign -> <empty>
Rule 72    Push_Minus_Sign -> <empty>
Rule 73    Term -> Factor Mult_Div_Mod_Quad Multiple_Factors
Rule 74    Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
Rule 75    Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
Rule 76    Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
Rule 77    Multiple_Factors -> Epsilon
Rule 78    Mult_Div_Mod_Quad -> <empty>
Rule 79    Push_Times_Sign -> <empty>
Rule 80    Push_Divide_Sign -> <empty>
Rule 81    Push_Mod_Sign -> <empty>
Rule 82    Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
Rule 83    Factor -> Var_Cte
Rule 84    Push_False_Bottom -> <empty>
Rule 85    Pop_False_Bottom -> <empty>
Rule 86    Var_Cte -> INT_CONST Save_Int_Const
Rule 87    Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const
Rule 88    Var_Cte -> FLOAT_CONST Save_Float_Const
Rule 89    Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
Rule 90    Var_Cte -> BOOL_CONST Save_Bool_Const
Rule 91    Var_Cte -> STRING_CONST Save_String_Const
Rule 92    Var_Cte -> ID Get_Id_Value
Rule 93    Save_Int_Const -> <empty>
Rule 94    Save_Neg_Int_Const -> <empty>
Rule 95    Save_Float_Const -> <empty>
Rule 96    Save_Neg_Float_Const -> <empty>
Rule 97    Save_Bool_Const -> <empty>
Rule 98    Save_String_Const -> <empty>
Rule 99    Get_Id_Value -> <empty>
Rule 100   Epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 48
ASSIGN               : 29 34
BLACK                : 
BLOCK_COMMENT        : 
BLUE                 : 
BOOL                 : 32
BOOL_CONST           : 90
CIRCLE               : 
COMMA                : 
COMMENT              : 
CURLYB_CLOSE         : 8
CURLYB_OPEN          : 8
CYAN                 : 
DIFF                 : 38
DIVIDE_SIGN          : 75
DRAW                 : 
EIF                  : 18
ELSE                 : 20
EQUAL                : 37
FLOAT                : 31
FLOAT_CONST          : 88 89
FUNC                 : 
GRAY                 : 
GREATER              : 59
GREATER_EQUAL        : 60
GREEN                : 
ID                   : 28 29 34 92
IF                   : 17
INPUT                : 
INT                  : 30
INT_CONST            : 86 87
LESS                 : 57
LESS_EQUAL           : 58
LINE                 : 
MAGENTA              : 
MINUS_SIGN           : 68 87 89
MOD_SIGN             : 76
NOT                  : 53
OR                   : 43
ORANGE               : 
PAR_CLOSE            : 6 16 17 18 24 82
PAR_OPEN             : 6 16 17 18 24 82
PINK                 : 
PLAY                 : 6
PLUS_SIGN            : 67
POINT                : 
POLYGON              : 
PRINT                : 16
PURPLE               : 
RECTANGLE            : 
RED                  : 
SEMICOLON            : 16 28 29 34
SQRB_CLOSE           : 
SQRB_OPEN            : 
SQUARE               : 
STRING               : 33
STRING_CONST         : 91
TIMES_SIGN           : 74
TRIANGLE             : 
WHILE                : 24
WHITE                : 
YELLOW               : 
error                : 

Nonterminals, with rules where they appear

And_Quad             : 47 48
Assignment           : 13
Declare_Var          : 2 12
Eif_Recursion        : 17 18
Epsilon              : 3 10 19 21 44 49 69 77
Equity_Quad          : 37 38
Exp                  : 16 17 18 24 29 34 82
Expression           : 56 57 57 58 58 59 59 60 60
Factor               : 73 74 75 76
Fill_While_Quads     : 24
Get_Id_Value         : 92
GoTo_Fill            : 17 18
GoTo_Global_Vars     : 2
GoTo_Play            : 2
If_Eif_Else          : 15
If_GoToF_Quad        : 17 18
Logical_And          : 42 43
Logical_Not          : 47 48
Logical_Or           : 36 37 37 38 38
Mult_Div_Mod_Quad    : 73 74 75 76
Multiple_Ands        : 42 43
Multiple_Factors     : 73 74 75 76
Multiple_Nots        : 47 48
Multiple_Statements  : 8 9
Multiple_Terms       : 66 67 68
Not_Quad             : 53
Obi                  : 0
Optional_Else        : 17
Or_Quad              : 42 43
Play                 : 1
Play_Init            : 6
Pop_False_Bottom     : 82
Prev_To_Play         : 1 2
Print                : 11
Push_And             : 48
Push_Assign          : 29 34
Push_Diff            : 38
Push_Divide_Sign     : 75
Push_Equal           : 37
Push_False_Bottom    : 82
Push_Greater         : 59
Push_Greater_Equal   : 60
Push_Less            : 57
Push_Less_Equal      : 58
Push_Minus_Sign      : 68
Push_Mod_Sign        : 76
Push_Not             : 53
Push_Or              : 43
Push_Plus_Sign       : 67
Push_Times_Sign      : 74
Push_While_Jump      : 24
Relational           : 52 53
Relational_Quad      : 57 58 59 60
Save_Bool_Const      : 90
Save_Float_Const     : 88
Save_Int_Const       : 86
Save_Neg_Float_Const : 89
Save_Neg_Int_Const   : 87
Save_String_Const    : 91
Statement            : 9
Statements_Block     : 6 17 18 20 24
Sum_Sub_Quad         : 66 67 68
Term                 : 66 67 68
Type                 : 28 29
Var_Cte              : 83
While_Loop           : 14
While_Quad           : 24

Parsing method: LALR

state 0

    (0) S' -> . Obi
    (1) Obi -> . Prev_To_Play Play
    (2) Prev_To_Play -> . GoTo_Global_Vars Declare_Var GoTo_Play Prev_To_Play
    (3) Prev_To_Play -> . Epsilon
    (4) GoTo_Global_Vars -> .
    (100) Epsilon -> .

    INT             reduce using rule 4 (GoTo_Global_Vars -> .)
    FLOAT           reduce using rule 4 (GoTo_Global_Vars -> .)
    BOOL            reduce using rule 4 (GoTo_Global_Vars -> .)
    STRING          reduce using rule 4 (GoTo_Global_Vars -> .)
    PLAY            reduce using rule 100 (Epsilon -> .)

    Obi                            shift and go to state 1
    Epsilon                        shift and go to state 2
    Prev_To_Play                   shift and go to state 3
    GoTo_Global_Vars               shift and go to state 4

state 1

    (0) S' -> Obi .



state 2

    (3) Prev_To_Play -> Epsilon .

    PLAY            reduce using rule 3 (Prev_To_Play -> Epsilon .)


state 3

    (1) Obi -> Prev_To_Play . Play
    (6) Play -> . PLAY Play_Init PAR_OPEN PAR_CLOSE Statements_Block

    PLAY            shift and go to state 6

    Play                           shift and go to state 5

state 4

    (2) Prev_To_Play -> GoTo_Global_Vars . Declare_Var GoTo_Play Prev_To_Play
    (28) Declare_Var -> . Type ID SEMICOLON
    (29) Declare_Var -> . Type ID ASSIGN Push_Assign Exp SEMICOLON
    (30) Type -> . INT
    (31) Type -> . FLOAT
    (32) Type -> . BOOL
    (33) Type -> . STRING

    INT             shift and go to state 8
    FLOAT           shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 7

    Declare_Var                    shift and go to state 9
    Type                           shift and go to state 12

state 5

    (1) Obi -> Prev_To_Play Play .

    $end            reduce using rule 1 (Obi -> Prev_To_Play Play .)


state 6

    (6) Play -> PLAY . Play_Init PAR_OPEN PAR_CLOSE Statements_Block
    (7) Play_Init -> .

    PAR_OPEN        reduce using rule 7 (Play_Init -> .)

    Play_Init                      shift and go to state 13

state 7

    (33) Type -> STRING .

    ID              reduce using rule 33 (Type -> STRING .)


state 8

    (30) Type -> INT .

    ID              reduce using rule 30 (Type -> INT .)


state 9

    (2) Prev_To_Play -> GoTo_Global_Vars Declare_Var . GoTo_Play Prev_To_Play
    (5) GoTo_Play -> .

    INT             reduce using rule 5 (GoTo_Play -> .)
    FLOAT           reduce using rule 5 (GoTo_Play -> .)
    BOOL            reduce using rule 5 (GoTo_Play -> .)
    STRING          reduce using rule 5 (GoTo_Play -> .)
    PLAY            reduce using rule 5 (GoTo_Play -> .)

    GoTo_Play                      shift and go to state 14

state 10

    (31) Type -> FLOAT .

    ID              reduce using rule 31 (Type -> FLOAT .)


state 11

    (32) Type -> BOOL .

    ID              reduce using rule 32 (Type -> BOOL .)


state 12

    (28) Declare_Var -> Type . ID SEMICOLON
    (29) Declare_Var -> Type . ID ASSIGN Push_Assign Exp SEMICOLON

    ID              shift and go to state 15


state 13

    (6) Play -> PLAY Play_Init . PAR_OPEN PAR_CLOSE Statements_Block

    PAR_OPEN        shift and go to state 16


state 14

    (2) Prev_To_Play -> GoTo_Global_Vars Declare_Var GoTo_Play . Prev_To_Play
    (2) Prev_To_Play -> . GoTo_Global_Vars Declare_Var GoTo_Play Prev_To_Play
    (3) Prev_To_Play -> . Epsilon
    (4) GoTo_Global_Vars -> .
    (100) Epsilon -> .

    INT             reduce using rule 4 (GoTo_Global_Vars -> .)
    FLOAT           reduce using rule 4 (GoTo_Global_Vars -> .)
    BOOL            reduce using rule 4 (GoTo_Global_Vars -> .)
    STRING          reduce using rule 4 (GoTo_Global_Vars -> .)
    PLAY            reduce using rule 100 (Epsilon -> .)

    Prev_To_Play                   shift and go to state 17
    GoTo_Global_Vars               shift and go to state 4
    Epsilon                        shift and go to state 2

state 15

    (28) Declare_Var -> Type ID . SEMICOLON
    (29) Declare_Var -> Type ID . ASSIGN Push_Assign Exp SEMICOLON

    SEMICOLON       shift and go to state 18
    ASSIGN          shift and go to state 19


state 16

    (6) Play -> PLAY Play_Init PAR_OPEN . PAR_CLOSE Statements_Block

    PAR_CLOSE       shift and go to state 20


state 17

    (2) Prev_To_Play -> GoTo_Global_Vars Declare_Var GoTo_Play Prev_To_Play .

    PLAY            reduce using rule 2 (Prev_To_Play -> GoTo_Global_Vars Declare_Var GoTo_Play Prev_To_Play .)


state 18

    (28) Declare_Var -> Type ID SEMICOLON .

    PRINT           reduce using rule 28 (Declare_Var -> Type ID SEMICOLON .)
    ID              reduce using rule 28 (Declare_Var -> Type ID SEMICOLON .)
    WHILE           reduce using rule 28 (Declare_Var -> Type ID SEMICOLON .)
    IF              reduce using rule 28 (Declare_Var -> Type ID SEMICOLON .)
    INT             reduce using rule 28 (Declare_Var -> Type ID SEMICOLON .)
    FLOAT           reduce using rule 28 (Declare_Var -> Type ID SEMICOLON .)
    BOOL            reduce using rule 28 (Declare_Var -> Type ID SEMICOLON .)
    STRING          reduce using rule 28 (Declare_Var -> Type ID SEMICOLON .)
    CURLYB_CLOSE    reduce using rule 28 (Declare_Var -> Type ID SEMICOLON .)
    PLAY            reduce using rule 28 (Declare_Var -> Type ID SEMICOLON .)


state 19

    (29) Declare_Var -> Type ID ASSIGN . Push_Assign Exp SEMICOLON
    (35) Push_Assign -> .

    NOT             reduce using rule 35 (Push_Assign -> .)
    PAR_OPEN        reduce using rule 35 (Push_Assign -> .)
    INT_CONST       reduce using rule 35 (Push_Assign -> .)
    MINUS_SIGN      reduce using rule 35 (Push_Assign -> .)
    FLOAT_CONST     reduce using rule 35 (Push_Assign -> .)
    BOOL_CONST      reduce using rule 35 (Push_Assign -> .)
    STRING_CONST    reduce using rule 35 (Push_Assign -> .)
    ID              reduce using rule 35 (Push_Assign -> .)

    Push_Assign                    shift and go to state 21

state 20

    (6) Play -> PLAY Play_Init PAR_OPEN PAR_CLOSE . Statements_Block
    (8) Statements_Block -> . CURLYB_OPEN Multiple_Statements CURLYB_CLOSE

    CURLYB_OPEN     shift and go to state 23

    Statements_Block               shift and go to state 22

state 21

    (29) Declare_Var -> Type ID ASSIGN Push_Assign . Exp SEMICOLON
    (36) Exp -> . Logical_Or
    (37) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (38) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (42) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (47) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (52) Logical_Not -> . Relational
    (53) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 40
    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Factor                         shift and go to state 32
    Relational                     shift and go to state 26
    Logical_Not                    shift and go to state 28
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Logical_Or                     shift and go to state 34
    Logical_And                    shift and go to state 35
    Exp                            shift and go to state 36
    Expression                     shift and go to state 37

state 22

    (6) Play -> PLAY Play_Init PAR_OPEN PAR_CLOSE Statements_Block .

    $end            reduce using rule 6 (Play -> PLAY Play_Init PAR_OPEN PAR_CLOSE Statements_Block .)


state 23

    (8) Statements_Block -> CURLYB_OPEN . Multiple_Statements CURLYB_CLOSE
    (9) Multiple_Statements -> . Statement Multiple_Statements
    (10) Multiple_Statements -> . Epsilon
    (11) Statement -> . Print
    (12) Statement -> . Declare_Var
    (13) Statement -> . Assignment
    (14) Statement -> . While_Loop
    (15) Statement -> . If_Eif_Else
    (100) Epsilon -> .
    (16) Print -> . PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON
    (28) Declare_Var -> . Type ID SEMICOLON
    (29) Declare_Var -> . Type ID ASSIGN Push_Assign Exp SEMICOLON
    (34) Assignment -> . ID ASSIGN Push_Assign Exp SEMICOLON
    (24) While_Loop -> . WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads
    (17) If_Eif_Else -> . IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else
    (30) Type -> . INT
    (31) Type -> . FLOAT
    (32) Type -> . BOOL
    (33) Type -> . STRING

    CURLYB_CLOSE    reduce using rule 100 (Epsilon -> .)
    PRINT           shift and go to state 44
    ID              shift and go to state 50
    WHILE           shift and go to state 42
    IF              shift and go to state 51
    INT             shift and go to state 8
    FLOAT           shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 7

    Multiple_Statements            shift and go to state 46
    While_Loop                     shift and go to state 47
    Epsilon                        shift and go to state 45
    If_Eif_Else                    shift and go to state 49
    Declare_Var                    shift and go to state 48
    Statement                      shift and go to state 43
    Assignment                     shift and go to state 52
    Print                          shift and go to state 41
    Type                           shift and go to state 12

state 24

    (82) Factor -> PAR_OPEN . Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (84) Push_False_Bottom -> .

    NOT             reduce using rule 84 (Push_False_Bottom -> .)
    PAR_OPEN        reduce using rule 84 (Push_False_Bottom -> .)
    INT_CONST       reduce using rule 84 (Push_False_Bottom -> .)
    MINUS_SIGN      reduce using rule 84 (Push_False_Bottom -> .)
    FLOAT_CONST     reduce using rule 84 (Push_False_Bottom -> .)
    BOOL_CONST      reduce using rule 84 (Push_False_Bottom -> .)
    STRING_CONST    reduce using rule 84 (Push_False_Bottom -> .)
    ID              reduce using rule 84 (Push_False_Bottom -> .)

    Push_False_Bottom              shift and go to state 53

state 25

    (88) Var_Cte -> FLOAT_CONST . Save_Float_Const
    (95) Save_Float_Const -> .

    TIMES_SIGN      reduce using rule 95 (Save_Float_Const -> .)
    DIVIDE_SIGN     reduce using rule 95 (Save_Float_Const -> .)
    MOD_SIGN        reduce using rule 95 (Save_Float_Const -> .)
    PLUS_SIGN       reduce using rule 95 (Save_Float_Const -> .)
    MINUS_SIGN      reduce using rule 95 (Save_Float_Const -> .)
    LESS            reduce using rule 95 (Save_Float_Const -> .)
    LESS_EQUAL      reduce using rule 95 (Save_Float_Const -> .)
    GREATER         reduce using rule 95 (Save_Float_Const -> .)
    GREATER_EQUAL   reduce using rule 95 (Save_Float_Const -> .)
    AND             reduce using rule 95 (Save_Float_Const -> .)
    OR              reduce using rule 95 (Save_Float_Const -> .)
    EQUAL           reduce using rule 95 (Save_Float_Const -> .)
    DIFF            reduce using rule 95 (Save_Float_Const -> .)
    SEMICOLON       reduce using rule 95 (Save_Float_Const -> .)
    PAR_CLOSE       reduce using rule 95 (Save_Float_Const -> .)

    Save_Float_Const               shift and go to state 54

state 26

    (52) Logical_Not -> Relational .

    AND             reduce using rule 52 (Logical_Not -> Relational .)
    OR              reduce using rule 52 (Logical_Not -> Relational .)
    EQUAL           reduce using rule 52 (Logical_Not -> Relational .)
    DIFF            reduce using rule 52 (Logical_Not -> Relational .)
    SEMICOLON       reduce using rule 52 (Logical_Not -> Relational .)
    PAR_CLOSE       reduce using rule 52 (Logical_Not -> Relational .)


state 27

    (86) Var_Cte -> INT_CONST . Save_Int_Const
    (93) Save_Int_Const -> .

    TIMES_SIGN      reduce using rule 93 (Save_Int_Const -> .)
    DIVIDE_SIGN     reduce using rule 93 (Save_Int_Const -> .)
    MOD_SIGN        reduce using rule 93 (Save_Int_Const -> .)
    PLUS_SIGN       reduce using rule 93 (Save_Int_Const -> .)
    MINUS_SIGN      reduce using rule 93 (Save_Int_Const -> .)
    LESS            reduce using rule 93 (Save_Int_Const -> .)
    LESS_EQUAL      reduce using rule 93 (Save_Int_Const -> .)
    GREATER         reduce using rule 93 (Save_Int_Const -> .)
    GREATER_EQUAL   reduce using rule 93 (Save_Int_Const -> .)
    AND             reduce using rule 93 (Save_Int_Const -> .)
    OR              reduce using rule 93 (Save_Int_Const -> .)
    EQUAL           reduce using rule 93 (Save_Int_Const -> .)
    DIFF            reduce using rule 93 (Save_Int_Const -> .)
    SEMICOLON       reduce using rule 93 (Save_Int_Const -> .)
    PAR_CLOSE       reduce using rule 93 (Save_Int_Const -> .)

    Save_Int_Const                 shift and go to state 55

state 28

    (47) Logical_And -> Logical_Not . And_Quad Multiple_Nots
    (50) And_Quad -> .

    AND             reduce using rule 50 (And_Quad -> .)
    OR              reduce using rule 50 (And_Quad -> .)
    EQUAL           reduce using rule 50 (And_Quad -> .)
    DIFF            reduce using rule 50 (And_Quad -> .)
    SEMICOLON       reduce using rule 50 (And_Quad -> .)
    PAR_CLOSE       reduce using rule 50 (And_Quad -> .)

    And_Quad                       shift and go to state 56

state 29

    (90) Var_Cte -> BOOL_CONST . Save_Bool_Const
    (97) Save_Bool_Const -> .

    TIMES_SIGN      reduce using rule 97 (Save_Bool_Const -> .)
    DIVIDE_SIGN     reduce using rule 97 (Save_Bool_Const -> .)
    MOD_SIGN        reduce using rule 97 (Save_Bool_Const -> .)
    PLUS_SIGN       reduce using rule 97 (Save_Bool_Const -> .)
    MINUS_SIGN      reduce using rule 97 (Save_Bool_Const -> .)
    LESS            reduce using rule 97 (Save_Bool_Const -> .)
    LESS_EQUAL      reduce using rule 97 (Save_Bool_Const -> .)
    GREATER         reduce using rule 97 (Save_Bool_Const -> .)
    GREATER_EQUAL   reduce using rule 97 (Save_Bool_Const -> .)
    AND             reduce using rule 97 (Save_Bool_Const -> .)
    OR              reduce using rule 97 (Save_Bool_Const -> .)
    EQUAL           reduce using rule 97 (Save_Bool_Const -> .)
    DIFF            reduce using rule 97 (Save_Bool_Const -> .)
    SEMICOLON       reduce using rule 97 (Save_Bool_Const -> .)
    PAR_CLOSE       reduce using rule 97 (Save_Bool_Const -> .)

    Save_Bool_Const                shift and go to state 57

state 30

    (91) Var_Cte -> STRING_CONST . Save_String_Const
    (98) Save_String_Const -> .

    TIMES_SIGN      reduce using rule 98 (Save_String_Const -> .)
    DIVIDE_SIGN     reduce using rule 98 (Save_String_Const -> .)
    MOD_SIGN        reduce using rule 98 (Save_String_Const -> .)
    PLUS_SIGN       reduce using rule 98 (Save_String_Const -> .)
    MINUS_SIGN      reduce using rule 98 (Save_String_Const -> .)
    LESS            reduce using rule 98 (Save_String_Const -> .)
    LESS_EQUAL      reduce using rule 98 (Save_String_Const -> .)
    GREATER         reduce using rule 98 (Save_String_Const -> .)
    GREATER_EQUAL   reduce using rule 98 (Save_String_Const -> .)
    AND             reduce using rule 98 (Save_String_Const -> .)
    OR              reduce using rule 98 (Save_String_Const -> .)
    EQUAL           reduce using rule 98 (Save_String_Const -> .)
    DIFF            reduce using rule 98 (Save_String_Const -> .)
    SEMICOLON       reduce using rule 98 (Save_String_Const -> .)
    PAR_CLOSE       reduce using rule 98 (Save_String_Const -> .)

    Save_String_Const              shift and go to state 58

state 31

    (66) Expression -> Term . Sum_Sub_Quad Multiple_Terms
    (70) Sum_Sub_Quad -> .

    PLUS_SIGN       reduce using rule 70 (Sum_Sub_Quad -> .)
    MINUS_SIGN      reduce using rule 70 (Sum_Sub_Quad -> .)
    LESS            reduce using rule 70 (Sum_Sub_Quad -> .)
    LESS_EQUAL      reduce using rule 70 (Sum_Sub_Quad -> .)
    GREATER         reduce using rule 70 (Sum_Sub_Quad -> .)
    GREATER_EQUAL   reduce using rule 70 (Sum_Sub_Quad -> .)
    AND             reduce using rule 70 (Sum_Sub_Quad -> .)
    OR              reduce using rule 70 (Sum_Sub_Quad -> .)
    EQUAL           reduce using rule 70 (Sum_Sub_Quad -> .)
    DIFF            reduce using rule 70 (Sum_Sub_Quad -> .)
    SEMICOLON       reduce using rule 70 (Sum_Sub_Quad -> .)
    PAR_CLOSE       reduce using rule 70 (Sum_Sub_Quad -> .)

    Sum_Sub_Quad                   shift and go to state 59

state 32

    (73) Term -> Factor . Mult_Div_Mod_Quad Multiple_Factors
    (78) Mult_Div_Mod_Quad -> .

    TIMES_SIGN      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    DIVIDE_SIGN     reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    MOD_SIGN        reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    PLUS_SIGN       reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    MINUS_SIGN      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    LESS            reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    LESS_EQUAL      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    GREATER         reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    GREATER_EQUAL   reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    AND             reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    OR              reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    EQUAL           reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    DIFF            reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    SEMICOLON       reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    PAR_CLOSE       reduce using rule 78 (Mult_Div_Mod_Quad -> .)

    Mult_Div_Mod_Quad              shift and go to state 60

state 33

    (83) Factor -> Var_Cte .

    TIMES_SIGN      reduce using rule 83 (Factor -> Var_Cte .)
    DIVIDE_SIGN     reduce using rule 83 (Factor -> Var_Cte .)
    MOD_SIGN        reduce using rule 83 (Factor -> Var_Cte .)
    PLUS_SIGN       reduce using rule 83 (Factor -> Var_Cte .)
    MINUS_SIGN      reduce using rule 83 (Factor -> Var_Cte .)
    LESS            reduce using rule 83 (Factor -> Var_Cte .)
    LESS_EQUAL      reduce using rule 83 (Factor -> Var_Cte .)
    GREATER         reduce using rule 83 (Factor -> Var_Cte .)
    GREATER_EQUAL   reduce using rule 83 (Factor -> Var_Cte .)
    AND             reduce using rule 83 (Factor -> Var_Cte .)
    OR              reduce using rule 83 (Factor -> Var_Cte .)
    EQUAL           reduce using rule 83 (Factor -> Var_Cte .)
    DIFF            reduce using rule 83 (Factor -> Var_Cte .)
    SEMICOLON       reduce using rule 83 (Factor -> Var_Cte .)
    PAR_CLOSE       reduce using rule 83 (Factor -> Var_Cte .)


state 34

    (36) Exp -> Logical_Or .
    (37) Exp -> Logical_Or . EQUAL Push_Equal Logical_Or Equity_Quad
    (38) Exp -> Logical_Or . DIFF Push_Diff Logical_Or Equity_Quad

    PAR_CLOSE       reduce using rule 36 (Exp -> Logical_Or .)
    SEMICOLON       reduce using rule 36 (Exp -> Logical_Or .)
    EQUAL           shift and go to state 61
    DIFF            shift and go to state 62


state 35

    (42) Logical_Or -> Logical_And . Or_Quad Multiple_Ands
    (45) Or_Quad -> .

    OR              reduce using rule 45 (Or_Quad -> .)
    EQUAL           reduce using rule 45 (Or_Quad -> .)
    DIFF            reduce using rule 45 (Or_Quad -> .)
    SEMICOLON       reduce using rule 45 (Or_Quad -> .)
    PAR_CLOSE       reduce using rule 45 (Or_Quad -> .)

    Or_Quad                        shift and go to state 63

state 36

    (29) Declare_Var -> Type ID ASSIGN Push_Assign Exp . SEMICOLON

    SEMICOLON       shift and go to state 64


state 37

    (56) Relational -> Expression .
    (57) Relational -> Expression . LESS Push_Less Expression Relational_Quad
    (58) Relational -> Expression . LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> Expression . GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> Expression . GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad

    AND             reduce using rule 56 (Relational -> Expression .)
    OR              reduce using rule 56 (Relational -> Expression .)
    EQUAL           reduce using rule 56 (Relational -> Expression .)
    DIFF            reduce using rule 56 (Relational -> Expression .)
    PAR_CLOSE       reduce using rule 56 (Relational -> Expression .)
    SEMICOLON       reduce using rule 56 (Relational -> Expression .)
    LESS            shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREATER         shift and go to state 68
    GREATER_EQUAL   shift and go to state 67


state 38

    (92) Var_Cte -> ID . Get_Id_Value
    (99) Get_Id_Value -> .

    TIMES_SIGN      reduce using rule 99 (Get_Id_Value -> .)
    DIVIDE_SIGN     reduce using rule 99 (Get_Id_Value -> .)
    MOD_SIGN        reduce using rule 99 (Get_Id_Value -> .)
    PLUS_SIGN       reduce using rule 99 (Get_Id_Value -> .)
    MINUS_SIGN      reduce using rule 99 (Get_Id_Value -> .)
    LESS            reduce using rule 99 (Get_Id_Value -> .)
    LESS_EQUAL      reduce using rule 99 (Get_Id_Value -> .)
    GREATER         reduce using rule 99 (Get_Id_Value -> .)
    GREATER_EQUAL   reduce using rule 99 (Get_Id_Value -> .)
    AND             reduce using rule 99 (Get_Id_Value -> .)
    OR              reduce using rule 99 (Get_Id_Value -> .)
    EQUAL           reduce using rule 99 (Get_Id_Value -> .)
    DIFF            reduce using rule 99 (Get_Id_Value -> .)
    SEMICOLON       reduce using rule 99 (Get_Id_Value -> .)
    PAR_CLOSE       reduce using rule 99 (Get_Id_Value -> .)

    Get_Id_Value                   shift and go to state 69

state 39

    (87) Var_Cte -> MINUS_SIGN . INT_CONST Save_Neg_Int_Const
    (89) Var_Cte -> MINUS_SIGN . FLOAT_CONST Save_Neg_Float_Const

    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71


state 40

    (53) Logical_Not -> NOT . Push_Not Relational Not_Quad
    (55) Push_Not -> .

    PAR_OPEN        reduce using rule 55 (Push_Not -> .)
    INT_CONST       reduce using rule 55 (Push_Not -> .)
    MINUS_SIGN      reduce using rule 55 (Push_Not -> .)
    FLOAT_CONST     reduce using rule 55 (Push_Not -> .)
    BOOL_CONST      reduce using rule 55 (Push_Not -> .)
    STRING_CONST    reduce using rule 55 (Push_Not -> .)
    ID              reduce using rule 55 (Push_Not -> .)

    Push_Not                       shift and go to state 72

state 41

    (11) Statement -> Print .

    PRINT           reduce using rule 11 (Statement -> Print .)
    ID              reduce using rule 11 (Statement -> Print .)
    WHILE           reduce using rule 11 (Statement -> Print .)
    IF              reduce using rule 11 (Statement -> Print .)
    INT             reduce using rule 11 (Statement -> Print .)
    FLOAT           reduce using rule 11 (Statement -> Print .)
    BOOL            reduce using rule 11 (Statement -> Print .)
    STRING          reduce using rule 11 (Statement -> Print .)
    CURLYB_CLOSE    reduce using rule 11 (Statement -> Print .)


state 42

    (24) While_Loop -> WHILE . Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads
    (25) Push_While_Jump -> .

    PAR_OPEN        reduce using rule 25 (Push_While_Jump -> .)

    Push_While_Jump                shift and go to state 73

state 43

    (9) Multiple_Statements -> Statement . Multiple_Statements
    (9) Multiple_Statements -> . Statement Multiple_Statements
    (10) Multiple_Statements -> . Epsilon
    (11) Statement -> . Print
    (12) Statement -> . Declare_Var
    (13) Statement -> . Assignment
    (14) Statement -> . While_Loop
    (15) Statement -> . If_Eif_Else
    (100) Epsilon -> .
    (16) Print -> . PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON
    (28) Declare_Var -> . Type ID SEMICOLON
    (29) Declare_Var -> . Type ID ASSIGN Push_Assign Exp SEMICOLON
    (34) Assignment -> . ID ASSIGN Push_Assign Exp SEMICOLON
    (24) While_Loop -> . WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads
    (17) If_Eif_Else -> . IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else
    (30) Type -> . INT
    (31) Type -> . FLOAT
    (32) Type -> . BOOL
    (33) Type -> . STRING

    CURLYB_CLOSE    reduce using rule 100 (Epsilon -> .)
    PRINT           shift and go to state 44
    ID              shift and go to state 50
    WHILE           shift and go to state 42
    IF              shift and go to state 51
    INT             shift and go to state 8
    FLOAT           shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 7

    Multiple_Statements            shift and go to state 74
    While_Loop                     shift and go to state 47
    Epsilon                        shift and go to state 45
    If_Eif_Else                    shift and go to state 49
    Declare_Var                    shift and go to state 48
    Statement                      shift and go to state 43
    Assignment                     shift and go to state 52
    Print                          shift and go to state 41
    Type                           shift and go to state 12

state 44

    (16) Print -> PRINT . PAR_OPEN Exp PAR_CLOSE SEMICOLON

    PAR_OPEN        shift and go to state 75


state 45

    (10) Multiple_Statements -> Epsilon .

    CURLYB_CLOSE    reduce using rule 10 (Multiple_Statements -> Epsilon .)


state 46

    (8) Statements_Block -> CURLYB_OPEN Multiple_Statements . CURLYB_CLOSE

    CURLYB_CLOSE    shift and go to state 76


state 47

    (14) Statement -> While_Loop .

    PRINT           reduce using rule 14 (Statement -> While_Loop .)
    ID              reduce using rule 14 (Statement -> While_Loop .)
    WHILE           reduce using rule 14 (Statement -> While_Loop .)
    IF              reduce using rule 14 (Statement -> While_Loop .)
    INT             reduce using rule 14 (Statement -> While_Loop .)
    FLOAT           reduce using rule 14 (Statement -> While_Loop .)
    BOOL            reduce using rule 14 (Statement -> While_Loop .)
    STRING          reduce using rule 14 (Statement -> While_Loop .)
    CURLYB_CLOSE    reduce using rule 14 (Statement -> While_Loop .)


state 48

    (12) Statement -> Declare_Var .

    PRINT           reduce using rule 12 (Statement -> Declare_Var .)
    ID              reduce using rule 12 (Statement -> Declare_Var .)
    WHILE           reduce using rule 12 (Statement -> Declare_Var .)
    IF              reduce using rule 12 (Statement -> Declare_Var .)
    INT             reduce using rule 12 (Statement -> Declare_Var .)
    FLOAT           reduce using rule 12 (Statement -> Declare_Var .)
    BOOL            reduce using rule 12 (Statement -> Declare_Var .)
    STRING          reduce using rule 12 (Statement -> Declare_Var .)
    CURLYB_CLOSE    reduce using rule 12 (Statement -> Declare_Var .)


state 49

    (15) Statement -> If_Eif_Else .

    PRINT           reduce using rule 15 (Statement -> If_Eif_Else .)
    ID              reduce using rule 15 (Statement -> If_Eif_Else .)
    WHILE           reduce using rule 15 (Statement -> If_Eif_Else .)
    IF              reduce using rule 15 (Statement -> If_Eif_Else .)
    INT             reduce using rule 15 (Statement -> If_Eif_Else .)
    FLOAT           reduce using rule 15 (Statement -> If_Eif_Else .)
    BOOL            reduce using rule 15 (Statement -> If_Eif_Else .)
    STRING          reduce using rule 15 (Statement -> If_Eif_Else .)
    CURLYB_CLOSE    reduce using rule 15 (Statement -> If_Eif_Else .)


state 50

    (34) Assignment -> ID . ASSIGN Push_Assign Exp SEMICOLON

    ASSIGN          shift and go to state 77


state 51

    (17) If_Eif_Else -> IF . PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else

    PAR_OPEN        shift and go to state 78


state 52

    (13) Statement -> Assignment .

    PRINT           reduce using rule 13 (Statement -> Assignment .)
    ID              reduce using rule 13 (Statement -> Assignment .)
    WHILE           reduce using rule 13 (Statement -> Assignment .)
    IF              reduce using rule 13 (Statement -> Assignment .)
    INT             reduce using rule 13 (Statement -> Assignment .)
    FLOAT           reduce using rule 13 (Statement -> Assignment .)
    BOOL            reduce using rule 13 (Statement -> Assignment .)
    STRING          reduce using rule 13 (Statement -> Assignment .)
    CURLYB_CLOSE    reduce using rule 13 (Statement -> Assignment .)


state 53

    (82) Factor -> PAR_OPEN Push_False_Bottom . Exp PAR_CLOSE Pop_False_Bottom
    (36) Exp -> . Logical_Or
    (37) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (38) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (42) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (47) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (52) Logical_Not -> . Relational
    (53) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 40
    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Factor                         shift and go to state 32
    Relational                     shift and go to state 26
    Logical_Not                    shift and go to state 28
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Logical_Or                     shift and go to state 34
    Logical_And                    shift and go to state 35
    Exp                            shift and go to state 79
    Expression                     shift and go to state 37

state 54

    (88) Var_Cte -> FLOAT_CONST Save_Float_Const .

    TIMES_SIGN      reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    DIVIDE_SIGN     reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    MOD_SIGN        reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    PLUS_SIGN       reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    MINUS_SIGN      reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    LESS            reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    LESS_EQUAL      reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    GREATER         reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    GREATER_EQUAL   reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    AND             reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    OR              reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    EQUAL           reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    DIFF            reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    SEMICOLON       reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    PAR_CLOSE       reduce using rule 88 (Var_Cte -> FLOAT_CONST Save_Float_Const .)


state 55

    (86) Var_Cte -> INT_CONST Save_Int_Const .

    TIMES_SIGN      reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    DIVIDE_SIGN     reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    MOD_SIGN        reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    PLUS_SIGN       reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    MINUS_SIGN      reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    LESS            reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    LESS_EQUAL      reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    GREATER         reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    GREATER_EQUAL   reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    AND             reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    OR              reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    EQUAL           reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    DIFF            reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    SEMICOLON       reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)
    PAR_CLOSE       reduce using rule 86 (Var_Cte -> INT_CONST Save_Int_Const .)


state 56

    (47) Logical_And -> Logical_Not And_Quad . Multiple_Nots
    (48) Multiple_Nots -> . AND Push_And Logical_Not And_Quad Multiple_Nots
    (49) Multiple_Nots -> . Epsilon
    (100) Epsilon -> .

    AND             shift and go to state 80
    OR              reduce using rule 100 (Epsilon -> .)
    EQUAL           reduce using rule 100 (Epsilon -> .)
    DIFF            reduce using rule 100 (Epsilon -> .)
    SEMICOLON       reduce using rule 100 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 100 (Epsilon -> .)

    Multiple_Nots                  shift and go to state 82
    Epsilon                        shift and go to state 81

state 57

    (90) Var_Cte -> BOOL_CONST Save_Bool_Const .

    TIMES_SIGN      reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    DIVIDE_SIGN     reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    MOD_SIGN        reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    PLUS_SIGN       reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    MINUS_SIGN      reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    LESS            reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    LESS_EQUAL      reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    GREATER         reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    GREATER_EQUAL   reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    AND             reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    OR              reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    EQUAL           reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    DIFF            reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    SEMICOLON       reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    PAR_CLOSE       reduce using rule 90 (Var_Cte -> BOOL_CONST Save_Bool_Const .)


state 58

    (91) Var_Cte -> STRING_CONST Save_String_Const .

    TIMES_SIGN      reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    DIVIDE_SIGN     reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    MOD_SIGN        reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    PLUS_SIGN       reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    MINUS_SIGN      reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    LESS            reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    LESS_EQUAL      reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    GREATER         reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    GREATER_EQUAL   reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    AND             reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    OR              reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    EQUAL           reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    DIFF            reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    SEMICOLON       reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)
    PAR_CLOSE       reduce using rule 91 (Var_Cte -> STRING_CONST Save_String_Const .)


state 59

    (66) Expression -> Term Sum_Sub_Quad . Multiple_Terms
    (67) Multiple_Terms -> . PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms
    (68) Multiple_Terms -> . MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms
    (69) Multiple_Terms -> . Epsilon
    (100) Epsilon -> .

    PLUS_SIGN       shift and go to state 86
    MINUS_SIGN      shift and go to state 85
    LESS            reduce using rule 100 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 100 (Epsilon -> .)
    GREATER         reduce using rule 100 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 100 (Epsilon -> .)
    AND             reduce using rule 100 (Epsilon -> .)
    OR              reduce using rule 100 (Epsilon -> .)
    EQUAL           reduce using rule 100 (Epsilon -> .)
    DIFF            reduce using rule 100 (Epsilon -> .)
    SEMICOLON       reduce using rule 100 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 100 (Epsilon -> .)

    Multiple_Terms                 shift and go to state 83
    Epsilon                        shift and go to state 84

state 60

    (73) Term -> Factor Mult_Div_Mod_Quad . Multiple_Factors
    (74) Multiple_Factors -> . TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (75) Multiple_Factors -> . DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (76) Multiple_Factors -> . MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (77) Multiple_Factors -> . Epsilon
    (100) Epsilon -> .

    TIMES_SIGN      shift and go to state 87
    DIVIDE_SIGN     shift and go to state 91
    MOD_SIGN        shift and go to state 88
    PLUS_SIGN       reduce using rule 100 (Epsilon -> .)
    MINUS_SIGN      reduce using rule 100 (Epsilon -> .)
    LESS            reduce using rule 100 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 100 (Epsilon -> .)
    GREATER         reduce using rule 100 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 100 (Epsilon -> .)
    AND             reduce using rule 100 (Epsilon -> .)
    OR              reduce using rule 100 (Epsilon -> .)
    EQUAL           reduce using rule 100 (Epsilon -> .)
    DIFF            reduce using rule 100 (Epsilon -> .)
    SEMICOLON       reduce using rule 100 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 100 (Epsilon -> .)

    Epsilon                        shift and go to state 89
    Multiple_Factors               shift and go to state 90

state 61

    (37) Exp -> Logical_Or EQUAL . Push_Equal Logical_Or Equity_Quad
    (40) Push_Equal -> .

    NOT             reduce using rule 40 (Push_Equal -> .)
    PAR_OPEN        reduce using rule 40 (Push_Equal -> .)
    INT_CONST       reduce using rule 40 (Push_Equal -> .)
    MINUS_SIGN      reduce using rule 40 (Push_Equal -> .)
    FLOAT_CONST     reduce using rule 40 (Push_Equal -> .)
    BOOL_CONST      reduce using rule 40 (Push_Equal -> .)
    STRING_CONST    reduce using rule 40 (Push_Equal -> .)
    ID              reduce using rule 40 (Push_Equal -> .)

    Push_Equal                     shift and go to state 92

state 62

    (38) Exp -> Logical_Or DIFF . Push_Diff Logical_Or Equity_Quad
    (41) Push_Diff -> .

    NOT             reduce using rule 41 (Push_Diff -> .)
    PAR_OPEN        reduce using rule 41 (Push_Diff -> .)
    INT_CONST       reduce using rule 41 (Push_Diff -> .)
    MINUS_SIGN      reduce using rule 41 (Push_Diff -> .)
    FLOAT_CONST     reduce using rule 41 (Push_Diff -> .)
    BOOL_CONST      reduce using rule 41 (Push_Diff -> .)
    STRING_CONST    reduce using rule 41 (Push_Diff -> .)
    ID              reduce using rule 41 (Push_Diff -> .)

    Push_Diff                      shift and go to state 93

state 63

    (42) Logical_Or -> Logical_And Or_Quad . Multiple_Ands
    (43) Multiple_Ands -> . OR Push_Or Logical_And Or_Quad Multiple_Ands
    (44) Multiple_Ands -> . Epsilon
    (100) Epsilon -> .

    OR              shift and go to state 96
    EQUAL           reduce using rule 100 (Epsilon -> .)
    DIFF            reduce using rule 100 (Epsilon -> .)
    SEMICOLON       reduce using rule 100 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 100 (Epsilon -> .)

    Multiple_Ands                  shift and go to state 94
    Epsilon                        shift and go to state 95

state 64

    (29) Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .

    PRINT           reduce using rule 29 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    ID              reduce using rule 29 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    WHILE           reduce using rule 29 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    IF              reduce using rule 29 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    INT             reduce using rule 29 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    FLOAT           reduce using rule 29 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    BOOL            reduce using rule 29 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    STRING          reduce using rule 29 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    CURLYB_CLOSE    reduce using rule 29 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    PLAY            reduce using rule 29 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)


state 65

    (57) Relational -> Expression LESS . Push_Less Expression Relational_Quad
    (62) Push_Less -> .

    PAR_OPEN        reduce using rule 62 (Push_Less -> .)
    INT_CONST       reduce using rule 62 (Push_Less -> .)
    MINUS_SIGN      reduce using rule 62 (Push_Less -> .)
    FLOAT_CONST     reduce using rule 62 (Push_Less -> .)
    BOOL_CONST      reduce using rule 62 (Push_Less -> .)
    STRING_CONST    reduce using rule 62 (Push_Less -> .)
    ID              reduce using rule 62 (Push_Less -> .)

    Push_Less                      shift and go to state 97

state 66

    (58) Relational -> Expression LESS_EQUAL . Push_Less_Equal Expression Relational_Quad
    (63) Push_Less_Equal -> .

    PAR_OPEN        reduce using rule 63 (Push_Less_Equal -> .)
    INT_CONST       reduce using rule 63 (Push_Less_Equal -> .)
    MINUS_SIGN      reduce using rule 63 (Push_Less_Equal -> .)
    FLOAT_CONST     reduce using rule 63 (Push_Less_Equal -> .)
    BOOL_CONST      reduce using rule 63 (Push_Less_Equal -> .)
    STRING_CONST    reduce using rule 63 (Push_Less_Equal -> .)
    ID              reduce using rule 63 (Push_Less_Equal -> .)

    Push_Less_Equal                shift and go to state 98

state 67

    (60) Relational -> Expression GREATER_EQUAL . Push_Greater_Equal Expression Relational_Quad
    (65) Push_Greater_Equal -> .

    PAR_OPEN        reduce using rule 65 (Push_Greater_Equal -> .)
    INT_CONST       reduce using rule 65 (Push_Greater_Equal -> .)
    MINUS_SIGN      reduce using rule 65 (Push_Greater_Equal -> .)
    FLOAT_CONST     reduce using rule 65 (Push_Greater_Equal -> .)
    BOOL_CONST      reduce using rule 65 (Push_Greater_Equal -> .)
    STRING_CONST    reduce using rule 65 (Push_Greater_Equal -> .)
    ID              reduce using rule 65 (Push_Greater_Equal -> .)

    Push_Greater_Equal             shift and go to state 99

state 68

    (59) Relational -> Expression GREATER . Push_Greater Expression Relational_Quad
    (64) Push_Greater -> .

    PAR_OPEN        reduce using rule 64 (Push_Greater -> .)
    INT_CONST       reduce using rule 64 (Push_Greater -> .)
    MINUS_SIGN      reduce using rule 64 (Push_Greater -> .)
    FLOAT_CONST     reduce using rule 64 (Push_Greater -> .)
    BOOL_CONST      reduce using rule 64 (Push_Greater -> .)
    STRING_CONST    reduce using rule 64 (Push_Greater -> .)
    ID              reduce using rule 64 (Push_Greater -> .)

    Push_Greater                   shift and go to state 100

state 69

    (92) Var_Cte -> ID Get_Id_Value .

    TIMES_SIGN      reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    DIVIDE_SIGN     reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    MOD_SIGN        reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    PLUS_SIGN       reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    MINUS_SIGN      reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    LESS            reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    LESS_EQUAL      reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    GREATER         reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    GREATER_EQUAL   reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    AND             reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    OR              reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    EQUAL           reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    DIFF            reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    SEMICOLON       reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)
    PAR_CLOSE       reduce using rule 92 (Var_Cte -> ID Get_Id_Value .)


state 70

    (87) Var_Cte -> MINUS_SIGN INT_CONST . Save_Neg_Int_Const
    (94) Save_Neg_Int_Const -> .

    TIMES_SIGN      reduce using rule 94 (Save_Neg_Int_Const -> .)
    DIVIDE_SIGN     reduce using rule 94 (Save_Neg_Int_Const -> .)
    MOD_SIGN        reduce using rule 94 (Save_Neg_Int_Const -> .)
    PLUS_SIGN       reduce using rule 94 (Save_Neg_Int_Const -> .)
    MINUS_SIGN      reduce using rule 94 (Save_Neg_Int_Const -> .)
    LESS            reduce using rule 94 (Save_Neg_Int_Const -> .)
    LESS_EQUAL      reduce using rule 94 (Save_Neg_Int_Const -> .)
    GREATER         reduce using rule 94 (Save_Neg_Int_Const -> .)
    GREATER_EQUAL   reduce using rule 94 (Save_Neg_Int_Const -> .)
    AND             reduce using rule 94 (Save_Neg_Int_Const -> .)
    OR              reduce using rule 94 (Save_Neg_Int_Const -> .)
    EQUAL           reduce using rule 94 (Save_Neg_Int_Const -> .)
    DIFF            reduce using rule 94 (Save_Neg_Int_Const -> .)
    SEMICOLON       reduce using rule 94 (Save_Neg_Int_Const -> .)
    PAR_CLOSE       reduce using rule 94 (Save_Neg_Int_Const -> .)

    Save_Neg_Int_Const             shift and go to state 101

state 71

    (89) Var_Cte -> MINUS_SIGN FLOAT_CONST . Save_Neg_Float_Const
    (96) Save_Neg_Float_Const -> .

    TIMES_SIGN      reduce using rule 96 (Save_Neg_Float_Const -> .)
    DIVIDE_SIGN     reduce using rule 96 (Save_Neg_Float_Const -> .)
    MOD_SIGN        reduce using rule 96 (Save_Neg_Float_Const -> .)
    PLUS_SIGN       reduce using rule 96 (Save_Neg_Float_Const -> .)
    MINUS_SIGN      reduce using rule 96 (Save_Neg_Float_Const -> .)
    LESS            reduce using rule 96 (Save_Neg_Float_Const -> .)
    LESS_EQUAL      reduce using rule 96 (Save_Neg_Float_Const -> .)
    GREATER         reduce using rule 96 (Save_Neg_Float_Const -> .)
    GREATER_EQUAL   reduce using rule 96 (Save_Neg_Float_Const -> .)
    AND             reduce using rule 96 (Save_Neg_Float_Const -> .)
    OR              reduce using rule 96 (Save_Neg_Float_Const -> .)
    EQUAL           reduce using rule 96 (Save_Neg_Float_Const -> .)
    DIFF            reduce using rule 96 (Save_Neg_Float_Const -> .)
    SEMICOLON       reduce using rule 96 (Save_Neg_Float_Const -> .)
    PAR_CLOSE       reduce using rule 96 (Save_Neg_Float_Const -> .)

    Save_Neg_Float_Const           shift and go to state 102

state 72

    (53) Logical_Not -> NOT Push_Not . Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Factor                         shift and go to state 32
    Relational                     shift and go to state 103
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Expression                     shift and go to state 37

state 73

    (24) While_Loop -> WHILE Push_While_Jump . PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads

    PAR_OPEN        shift and go to state 104


state 74

    (9) Multiple_Statements -> Statement Multiple_Statements .

    CURLYB_CLOSE    reduce using rule 9 (Multiple_Statements -> Statement Multiple_Statements .)


state 75

    (16) Print -> PRINT PAR_OPEN . Exp PAR_CLOSE SEMICOLON
    (36) Exp -> . Logical_Or
    (37) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (38) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (42) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (47) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (52) Logical_Not -> . Relational
    (53) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 40
    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Factor                         shift and go to state 32
    Relational                     shift and go to state 26
    Logical_Not                    shift and go to state 28
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Logical_Or                     shift and go to state 34
    Logical_And                    shift and go to state 35
    Exp                            shift and go to state 105
    Expression                     shift and go to state 37

state 76

    (8) Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .

    PRINT           reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    ID              reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    WHILE           reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    IF              reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    INT             reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    FLOAT           reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    BOOL            reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    STRING          reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    CURLYB_CLOSE    reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    $end            reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    EIF             reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    ELSE            reduce using rule 8 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)


state 77

    (34) Assignment -> ID ASSIGN . Push_Assign Exp SEMICOLON
    (35) Push_Assign -> .

    NOT             reduce using rule 35 (Push_Assign -> .)
    PAR_OPEN        reduce using rule 35 (Push_Assign -> .)
    INT_CONST       reduce using rule 35 (Push_Assign -> .)
    MINUS_SIGN      reduce using rule 35 (Push_Assign -> .)
    FLOAT_CONST     reduce using rule 35 (Push_Assign -> .)
    BOOL_CONST      reduce using rule 35 (Push_Assign -> .)
    STRING_CONST    reduce using rule 35 (Push_Assign -> .)
    ID              reduce using rule 35 (Push_Assign -> .)

    Push_Assign                    shift and go to state 106

state 78

    (17) If_Eif_Else -> IF PAR_OPEN . Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else
    (36) Exp -> . Logical_Or
    (37) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (38) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (42) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (47) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (52) Logical_Not -> . Relational
    (53) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 40
    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Factor                         shift and go to state 32
    Relational                     shift and go to state 26
    Logical_Not                    shift and go to state 28
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Logical_Or                     shift and go to state 34
    Logical_And                    shift and go to state 35
    Exp                            shift and go to state 107
    Expression                     shift and go to state 37

state 79

    (82) Factor -> PAR_OPEN Push_False_Bottom Exp . PAR_CLOSE Pop_False_Bottom

    PAR_CLOSE       shift and go to state 108


state 80

    (48) Multiple_Nots -> AND . Push_And Logical_Not And_Quad Multiple_Nots
    (51) Push_And -> .

    NOT             reduce using rule 51 (Push_And -> .)
    PAR_OPEN        reduce using rule 51 (Push_And -> .)
    INT_CONST       reduce using rule 51 (Push_And -> .)
    MINUS_SIGN      reduce using rule 51 (Push_And -> .)
    FLOAT_CONST     reduce using rule 51 (Push_And -> .)
    BOOL_CONST      reduce using rule 51 (Push_And -> .)
    STRING_CONST    reduce using rule 51 (Push_And -> .)
    ID              reduce using rule 51 (Push_And -> .)

    Push_And                       shift and go to state 109

state 81

    (49) Multiple_Nots -> Epsilon .

    OR              reduce using rule 49 (Multiple_Nots -> Epsilon .)
    EQUAL           reduce using rule 49 (Multiple_Nots -> Epsilon .)
    DIFF            reduce using rule 49 (Multiple_Nots -> Epsilon .)
    SEMICOLON       reduce using rule 49 (Multiple_Nots -> Epsilon .)
    PAR_CLOSE       reduce using rule 49 (Multiple_Nots -> Epsilon .)


state 82

    (47) Logical_And -> Logical_Not And_Quad Multiple_Nots .

    OR              reduce using rule 47 (Logical_And -> Logical_Not And_Quad Multiple_Nots .)
    EQUAL           reduce using rule 47 (Logical_And -> Logical_Not And_Quad Multiple_Nots .)
    DIFF            reduce using rule 47 (Logical_And -> Logical_Not And_Quad Multiple_Nots .)
    SEMICOLON       reduce using rule 47 (Logical_And -> Logical_Not And_Quad Multiple_Nots .)
    PAR_CLOSE       reduce using rule 47 (Logical_And -> Logical_Not And_Quad Multiple_Nots .)


state 83

    (66) Expression -> Term Sum_Sub_Quad Multiple_Terms .

    LESS            reduce using rule 66 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    LESS_EQUAL      reduce using rule 66 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    GREATER         reduce using rule 66 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    GREATER_EQUAL   reduce using rule 66 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    AND             reduce using rule 66 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    OR              reduce using rule 66 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    EQUAL           reduce using rule 66 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    DIFF            reduce using rule 66 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    PAR_CLOSE       reduce using rule 66 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    SEMICOLON       reduce using rule 66 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)


state 84

    (69) Multiple_Terms -> Epsilon .

    LESS            reduce using rule 69 (Multiple_Terms -> Epsilon .)
    LESS_EQUAL      reduce using rule 69 (Multiple_Terms -> Epsilon .)
    GREATER         reduce using rule 69 (Multiple_Terms -> Epsilon .)
    GREATER_EQUAL   reduce using rule 69 (Multiple_Terms -> Epsilon .)
    AND             reduce using rule 69 (Multiple_Terms -> Epsilon .)
    OR              reduce using rule 69 (Multiple_Terms -> Epsilon .)
    EQUAL           reduce using rule 69 (Multiple_Terms -> Epsilon .)
    DIFF            reduce using rule 69 (Multiple_Terms -> Epsilon .)
    SEMICOLON       reduce using rule 69 (Multiple_Terms -> Epsilon .)
    PAR_CLOSE       reduce using rule 69 (Multiple_Terms -> Epsilon .)


state 85

    (68) Multiple_Terms -> MINUS_SIGN . Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms
    (72) Push_Minus_Sign -> .

    PAR_OPEN        reduce using rule 72 (Push_Minus_Sign -> .)
    INT_CONST       reduce using rule 72 (Push_Minus_Sign -> .)
    MINUS_SIGN      reduce using rule 72 (Push_Minus_Sign -> .)
    FLOAT_CONST     reduce using rule 72 (Push_Minus_Sign -> .)
    BOOL_CONST      reduce using rule 72 (Push_Minus_Sign -> .)
    STRING_CONST    reduce using rule 72 (Push_Minus_Sign -> .)
    ID              reduce using rule 72 (Push_Minus_Sign -> .)

    Push_Minus_Sign                shift and go to state 110

state 86

    (67) Multiple_Terms -> PLUS_SIGN . Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms
    (71) Push_Plus_Sign -> .

    PAR_OPEN        reduce using rule 71 (Push_Plus_Sign -> .)
    INT_CONST       reduce using rule 71 (Push_Plus_Sign -> .)
    MINUS_SIGN      reduce using rule 71 (Push_Plus_Sign -> .)
    FLOAT_CONST     reduce using rule 71 (Push_Plus_Sign -> .)
    BOOL_CONST      reduce using rule 71 (Push_Plus_Sign -> .)
    STRING_CONST    reduce using rule 71 (Push_Plus_Sign -> .)
    ID              reduce using rule 71 (Push_Plus_Sign -> .)

    Push_Plus_Sign                 shift and go to state 111

state 87

    (74) Multiple_Factors -> TIMES_SIGN . Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (79) Push_Times_Sign -> .

    PAR_OPEN        reduce using rule 79 (Push_Times_Sign -> .)
    INT_CONST       reduce using rule 79 (Push_Times_Sign -> .)
    MINUS_SIGN      reduce using rule 79 (Push_Times_Sign -> .)
    FLOAT_CONST     reduce using rule 79 (Push_Times_Sign -> .)
    BOOL_CONST      reduce using rule 79 (Push_Times_Sign -> .)
    STRING_CONST    reduce using rule 79 (Push_Times_Sign -> .)
    ID              reduce using rule 79 (Push_Times_Sign -> .)

    Push_Times_Sign                shift and go to state 112

state 88

    (76) Multiple_Factors -> MOD_SIGN . Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (81) Push_Mod_Sign -> .

    PAR_OPEN        reduce using rule 81 (Push_Mod_Sign -> .)
    INT_CONST       reduce using rule 81 (Push_Mod_Sign -> .)
    MINUS_SIGN      reduce using rule 81 (Push_Mod_Sign -> .)
    FLOAT_CONST     reduce using rule 81 (Push_Mod_Sign -> .)
    BOOL_CONST      reduce using rule 81 (Push_Mod_Sign -> .)
    STRING_CONST    reduce using rule 81 (Push_Mod_Sign -> .)
    ID              reduce using rule 81 (Push_Mod_Sign -> .)

    Push_Mod_Sign                  shift and go to state 113

state 89

    (77) Multiple_Factors -> Epsilon .

    PLUS_SIGN       reduce using rule 77 (Multiple_Factors -> Epsilon .)
    MINUS_SIGN      reduce using rule 77 (Multiple_Factors -> Epsilon .)
    LESS            reduce using rule 77 (Multiple_Factors -> Epsilon .)
    LESS_EQUAL      reduce using rule 77 (Multiple_Factors -> Epsilon .)
    GREATER         reduce using rule 77 (Multiple_Factors -> Epsilon .)
    GREATER_EQUAL   reduce using rule 77 (Multiple_Factors -> Epsilon .)
    AND             reduce using rule 77 (Multiple_Factors -> Epsilon .)
    OR              reduce using rule 77 (Multiple_Factors -> Epsilon .)
    EQUAL           reduce using rule 77 (Multiple_Factors -> Epsilon .)
    DIFF            reduce using rule 77 (Multiple_Factors -> Epsilon .)
    SEMICOLON       reduce using rule 77 (Multiple_Factors -> Epsilon .)
    PAR_CLOSE       reduce using rule 77 (Multiple_Factors -> Epsilon .)


state 90

    (73) Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .

    PLUS_SIGN       reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    MINUS_SIGN      reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS            reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS_EQUAL      reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER         reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER_EQUAL   reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    AND             reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    OR              reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    SEMICOLON       reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    PAR_CLOSE       reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    EQUAL           reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    DIFF            reduce using rule 73 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)


state 91

    (75) Multiple_Factors -> DIVIDE_SIGN . Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (80) Push_Divide_Sign -> .

    PAR_OPEN        reduce using rule 80 (Push_Divide_Sign -> .)
    INT_CONST       reduce using rule 80 (Push_Divide_Sign -> .)
    MINUS_SIGN      reduce using rule 80 (Push_Divide_Sign -> .)
    FLOAT_CONST     reduce using rule 80 (Push_Divide_Sign -> .)
    BOOL_CONST      reduce using rule 80 (Push_Divide_Sign -> .)
    STRING_CONST    reduce using rule 80 (Push_Divide_Sign -> .)
    ID              reduce using rule 80 (Push_Divide_Sign -> .)

    Push_Divide_Sign               shift and go to state 114

state 92

    (37) Exp -> Logical_Or EQUAL Push_Equal . Logical_Or Equity_Quad
    (42) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (47) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (52) Logical_Not -> . Relational
    (53) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 40
    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Factor                         shift and go to state 32
    Relational                     shift and go to state 26
    Logical_Not                    shift and go to state 28
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Logical_Or                     shift and go to state 115
    Logical_And                    shift and go to state 35
    Expression                     shift and go to state 37

state 93

    (38) Exp -> Logical_Or DIFF Push_Diff . Logical_Or Equity_Quad
    (42) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (47) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (52) Logical_Not -> . Relational
    (53) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 40
    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Factor                         shift and go to state 32
    Relational                     shift and go to state 26
    Logical_Not                    shift and go to state 28
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Logical_Or                     shift and go to state 116
    Logical_And                    shift and go to state 35
    Expression                     shift and go to state 37

state 94

    (42) Logical_Or -> Logical_And Or_Quad Multiple_Ands .

    EQUAL           reduce using rule 42 (Logical_Or -> Logical_And Or_Quad Multiple_Ands .)
    DIFF            reduce using rule 42 (Logical_Or -> Logical_And Or_Quad Multiple_Ands .)
    PAR_CLOSE       reduce using rule 42 (Logical_Or -> Logical_And Or_Quad Multiple_Ands .)
    SEMICOLON       reduce using rule 42 (Logical_Or -> Logical_And Or_Quad Multiple_Ands .)


state 95

    (44) Multiple_Ands -> Epsilon .

    EQUAL           reduce using rule 44 (Multiple_Ands -> Epsilon .)
    DIFF            reduce using rule 44 (Multiple_Ands -> Epsilon .)
    SEMICOLON       reduce using rule 44 (Multiple_Ands -> Epsilon .)
    PAR_CLOSE       reduce using rule 44 (Multiple_Ands -> Epsilon .)


state 96

    (43) Multiple_Ands -> OR . Push_Or Logical_And Or_Quad Multiple_Ands
    (46) Push_Or -> .

    NOT             reduce using rule 46 (Push_Or -> .)
    PAR_OPEN        reduce using rule 46 (Push_Or -> .)
    INT_CONST       reduce using rule 46 (Push_Or -> .)
    MINUS_SIGN      reduce using rule 46 (Push_Or -> .)
    FLOAT_CONST     reduce using rule 46 (Push_Or -> .)
    BOOL_CONST      reduce using rule 46 (Push_Or -> .)
    STRING_CONST    reduce using rule 46 (Push_Or -> .)
    ID              reduce using rule 46 (Push_Or -> .)

    Push_Or                        shift and go to state 117

state 97

    (57) Relational -> Expression LESS Push_Less . Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Factor                         shift and go to state 32
    Expression                     shift and go to state 118

state 98

    (58) Relational -> Expression LESS_EQUAL Push_Less_Equal . Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Factor                         shift and go to state 32
    Expression                     shift and go to state 119

state 99

    (60) Relational -> Expression GREATER_EQUAL Push_Greater_Equal . Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Factor                         shift and go to state 32
    Expression                     shift and go to state 120

state 100

    (59) Relational -> Expression GREATER Push_Greater . Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Factor                         shift and go to state 32
    Expression                     shift and go to state 121

state 101

    (87) Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .

    TIMES_SIGN      reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    DIVIDE_SIGN     reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    MOD_SIGN        reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    PLUS_SIGN       reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    MINUS_SIGN      reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    LESS            reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    LESS_EQUAL      reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    GREATER         reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    GREATER_EQUAL   reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    AND             reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    OR              reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    EQUAL           reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    DIFF            reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    SEMICOLON       reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    PAR_CLOSE       reduce using rule 87 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)


state 102

    (89) Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .

    TIMES_SIGN      reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    DIVIDE_SIGN     reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    MOD_SIGN        reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    PLUS_SIGN       reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    MINUS_SIGN      reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    LESS            reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    LESS_EQUAL      reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    GREATER         reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    GREATER_EQUAL   reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    AND             reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    OR              reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    EQUAL           reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    DIFF            reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    SEMICOLON       reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    PAR_CLOSE       reduce using rule 89 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)


state 103

    (53) Logical_Not -> NOT Push_Not Relational . Not_Quad
    (54) Not_Quad -> .

    AND             reduce using rule 54 (Not_Quad -> .)
    OR              reduce using rule 54 (Not_Quad -> .)
    EQUAL           reduce using rule 54 (Not_Quad -> .)
    DIFF            reduce using rule 54 (Not_Quad -> .)
    SEMICOLON       reduce using rule 54 (Not_Quad -> .)
    PAR_CLOSE       reduce using rule 54 (Not_Quad -> .)

    Not_Quad                       shift and go to state 122

state 104

    (24) While_Loop -> WHILE Push_While_Jump PAR_OPEN . Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads
    (36) Exp -> . Logical_Or
    (37) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (38) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (42) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (47) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (52) Logical_Not -> . Relational
    (53) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 40
    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Exp                            shift and go to state 123
    Factor                         shift and go to state 32
    Relational                     shift and go to state 26
    Logical_Not                    shift and go to state 28
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Logical_Or                     shift and go to state 34
    Logical_And                    shift and go to state 35
    Expression                     shift and go to state 37

state 105

    (16) Print -> PRINT PAR_OPEN Exp . PAR_CLOSE SEMICOLON

    PAR_CLOSE       shift and go to state 124


state 106

    (34) Assignment -> ID ASSIGN Push_Assign . Exp SEMICOLON
    (36) Exp -> . Logical_Or
    (37) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (38) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (42) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (47) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (52) Logical_Not -> . Relational
    (53) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 40
    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Factor                         shift and go to state 32
    Relational                     shift and go to state 26
    Logical_Not                    shift and go to state 28
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Logical_Or                     shift and go to state 34
    Logical_And                    shift and go to state 35
    Exp                            shift and go to state 125
    Expression                     shift and go to state 37

state 107

    (17) If_Eif_Else -> IF PAR_OPEN Exp . PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else

    PAR_CLOSE       shift and go to state 126


state 108

    (82) Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE . Pop_False_Bottom
    (85) Pop_False_Bottom -> .

    TIMES_SIGN      reduce using rule 85 (Pop_False_Bottom -> .)
    DIVIDE_SIGN     reduce using rule 85 (Pop_False_Bottom -> .)
    MOD_SIGN        reduce using rule 85 (Pop_False_Bottom -> .)
    PLUS_SIGN       reduce using rule 85 (Pop_False_Bottom -> .)
    MINUS_SIGN      reduce using rule 85 (Pop_False_Bottom -> .)
    LESS            reduce using rule 85 (Pop_False_Bottom -> .)
    LESS_EQUAL      reduce using rule 85 (Pop_False_Bottom -> .)
    GREATER         reduce using rule 85 (Pop_False_Bottom -> .)
    GREATER_EQUAL   reduce using rule 85 (Pop_False_Bottom -> .)
    AND             reduce using rule 85 (Pop_False_Bottom -> .)
    OR              reduce using rule 85 (Pop_False_Bottom -> .)
    EQUAL           reduce using rule 85 (Pop_False_Bottom -> .)
    DIFF            reduce using rule 85 (Pop_False_Bottom -> .)
    SEMICOLON       reduce using rule 85 (Pop_False_Bottom -> .)
    PAR_CLOSE       reduce using rule 85 (Pop_False_Bottom -> .)

    Pop_False_Bottom               shift and go to state 127

state 109

    (48) Multiple_Nots -> AND Push_And . Logical_Not And_Quad Multiple_Nots
    (52) Logical_Not -> . Relational
    (53) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 40
    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Factor                         shift and go to state 32
    Relational                     shift and go to state 26
    Logical_Not                    shift and go to state 128
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Expression                     shift and go to state 37

state 110

    (68) Multiple_Terms -> MINUS_SIGN Push_Minus_Sign . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Term                           shift and go to state 129
    Var_Cte                        shift and go to state 33
    Factor                         shift and go to state 32

state 111

    (67) Multiple_Terms -> PLUS_SIGN Push_Plus_Sign . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Term                           shift and go to state 130
    Var_Cte                        shift and go to state 33
    Factor                         shift and go to state 32

state 112

    (74) Multiple_Factors -> TIMES_SIGN Push_Times_Sign . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Var_Cte                        shift and go to state 33
    Factor                         shift and go to state 131

state 113

    (76) Multiple_Factors -> MOD_SIGN Push_Mod_Sign . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Var_Cte                        shift and go to state 33
    Factor                         shift and go to state 132

state 114

    (75) Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Var_Cte                        shift and go to state 33
    Factor                         shift and go to state 133

state 115

    (37) Exp -> Logical_Or EQUAL Push_Equal Logical_Or . Equity_Quad
    (39) Equity_Quad -> .

    SEMICOLON       reduce using rule 39 (Equity_Quad -> .)
    PAR_CLOSE       reduce using rule 39 (Equity_Quad -> .)

    Equity_Quad                    shift and go to state 134

state 116

    (38) Exp -> Logical_Or DIFF Push_Diff Logical_Or . Equity_Quad
    (39) Equity_Quad -> .

    SEMICOLON       reduce using rule 39 (Equity_Quad -> .)
    PAR_CLOSE       reduce using rule 39 (Equity_Quad -> .)

    Equity_Quad                    shift and go to state 135

state 117

    (43) Multiple_Ands -> OR Push_Or . Logical_And Or_Quad Multiple_Ands
    (47) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (52) Logical_Not -> . Relational
    (53) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 40
    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Factor                         shift and go to state 32
    Relational                     shift and go to state 26
    Logical_Not                    shift and go to state 28
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Logical_And                    shift and go to state 136
    Expression                     shift and go to state 37

state 118

    (57) Relational -> Expression LESS Push_Less Expression . Relational_Quad
    (61) Relational_Quad -> .

    AND             reduce using rule 61 (Relational_Quad -> .)
    OR              reduce using rule 61 (Relational_Quad -> .)
    EQUAL           reduce using rule 61 (Relational_Quad -> .)
    DIFF            reduce using rule 61 (Relational_Quad -> .)
    SEMICOLON       reduce using rule 61 (Relational_Quad -> .)
    PAR_CLOSE       reduce using rule 61 (Relational_Quad -> .)

    Relational_Quad                shift and go to state 137

state 119

    (58) Relational -> Expression LESS_EQUAL Push_Less_Equal Expression . Relational_Quad
    (61) Relational_Quad -> .

    AND             reduce using rule 61 (Relational_Quad -> .)
    OR              reduce using rule 61 (Relational_Quad -> .)
    EQUAL           reduce using rule 61 (Relational_Quad -> .)
    DIFF            reduce using rule 61 (Relational_Quad -> .)
    SEMICOLON       reduce using rule 61 (Relational_Quad -> .)
    PAR_CLOSE       reduce using rule 61 (Relational_Quad -> .)

    Relational_Quad                shift and go to state 138

state 120

    (60) Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression . Relational_Quad
    (61) Relational_Quad -> .

    AND             reduce using rule 61 (Relational_Quad -> .)
    OR              reduce using rule 61 (Relational_Quad -> .)
    EQUAL           reduce using rule 61 (Relational_Quad -> .)
    DIFF            reduce using rule 61 (Relational_Quad -> .)
    SEMICOLON       reduce using rule 61 (Relational_Quad -> .)
    PAR_CLOSE       reduce using rule 61 (Relational_Quad -> .)

    Relational_Quad                shift and go to state 139

state 121

    (59) Relational -> Expression GREATER Push_Greater Expression . Relational_Quad
    (61) Relational_Quad -> .

    AND             reduce using rule 61 (Relational_Quad -> .)
    OR              reduce using rule 61 (Relational_Quad -> .)
    EQUAL           reduce using rule 61 (Relational_Quad -> .)
    DIFF            reduce using rule 61 (Relational_Quad -> .)
    SEMICOLON       reduce using rule 61 (Relational_Quad -> .)
    PAR_CLOSE       reduce using rule 61 (Relational_Quad -> .)

    Relational_Quad                shift and go to state 140

state 122

    (53) Logical_Not -> NOT Push_Not Relational Not_Quad .

    AND             reduce using rule 53 (Logical_Not -> NOT Push_Not Relational Not_Quad .)
    OR              reduce using rule 53 (Logical_Not -> NOT Push_Not Relational Not_Quad .)
    EQUAL           reduce using rule 53 (Logical_Not -> NOT Push_Not Relational Not_Quad .)
    DIFF            reduce using rule 53 (Logical_Not -> NOT Push_Not Relational Not_Quad .)
    SEMICOLON       reduce using rule 53 (Logical_Not -> NOT Push_Not Relational Not_Quad .)
    PAR_CLOSE       reduce using rule 53 (Logical_Not -> NOT Push_Not Relational Not_Quad .)


state 123

    (24) While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp . PAR_CLOSE While_Quad Statements_Block Fill_While_Quads

    PAR_CLOSE       shift and go to state 141


state 124

    (16) Print -> PRINT PAR_OPEN Exp PAR_CLOSE . SEMICOLON

    SEMICOLON       shift and go to state 142


state 125

    (34) Assignment -> ID ASSIGN Push_Assign Exp . SEMICOLON

    SEMICOLON       shift and go to state 143


state 126

    (17) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE . If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else
    (22) If_GoToF_Quad -> .

    CURLYB_OPEN     reduce using rule 22 (If_GoToF_Quad -> .)

    If_GoToF_Quad                  shift and go to state 144

state 127

    (82) Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .

    TIMES_SIGN      reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    DIVIDE_SIGN     reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    MOD_SIGN        reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    PLUS_SIGN       reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    MINUS_SIGN      reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    LESS            reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    LESS_EQUAL      reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    GREATER         reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    GREATER_EQUAL   reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    AND             reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    OR              reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    EQUAL           reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    DIFF            reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    SEMICOLON       reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    PAR_CLOSE       reduce using rule 82 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)


state 128

    (48) Multiple_Nots -> AND Push_And Logical_Not . And_Quad Multiple_Nots
    (50) And_Quad -> .

    AND             reduce using rule 50 (And_Quad -> .)
    OR              reduce using rule 50 (And_Quad -> .)
    EQUAL           reduce using rule 50 (And_Quad -> .)
    DIFF            reduce using rule 50 (And_Quad -> .)
    SEMICOLON       reduce using rule 50 (And_Quad -> .)
    PAR_CLOSE       reduce using rule 50 (And_Quad -> .)

    And_Quad                       shift and go to state 145

state 129

    (68) Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term . Sum_Sub_Quad Multiple_Terms
    (70) Sum_Sub_Quad -> .

    PLUS_SIGN       reduce using rule 70 (Sum_Sub_Quad -> .)
    MINUS_SIGN      reduce using rule 70 (Sum_Sub_Quad -> .)
    LESS            reduce using rule 70 (Sum_Sub_Quad -> .)
    LESS_EQUAL      reduce using rule 70 (Sum_Sub_Quad -> .)
    GREATER         reduce using rule 70 (Sum_Sub_Quad -> .)
    GREATER_EQUAL   reduce using rule 70 (Sum_Sub_Quad -> .)
    AND             reduce using rule 70 (Sum_Sub_Quad -> .)
    OR              reduce using rule 70 (Sum_Sub_Quad -> .)
    EQUAL           reduce using rule 70 (Sum_Sub_Quad -> .)
    DIFF            reduce using rule 70 (Sum_Sub_Quad -> .)
    SEMICOLON       reduce using rule 70 (Sum_Sub_Quad -> .)
    PAR_CLOSE       reduce using rule 70 (Sum_Sub_Quad -> .)

    Sum_Sub_Quad                   shift and go to state 146

state 130

    (67) Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term . Sum_Sub_Quad Multiple_Terms
    (70) Sum_Sub_Quad -> .

    PLUS_SIGN       reduce using rule 70 (Sum_Sub_Quad -> .)
    MINUS_SIGN      reduce using rule 70 (Sum_Sub_Quad -> .)
    LESS            reduce using rule 70 (Sum_Sub_Quad -> .)
    LESS_EQUAL      reduce using rule 70 (Sum_Sub_Quad -> .)
    GREATER         reduce using rule 70 (Sum_Sub_Quad -> .)
    GREATER_EQUAL   reduce using rule 70 (Sum_Sub_Quad -> .)
    AND             reduce using rule 70 (Sum_Sub_Quad -> .)
    OR              reduce using rule 70 (Sum_Sub_Quad -> .)
    EQUAL           reduce using rule 70 (Sum_Sub_Quad -> .)
    DIFF            reduce using rule 70 (Sum_Sub_Quad -> .)
    SEMICOLON       reduce using rule 70 (Sum_Sub_Quad -> .)
    PAR_CLOSE       reduce using rule 70 (Sum_Sub_Quad -> .)

    Sum_Sub_Quad                   shift and go to state 147

state 131

    (74) Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor . Mult_Div_Mod_Quad Multiple_Factors
    (78) Mult_Div_Mod_Quad -> .

    TIMES_SIGN      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    DIVIDE_SIGN     reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    MOD_SIGN        reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    PLUS_SIGN       reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    MINUS_SIGN      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    LESS            reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    LESS_EQUAL      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    GREATER         reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    GREATER_EQUAL   reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    AND             reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    OR              reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    EQUAL           reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    DIFF            reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    SEMICOLON       reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    PAR_CLOSE       reduce using rule 78 (Mult_Div_Mod_Quad -> .)

    Mult_Div_Mod_Quad              shift and go to state 148

state 132

    (76) Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor . Mult_Div_Mod_Quad Multiple_Factors
    (78) Mult_Div_Mod_Quad -> .

    TIMES_SIGN      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    DIVIDE_SIGN     reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    MOD_SIGN        reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    PLUS_SIGN       reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    MINUS_SIGN      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    LESS            reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    LESS_EQUAL      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    GREATER         reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    GREATER_EQUAL   reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    AND             reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    OR              reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    EQUAL           reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    DIFF            reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    SEMICOLON       reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    PAR_CLOSE       reduce using rule 78 (Mult_Div_Mod_Quad -> .)

    Mult_Div_Mod_Quad              shift and go to state 149

state 133

    (75) Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor . Mult_Div_Mod_Quad Multiple_Factors
    (78) Mult_Div_Mod_Quad -> .

    TIMES_SIGN      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    DIVIDE_SIGN     reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    MOD_SIGN        reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    PLUS_SIGN       reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    MINUS_SIGN      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    LESS            reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    LESS_EQUAL      reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    GREATER         reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    GREATER_EQUAL   reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    AND             reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    OR              reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    EQUAL           reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    DIFF            reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    SEMICOLON       reduce using rule 78 (Mult_Div_Mod_Quad -> .)
    PAR_CLOSE       reduce using rule 78 (Mult_Div_Mod_Quad -> .)

    Mult_Div_Mod_Quad              shift and go to state 150

state 134

    (37) Exp -> Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad .

    PAR_CLOSE       reduce using rule 37 (Exp -> Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad .)
    SEMICOLON       reduce using rule 37 (Exp -> Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad .)


state 135

    (38) Exp -> Logical_Or DIFF Push_Diff Logical_Or Equity_Quad .

    PAR_CLOSE       reduce using rule 38 (Exp -> Logical_Or DIFF Push_Diff Logical_Or Equity_Quad .)
    SEMICOLON       reduce using rule 38 (Exp -> Logical_Or DIFF Push_Diff Logical_Or Equity_Quad .)


state 136

    (43) Multiple_Ands -> OR Push_Or Logical_And . Or_Quad Multiple_Ands
    (45) Or_Quad -> .

    OR              reduce using rule 45 (Or_Quad -> .)
    EQUAL           reduce using rule 45 (Or_Quad -> .)
    DIFF            reduce using rule 45 (Or_Quad -> .)
    SEMICOLON       reduce using rule 45 (Or_Quad -> .)
    PAR_CLOSE       reduce using rule 45 (Or_Quad -> .)

    Or_Quad                        shift and go to state 151

state 137

    (57) Relational -> Expression LESS Push_Less Expression Relational_Quad .

    AND             reduce using rule 57 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)
    OR              reduce using rule 57 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)
    EQUAL           reduce using rule 57 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)
    DIFF            reduce using rule 57 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)
    PAR_CLOSE       reduce using rule 57 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)
    SEMICOLON       reduce using rule 57 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)


state 138

    (58) Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .

    AND             reduce using rule 58 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)
    OR              reduce using rule 58 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)
    EQUAL           reduce using rule 58 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)
    DIFF            reduce using rule 58 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)
    PAR_CLOSE       reduce using rule 58 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)
    SEMICOLON       reduce using rule 58 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)


state 139

    (60) Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .

    AND             reduce using rule 60 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)
    OR              reduce using rule 60 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)
    EQUAL           reduce using rule 60 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)
    DIFF            reduce using rule 60 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)
    PAR_CLOSE       reduce using rule 60 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)
    SEMICOLON       reduce using rule 60 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)


state 140

    (59) Relational -> Expression GREATER Push_Greater Expression Relational_Quad .

    AND             reduce using rule 59 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)
    OR              reduce using rule 59 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)
    EQUAL           reduce using rule 59 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)
    DIFF            reduce using rule 59 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)
    PAR_CLOSE       reduce using rule 59 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)
    SEMICOLON       reduce using rule 59 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)


state 141

    (24) While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE . While_Quad Statements_Block Fill_While_Quads
    (26) While_Quad -> .

    CURLYB_OPEN     reduce using rule 26 (While_Quad -> .)

    While_Quad                     shift and go to state 152

state 142

    (16) Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .

    PRINT           reduce using rule 16 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    ID              reduce using rule 16 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    WHILE           reduce using rule 16 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    IF              reduce using rule 16 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    INT             reduce using rule 16 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    FLOAT           reduce using rule 16 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    BOOL            reduce using rule 16 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    STRING          reduce using rule 16 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    CURLYB_CLOSE    reduce using rule 16 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)


state 143

    (34) Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .

    PRINT           reduce using rule 34 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    ID              reduce using rule 34 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    WHILE           reduce using rule 34 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    IF              reduce using rule 34 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    INT             reduce using rule 34 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    FLOAT           reduce using rule 34 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    BOOL            reduce using rule 34 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    STRING          reduce using rule 34 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    CURLYB_CLOSE    reduce using rule 34 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)


state 144

    (17) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad . Statements_Block GoTo_Fill Eif_Recursion Optional_Else
    (8) Statements_Block -> . CURLYB_OPEN Multiple_Statements CURLYB_CLOSE

    CURLYB_OPEN     shift and go to state 23

    Statements_Block               shift and go to state 153

state 145

    (48) Multiple_Nots -> AND Push_And Logical_Not And_Quad . Multiple_Nots
    (48) Multiple_Nots -> . AND Push_And Logical_Not And_Quad Multiple_Nots
    (49) Multiple_Nots -> . Epsilon
    (100) Epsilon -> .

    AND             shift and go to state 80
    OR              reduce using rule 100 (Epsilon -> .)
    EQUAL           reduce using rule 100 (Epsilon -> .)
    DIFF            reduce using rule 100 (Epsilon -> .)
    SEMICOLON       reduce using rule 100 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 100 (Epsilon -> .)

    Multiple_Nots                  shift and go to state 154
    Epsilon                        shift and go to state 81

state 146

    (68) Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad . Multiple_Terms
    (67) Multiple_Terms -> . PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms
    (68) Multiple_Terms -> . MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms
    (69) Multiple_Terms -> . Epsilon
    (100) Epsilon -> .

    PLUS_SIGN       shift and go to state 86
    MINUS_SIGN      shift and go to state 85
    LESS            reduce using rule 100 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 100 (Epsilon -> .)
    GREATER         reduce using rule 100 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 100 (Epsilon -> .)
    AND             reduce using rule 100 (Epsilon -> .)
    OR              reduce using rule 100 (Epsilon -> .)
    EQUAL           reduce using rule 100 (Epsilon -> .)
    DIFF            reduce using rule 100 (Epsilon -> .)
    SEMICOLON       reduce using rule 100 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 100 (Epsilon -> .)

    Multiple_Terms                 shift and go to state 155
    Epsilon                        shift and go to state 84

state 147

    (67) Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad . Multiple_Terms
    (67) Multiple_Terms -> . PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms
    (68) Multiple_Terms -> . MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms
    (69) Multiple_Terms -> . Epsilon
    (100) Epsilon -> .

    PLUS_SIGN       shift and go to state 86
    MINUS_SIGN      shift and go to state 85
    LESS            reduce using rule 100 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 100 (Epsilon -> .)
    GREATER         reduce using rule 100 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 100 (Epsilon -> .)
    AND             reduce using rule 100 (Epsilon -> .)
    OR              reduce using rule 100 (Epsilon -> .)
    EQUAL           reduce using rule 100 (Epsilon -> .)
    DIFF            reduce using rule 100 (Epsilon -> .)
    SEMICOLON       reduce using rule 100 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 100 (Epsilon -> .)

    Multiple_Terms                 shift and go to state 156
    Epsilon                        shift and go to state 84

state 148

    (74) Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad . Multiple_Factors
    (74) Multiple_Factors -> . TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (75) Multiple_Factors -> . DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (76) Multiple_Factors -> . MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (77) Multiple_Factors -> . Epsilon
    (100) Epsilon -> .

    TIMES_SIGN      shift and go to state 87
    DIVIDE_SIGN     shift and go to state 91
    MOD_SIGN        shift and go to state 88
    PLUS_SIGN       reduce using rule 100 (Epsilon -> .)
    MINUS_SIGN      reduce using rule 100 (Epsilon -> .)
    LESS            reduce using rule 100 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 100 (Epsilon -> .)
    GREATER         reduce using rule 100 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 100 (Epsilon -> .)
    AND             reduce using rule 100 (Epsilon -> .)
    OR              reduce using rule 100 (Epsilon -> .)
    EQUAL           reduce using rule 100 (Epsilon -> .)
    DIFF            reduce using rule 100 (Epsilon -> .)
    SEMICOLON       reduce using rule 100 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 100 (Epsilon -> .)

    Epsilon                        shift and go to state 89
    Multiple_Factors               shift and go to state 157

state 149

    (76) Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad . Multiple_Factors
    (74) Multiple_Factors -> . TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (75) Multiple_Factors -> . DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (76) Multiple_Factors -> . MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (77) Multiple_Factors -> . Epsilon
    (100) Epsilon -> .

    TIMES_SIGN      shift and go to state 87
    DIVIDE_SIGN     shift and go to state 91
    MOD_SIGN        shift and go to state 88
    PLUS_SIGN       reduce using rule 100 (Epsilon -> .)
    MINUS_SIGN      reduce using rule 100 (Epsilon -> .)
    LESS            reduce using rule 100 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 100 (Epsilon -> .)
    GREATER         reduce using rule 100 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 100 (Epsilon -> .)
    AND             reduce using rule 100 (Epsilon -> .)
    OR              reduce using rule 100 (Epsilon -> .)
    EQUAL           reduce using rule 100 (Epsilon -> .)
    DIFF            reduce using rule 100 (Epsilon -> .)
    SEMICOLON       reduce using rule 100 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 100 (Epsilon -> .)

    Epsilon                        shift and go to state 89
    Multiple_Factors               shift and go to state 158

state 150

    (75) Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad . Multiple_Factors
    (74) Multiple_Factors -> . TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (75) Multiple_Factors -> . DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (76) Multiple_Factors -> . MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (77) Multiple_Factors -> . Epsilon
    (100) Epsilon -> .

    TIMES_SIGN      shift and go to state 87
    DIVIDE_SIGN     shift and go to state 91
    MOD_SIGN        shift and go to state 88
    PLUS_SIGN       reduce using rule 100 (Epsilon -> .)
    MINUS_SIGN      reduce using rule 100 (Epsilon -> .)
    LESS            reduce using rule 100 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 100 (Epsilon -> .)
    GREATER         reduce using rule 100 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 100 (Epsilon -> .)
    AND             reduce using rule 100 (Epsilon -> .)
    OR              reduce using rule 100 (Epsilon -> .)
    EQUAL           reduce using rule 100 (Epsilon -> .)
    DIFF            reduce using rule 100 (Epsilon -> .)
    SEMICOLON       reduce using rule 100 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 100 (Epsilon -> .)

    Epsilon                        shift and go to state 89
    Multiple_Factors               shift and go to state 159

state 151

    (43) Multiple_Ands -> OR Push_Or Logical_And Or_Quad . Multiple_Ands
    (43) Multiple_Ands -> . OR Push_Or Logical_And Or_Quad Multiple_Ands
    (44) Multiple_Ands -> . Epsilon
    (100) Epsilon -> .

    OR              shift and go to state 96
    EQUAL           reduce using rule 100 (Epsilon -> .)
    DIFF            reduce using rule 100 (Epsilon -> .)
    SEMICOLON       reduce using rule 100 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 100 (Epsilon -> .)

    Multiple_Ands                  shift and go to state 160
    Epsilon                        shift and go to state 95

state 152

    (24) While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad . Statements_Block Fill_While_Quads
    (8) Statements_Block -> . CURLYB_OPEN Multiple_Statements CURLYB_CLOSE

    CURLYB_OPEN     shift and go to state 23

    Statements_Block               shift and go to state 161

state 153

    (17) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block . GoTo_Fill Eif_Recursion Optional_Else
    (23) GoTo_Fill -> .

    EIF             reduce using rule 23 (GoTo_Fill -> .)
    ELSE            reduce using rule 23 (GoTo_Fill -> .)
    PRINT           reduce using rule 23 (GoTo_Fill -> .)
    ID              reduce using rule 23 (GoTo_Fill -> .)
    WHILE           reduce using rule 23 (GoTo_Fill -> .)
    IF              reduce using rule 23 (GoTo_Fill -> .)
    INT             reduce using rule 23 (GoTo_Fill -> .)
    FLOAT           reduce using rule 23 (GoTo_Fill -> .)
    BOOL            reduce using rule 23 (GoTo_Fill -> .)
    STRING          reduce using rule 23 (GoTo_Fill -> .)
    CURLYB_CLOSE    reduce using rule 23 (GoTo_Fill -> .)

    GoTo_Fill                      shift and go to state 162

state 154

    (48) Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .

    OR              reduce using rule 48 (Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .)
    EQUAL           reduce using rule 48 (Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .)
    DIFF            reduce using rule 48 (Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .)
    SEMICOLON       reduce using rule 48 (Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .)
    PAR_CLOSE       reduce using rule 48 (Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .)


state 155

    (68) Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .

    LESS            reduce using rule 68 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    LESS_EQUAL      reduce using rule 68 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    GREATER         reduce using rule 68 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    GREATER_EQUAL   reduce using rule 68 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    AND             reduce using rule 68 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    OR              reduce using rule 68 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    EQUAL           reduce using rule 68 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    DIFF            reduce using rule 68 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    SEMICOLON       reduce using rule 68 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    PAR_CLOSE       reduce using rule 68 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)


state 156

    (67) Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .

    LESS            reduce using rule 67 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    LESS_EQUAL      reduce using rule 67 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    GREATER         reduce using rule 67 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    GREATER_EQUAL   reduce using rule 67 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    AND             reduce using rule 67 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    OR              reduce using rule 67 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    EQUAL           reduce using rule 67 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    DIFF            reduce using rule 67 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    SEMICOLON       reduce using rule 67 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    PAR_CLOSE       reduce using rule 67 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)


state 157

    (74) Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .

    PLUS_SIGN       reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    MINUS_SIGN      reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS            reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS_EQUAL      reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER         reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER_EQUAL   reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    AND             reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    OR              reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    EQUAL           reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    DIFF            reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    SEMICOLON       reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    PAR_CLOSE       reduce using rule 74 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)


state 158

    (76) Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .

    PLUS_SIGN       reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    MINUS_SIGN      reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS            reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS_EQUAL      reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER         reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER_EQUAL   reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    AND             reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    OR              reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    EQUAL           reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    DIFF            reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    SEMICOLON       reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    PAR_CLOSE       reduce using rule 76 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)


state 159

    (75) Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .

    PLUS_SIGN       reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    MINUS_SIGN      reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS            reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS_EQUAL      reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER         reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER_EQUAL   reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    AND             reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    OR              reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    EQUAL           reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    DIFF            reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    SEMICOLON       reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    PAR_CLOSE       reduce using rule 75 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)


state 160

    (43) Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands .

    EQUAL           reduce using rule 43 (Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands .)
    DIFF            reduce using rule 43 (Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands .)
    SEMICOLON       reduce using rule 43 (Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands .)
    PAR_CLOSE       reduce using rule 43 (Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands .)


state 161

    (24) While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block . Fill_While_Quads
    (27) Fill_While_Quads -> .

    PRINT           reduce using rule 27 (Fill_While_Quads -> .)
    ID              reduce using rule 27 (Fill_While_Quads -> .)
    WHILE           reduce using rule 27 (Fill_While_Quads -> .)
    IF              reduce using rule 27 (Fill_While_Quads -> .)
    INT             reduce using rule 27 (Fill_While_Quads -> .)
    FLOAT           reduce using rule 27 (Fill_While_Quads -> .)
    BOOL            reduce using rule 27 (Fill_While_Quads -> .)
    STRING          reduce using rule 27 (Fill_While_Quads -> .)
    CURLYB_CLOSE    reduce using rule 27 (Fill_While_Quads -> .)

    Fill_While_Quads               shift and go to state 163

state 162

    (17) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill . Eif_Recursion Optional_Else
    (18) Eif_Recursion -> . EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion
    (19) Eif_Recursion -> . Epsilon
    (100) Epsilon -> .

    EIF             shift and go to state 166
    ELSE            reduce using rule 100 (Epsilon -> .)
    PRINT           reduce using rule 100 (Epsilon -> .)
    ID              reduce using rule 100 (Epsilon -> .)
    WHILE           reduce using rule 100 (Epsilon -> .)
    IF              reduce using rule 100 (Epsilon -> .)
    INT             reduce using rule 100 (Epsilon -> .)
    FLOAT           reduce using rule 100 (Epsilon -> .)
    BOOL            reduce using rule 100 (Epsilon -> .)
    STRING          reduce using rule 100 (Epsilon -> .)
    CURLYB_CLOSE    reduce using rule 100 (Epsilon -> .)

    Eif_Recursion                  shift and go to state 164
    Epsilon                        shift and go to state 165

state 163

    (24) While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .

    PRINT           reduce using rule 24 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    ID              reduce using rule 24 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    WHILE           reduce using rule 24 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    IF              reduce using rule 24 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    INT             reduce using rule 24 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    FLOAT           reduce using rule 24 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    BOOL            reduce using rule 24 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    STRING          reduce using rule 24 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    CURLYB_CLOSE    reduce using rule 24 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)


state 164

    (17) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion . Optional_Else
    (20) Optional_Else -> . ELSE Statements_Block
    (21) Optional_Else -> . Epsilon
    (100) Epsilon -> .

    ELSE            shift and go to state 168
    PRINT           reduce using rule 100 (Epsilon -> .)
    ID              reduce using rule 100 (Epsilon -> .)
    WHILE           reduce using rule 100 (Epsilon -> .)
    IF              reduce using rule 100 (Epsilon -> .)
    INT             reduce using rule 100 (Epsilon -> .)
    FLOAT           reduce using rule 100 (Epsilon -> .)
    BOOL            reduce using rule 100 (Epsilon -> .)
    STRING          reduce using rule 100 (Epsilon -> .)
    CURLYB_CLOSE    reduce using rule 100 (Epsilon -> .)

    Optional_Else                  shift and go to state 167
    Epsilon                        shift and go to state 169

state 165

    (19) Eif_Recursion -> Epsilon .

    ELSE            reduce using rule 19 (Eif_Recursion -> Epsilon .)
    PRINT           reduce using rule 19 (Eif_Recursion -> Epsilon .)
    ID              reduce using rule 19 (Eif_Recursion -> Epsilon .)
    WHILE           reduce using rule 19 (Eif_Recursion -> Epsilon .)
    IF              reduce using rule 19 (Eif_Recursion -> Epsilon .)
    INT             reduce using rule 19 (Eif_Recursion -> Epsilon .)
    FLOAT           reduce using rule 19 (Eif_Recursion -> Epsilon .)
    BOOL            reduce using rule 19 (Eif_Recursion -> Epsilon .)
    STRING          reduce using rule 19 (Eif_Recursion -> Epsilon .)
    CURLYB_CLOSE    reduce using rule 19 (Eif_Recursion -> Epsilon .)


state 166

    (18) Eif_Recursion -> EIF . PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion

    PAR_OPEN        shift and go to state 170


state 167

    (17) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .

    PRINT           reduce using rule 17 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    ID              reduce using rule 17 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    WHILE           reduce using rule 17 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    IF              reduce using rule 17 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    INT             reduce using rule 17 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    FLOAT           reduce using rule 17 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    BOOL            reduce using rule 17 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    STRING          reduce using rule 17 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    CURLYB_CLOSE    reduce using rule 17 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)


state 168

    (20) Optional_Else -> ELSE . Statements_Block
    (8) Statements_Block -> . CURLYB_OPEN Multiple_Statements CURLYB_CLOSE

    CURLYB_OPEN     shift and go to state 23

    Statements_Block               shift and go to state 171

state 169

    (21) Optional_Else -> Epsilon .

    PRINT           reduce using rule 21 (Optional_Else -> Epsilon .)
    ID              reduce using rule 21 (Optional_Else -> Epsilon .)
    WHILE           reduce using rule 21 (Optional_Else -> Epsilon .)
    IF              reduce using rule 21 (Optional_Else -> Epsilon .)
    INT             reduce using rule 21 (Optional_Else -> Epsilon .)
    FLOAT           reduce using rule 21 (Optional_Else -> Epsilon .)
    BOOL            reduce using rule 21 (Optional_Else -> Epsilon .)
    STRING          reduce using rule 21 (Optional_Else -> Epsilon .)
    CURLYB_CLOSE    reduce using rule 21 (Optional_Else -> Epsilon .)


state 170

    (18) Eif_Recursion -> EIF PAR_OPEN . Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion
    (36) Exp -> . Logical_Or
    (37) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (38) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (42) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (47) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (52) Logical_Not -> . Relational
    (53) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (56) Relational -> . Expression
    (57) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (58) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (59) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (60) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (66) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (73) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (82) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (83) Factor -> . Var_Cte
    (86) Var_Cte -> . INT_CONST Save_Int_Const
    (87) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (88) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (89) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (90) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (91) Var_Cte -> . STRING_CONST Save_String_Const
    (92) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 40
    PAR_OPEN        shift and go to state 24
    INT_CONST       shift and go to state 27
    MINUS_SIGN      shift and go to state 39
    FLOAT_CONST     shift and go to state 25
    BOOL_CONST      shift and go to state 29
    STRING_CONST    shift and go to state 30
    ID              shift and go to state 38

    Factor                         shift and go to state 32
    Relational                     shift and go to state 26
    Logical_Not                    shift and go to state 28
    Term                           shift and go to state 31
    Var_Cte                        shift and go to state 33
    Logical_Or                     shift and go to state 34
    Logical_And                    shift and go to state 35
    Exp                            shift and go to state 172
    Expression                     shift and go to state 37

state 171

    (20) Optional_Else -> ELSE Statements_Block .

    PRINT           reduce using rule 20 (Optional_Else -> ELSE Statements_Block .)
    ID              reduce using rule 20 (Optional_Else -> ELSE Statements_Block .)
    WHILE           reduce using rule 20 (Optional_Else -> ELSE Statements_Block .)
    IF              reduce using rule 20 (Optional_Else -> ELSE Statements_Block .)
    INT             reduce using rule 20 (Optional_Else -> ELSE Statements_Block .)
    FLOAT           reduce using rule 20 (Optional_Else -> ELSE Statements_Block .)
    BOOL            reduce using rule 20 (Optional_Else -> ELSE Statements_Block .)
    STRING          reduce using rule 20 (Optional_Else -> ELSE Statements_Block .)
    CURLYB_CLOSE    reduce using rule 20 (Optional_Else -> ELSE Statements_Block .)


state 172

    (18) Eif_Recursion -> EIF PAR_OPEN Exp . PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion

    PAR_CLOSE       shift and go to state 173


state 173

    (18) Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE . If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion
    (22) If_GoToF_Quad -> .

    CURLYB_OPEN     reduce using rule 22 (If_GoToF_Quad -> .)

    If_GoToF_Quad                  shift and go to state 174

state 174

    (18) Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad . Statements_Block GoTo_Fill Eif_Recursion
    (8) Statements_Block -> . CURLYB_OPEN Multiple_Statements CURLYB_CLOSE

    CURLYB_OPEN     shift and go to state 23

    Statements_Block               shift and go to state 175

state 175

    (18) Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block . GoTo_Fill Eif_Recursion
    (23) GoTo_Fill -> .

    EIF             reduce using rule 23 (GoTo_Fill -> .)
    ELSE            reduce using rule 23 (GoTo_Fill -> .)
    PRINT           reduce using rule 23 (GoTo_Fill -> .)
    ID              reduce using rule 23 (GoTo_Fill -> .)
    WHILE           reduce using rule 23 (GoTo_Fill -> .)
    IF              reduce using rule 23 (GoTo_Fill -> .)
    INT             reduce using rule 23 (GoTo_Fill -> .)
    FLOAT           reduce using rule 23 (GoTo_Fill -> .)
    BOOL            reduce using rule 23 (GoTo_Fill -> .)
    STRING          reduce using rule 23 (GoTo_Fill -> .)
    CURLYB_CLOSE    reduce using rule 23 (GoTo_Fill -> .)

    GoTo_Fill                      shift and go to state 176

state 176

    (18) Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill . Eif_Recursion
    (18) Eif_Recursion -> . EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion
    (19) Eif_Recursion -> . Epsilon
    (100) Epsilon -> .

    EIF             shift and go to state 166
    ELSE            reduce using rule 100 (Epsilon -> .)
    PRINT           reduce using rule 100 (Epsilon -> .)
    ID              reduce using rule 100 (Epsilon -> .)
    WHILE           reduce using rule 100 (Epsilon -> .)
    IF              reduce using rule 100 (Epsilon -> .)
    INT             reduce using rule 100 (Epsilon -> .)
    FLOAT           reduce using rule 100 (Epsilon -> .)
    BOOL            reduce using rule 100 (Epsilon -> .)
    STRING          reduce using rule 100 (Epsilon -> .)
    CURLYB_CLOSE    reduce using rule 100 (Epsilon -> .)

    Epsilon                        shift and go to state 165
    Eif_Recursion                  shift and go to state 177

state 177

    (18) Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .

    ELSE            reduce using rule 18 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    PRINT           reduce using rule 18 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    ID              reduce using rule 18 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    WHILE           reduce using rule 18 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    IF              reduce using rule 18 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    INT             reduce using rule 18 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    FLOAT           reduce using rule 18 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    BOOL            reduce using rule 18 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    STRING          reduce using rule 18 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    CURLYB_CLOSE    reduce using rule 18 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)

