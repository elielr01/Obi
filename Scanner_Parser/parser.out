Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    TRIANGLE
    SQRB_OPEN
    YELLOW
    GREEN
    CYAN
    LINE
    RED
    POLYGON
    COMMENT
    GRAY
    POINT
    PURPLE
    SQRB_CLOSE
    COMMA
    ORANGE
    BLOCK_COMMENT
    PINK
    DRAW
    SQUARE
    FUNC
    INPUT
    WHITE
    MAGENTA
    RECTANGLE
    BLUE
    BLACK
    CIRCLE

Grammar

Rule 0     S' -> Obi
Rule 1     Obi -> Play
Rule 2     Play -> PLAY Play_Init PAR_OPEN PAR_CLOSE Statements_Block
Rule 3     Play_Init -> <empty>
Rule 4     Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE
Rule 5     Multiple_Statements -> Statement Multiple_Statements
Rule 6     Multiple_Statements -> Epsilon
Rule 7     Statement -> Print
Rule 8     Statement -> Declare_Var
Rule 9     Statement -> Assignment
Rule 10    Statement -> While_Loop
Rule 11    Statement -> If_Eif_Else
Rule 12    Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON
Rule 13    If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else
Rule 14    Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion
Rule 15    Eif_Recursion -> Epsilon
Rule 16    Optional_Else -> ELSE Statements_Block
Rule 17    Optional_Else -> Epsilon
Rule 18    If_GoToF_Quad -> <empty>
Rule 19    GoTo_Fill -> <empty>
Rule 20    While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads
Rule 21    Push_While_Jump -> <empty>
Rule 22    While_Quad -> <empty>
Rule 23    Fill_While_Quads -> <empty>
Rule 24    Declare_Var -> Type ID SEMICOLON
Rule 25    Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON
Rule 26    Type -> INT
Rule 27    Type -> FLOAT
Rule 28    Type -> BOOL
Rule 29    Type -> STRING
Rule 30    Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON
Rule 31    Push_Assign -> <empty>
Rule 32    Exp -> Logical_Or
Rule 33    Exp -> Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
Rule 34    Exp -> Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
Rule 35    Equity_Quad -> <empty>
Rule 36    Push_Equal -> <empty>
Rule 37    Push_Diff -> <empty>
Rule 38    Logical_Or -> Logical_And Or_Quad Multiple_Ands
Rule 39    Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands
Rule 40    Multiple_Ands -> Epsilon
Rule 41    Or_Quad -> <empty>
Rule 42    Push_Or -> <empty>
Rule 43    Logical_And -> Logical_Not And_Quad Multiple_Nots
Rule 44    Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots
Rule 45    Multiple_Nots -> Epsilon
Rule 46    And_Quad -> <empty>
Rule 47    Push_And -> <empty>
Rule 48    Logical_Not -> Relational
Rule 49    Logical_Not -> NOT Push_Not Relational Not_Quad
Rule 50    Not_Quad -> <empty>
Rule 51    Push_Not -> <empty>
Rule 52    Relational -> Expression
Rule 53    Relational -> Expression LESS Push_Less Expression Relational_Quad
Rule 54    Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
Rule 55    Relational -> Expression GREATER Push_Greater Expression Relational_Quad
Rule 56    Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
Rule 57    Relational_Quad -> <empty>
Rule 58    Push_Less -> <empty>
Rule 59    Push_Less_Equal -> <empty>
Rule 60    Push_Greater -> <empty>
Rule 61    Push_Greater_Equal -> <empty>
Rule 62    Expression -> Term Sum_Sub_Quad Multiple_Terms
Rule 63    Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms
Rule 64    Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms
Rule 65    Multiple_Terms -> Epsilon
Rule 66    Sum_Sub_Quad -> <empty>
Rule 67    Push_Plus_Sign -> <empty>
Rule 68    Push_Minus_Sign -> <empty>
Rule 69    Term -> Factor Mult_Div_Mod_Quad Multiple_Factors
Rule 70    Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
Rule 71    Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
Rule 72    Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
Rule 73    Multiple_Factors -> Epsilon
Rule 74    Mult_Div_Mod_Quad -> <empty>
Rule 75    Push_Times_Sign -> <empty>
Rule 76    Push_Divide_Sign -> <empty>
Rule 77    Push_Mod_Sign -> <empty>
Rule 78    Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
Rule 79    Factor -> Var_Cte
Rule 80    Push_False_Bottom -> <empty>
Rule 81    Pop_False_Bottom -> <empty>
Rule 82    Var_Cte -> INT_CONST Save_Int_Const
Rule 83    Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const
Rule 84    Var_Cte -> FLOAT_CONST Save_Float_Const
Rule 85    Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
Rule 86    Var_Cte -> BOOL_CONST Save_Bool_Const
Rule 87    Var_Cte -> STRING_CONST Save_String_Const
Rule 88    Var_Cte -> ID Get_Id_Value
Rule 89    Save_Int_Const -> <empty>
Rule 90    Save_Neg_Int_Const -> <empty>
Rule 91    Save_Float_Const -> <empty>
Rule 92    Save_Neg_Float_Const -> <empty>
Rule 93    Save_Bool_Const -> <empty>
Rule 94    Save_String_Const -> <empty>
Rule 95    Get_Id_Value -> <empty>
Rule 96    Epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 44
ASSIGN               : 25 30
BLACK                : 
BLOCK_COMMENT        : 
BLUE                 : 
BOOL                 : 28
BOOL_CONST           : 86
CIRCLE               : 
COMMA                : 
COMMENT              : 
CURLYB_CLOSE         : 4
CURLYB_OPEN          : 4
CYAN                 : 
DIFF                 : 34
DIVIDE_SIGN          : 71
DRAW                 : 
EIF                  : 14
ELSE                 : 16
EQUAL                : 33
FLOAT                : 27
FLOAT_CONST          : 84 85
FUNC                 : 
GRAY                 : 
GREATER              : 55
GREATER_EQUAL        : 56
GREEN                : 
ID                   : 24 25 30 88
IF                   : 13
INPUT                : 
INT                  : 26
INT_CONST            : 82 83
LESS                 : 53
LESS_EQUAL           : 54
LINE                 : 
MAGENTA              : 
MINUS_SIGN           : 64 83 85
MOD_SIGN             : 72
NOT                  : 49
OR                   : 39
ORANGE               : 
PAR_CLOSE            : 2 12 13 14 20 78
PAR_OPEN             : 2 12 13 14 20 78
PINK                 : 
PLAY                 : 2
PLUS_SIGN            : 63
POINT                : 
POLYGON              : 
PRINT                : 12
PURPLE               : 
RECTANGLE            : 
RED                  : 
SEMICOLON            : 12 24 25 30
SQRB_CLOSE           : 
SQRB_OPEN            : 
SQUARE               : 
STRING               : 29
STRING_CONST         : 87
TIMES_SIGN           : 70
TRIANGLE             : 
WHILE                : 20
WHITE                : 
YELLOW               : 
error                : 

Nonterminals, with rules where they appear

And_Quad             : 43 44
Assignment           : 9
Declare_Var          : 8
Eif_Recursion        : 13 14
Epsilon              : 6 15 17 40 45 65 73
Equity_Quad          : 33 34
Exp                  : 12 13 14 20 25 30 78
Expression           : 52 53 53 54 54 55 55 56 56
Factor               : 69 70 71 72
Fill_While_Quads     : 20
Get_Id_Value         : 88
GoTo_Fill            : 13 14
If_Eif_Else          : 11
If_GoToF_Quad        : 13 14
Logical_And          : 38 39
Logical_Not          : 43 44
Logical_Or           : 32 33 33 34 34
Mult_Div_Mod_Quad    : 69 70 71 72
Multiple_Ands        : 38 39
Multiple_Factors     : 69 70 71 72
Multiple_Nots        : 43 44
Multiple_Statements  : 4 5
Multiple_Terms       : 62 63 64
Not_Quad             : 49
Obi                  : 0
Optional_Else        : 13
Or_Quad              : 38 39
Play                 : 1
Play_Init            : 2
Pop_False_Bottom     : 78
Print                : 7
Push_And             : 44
Push_Assign          : 25 30
Push_Diff            : 34
Push_Divide_Sign     : 71
Push_Equal           : 33
Push_False_Bottom    : 78
Push_Greater         : 55
Push_Greater_Equal   : 56
Push_Less            : 53
Push_Less_Equal      : 54
Push_Minus_Sign      : 64
Push_Mod_Sign        : 72
Push_Not             : 49
Push_Or              : 39
Push_Plus_Sign       : 63
Push_Times_Sign      : 70
Push_While_Jump      : 20
Relational           : 48 49
Relational_Quad      : 53 54 55 56
Save_Bool_Const      : 86
Save_Float_Const     : 84
Save_Int_Const       : 82
Save_Neg_Float_Const : 85
Save_Neg_Int_Const   : 83
Save_String_Const    : 87
Statement            : 5
Statements_Block     : 2 13 14 16 20
Sum_Sub_Quad         : 62 63 64
Term                 : 62 63 64
Type                 : 24 25
Var_Cte              : 79
While_Loop           : 10
While_Quad           : 20

Parsing method: LALR

state 0

    (0) S' -> . Obi
    (1) Obi -> . Play
    (2) Play -> . PLAY Play_Init PAR_OPEN PAR_CLOSE Statements_Block

    PLAY            shift and go to state 3

    Play                           shift and go to state 1
    Obi                            shift and go to state 2

state 1

    (1) Obi -> Play .

    $end            reduce using rule 1 (Obi -> Play .)


state 2

    (0) S' -> Obi .



state 3

    (2) Play -> PLAY . Play_Init PAR_OPEN PAR_CLOSE Statements_Block
    (3) Play_Init -> .

    PAR_OPEN        reduce using rule 3 (Play_Init -> .)

    Play_Init                      shift and go to state 4

state 4

    (2) Play -> PLAY Play_Init . PAR_OPEN PAR_CLOSE Statements_Block

    PAR_OPEN        shift and go to state 5


state 5

    (2) Play -> PLAY Play_Init PAR_OPEN . PAR_CLOSE Statements_Block

    PAR_CLOSE       shift and go to state 6


state 6

    (2) Play -> PLAY Play_Init PAR_OPEN PAR_CLOSE . Statements_Block
    (4) Statements_Block -> . CURLYB_OPEN Multiple_Statements CURLYB_CLOSE

    CURLYB_OPEN     shift and go to state 8

    Statements_Block               shift and go to state 7

state 7

    (2) Play -> PLAY Play_Init PAR_OPEN PAR_CLOSE Statements_Block .

    $end            reduce using rule 2 (Play -> PLAY Play_Init PAR_OPEN PAR_CLOSE Statements_Block .)


state 8

    (4) Statements_Block -> CURLYB_OPEN . Multiple_Statements CURLYB_CLOSE
    (5) Multiple_Statements -> . Statement Multiple_Statements
    (6) Multiple_Statements -> . Epsilon
    (7) Statement -> . Print
    (8) Statement -> . Declare_Var
    (9) Statement -> . Assignment
    (10) Statement -> . While_Loop
    (11) Statement -> . If_Eif_Else
    (96) Epsilon -> .
    (12) Print -> . PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON
    (24) Declare_Var -> . Type ID SEMICOLON
    (25) Declare_Var -> . Type ID ASSIGN Push_Assign Exp SEMICOLON
    (30) Assignment -> . ID ASSIGN Push_Assign Exp SEMICOLON
    (20) While_Loop -> . WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads
    (13) If_Eif_Else -> . IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else
    (26) Type -> . INT
    (27) Type -> . FLOAT
    (28) Type -> . BOOL
    (29) Type -> . STRING

    CURLYB_CLOSE    reduce using rule 96 (Epsilon -> .)
    PRINT           shift and go to state 12
    ID              shift and go to state 20
    WHILE           shift and go to state 10
    IF              shift and go to state 21
    INT             shift and go to state 23
    FLOAT           shift and go to state 22
    BOOL            shift and go to state 24
    STRING          shift and go to state 16

    Multiple_Statements            shift and go to state 15
    While_Loop                     shift and go to state 17
    Epsilon                        shift and go to state 14
    If_Eif_Else                    shift and go to state 19
    Declare_Var                    shift and go to state 18
    Statement                      shift and go to state 11
    Assignment                     shift and go to state 25
    Print                          shift and go to state 9
    Type                           shift and go to state 13

state 9

    (7) Statement -> Print .

    PRINT           reduce using rule 7 (Statement -> Print .)
    ID              reduce using rule 7 (Statement -> Print .)
    WHILE           reduce using rule 7 (Statement -> Print .)
    IF              reduce using rule 7 (Statement -> Print .)
    INT             reduce using rule 7 (Statement -> Print .)
    FLOAT           reduce using rule 7 (Statement -> Print .)
    BOOL            reduce using rule 7 (Statement -> Print .)
    STRING          reduce using rule 7 (Statement -> Print .)
    CURLYB_CLOSE    reduce using rule 7 (Statement -> Print .)


state 10

    (20) While_Loop -> WHILE . Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads
    (21) Push_While_Jump -> .

    PAR_OPEN        reduce using rule 21 (Push_While_Jump -> .)

    Push_While_Jump                shift and go to state 26

state 11

    (5) Multiple_Statements -> Statement . Multiple_Statements
    (5) Multiple_Statements -> . Statement Multiple_Statements
    (6) Multiple_Statements -> . Epsilon
    (7) Statement -> . Print
    (8) Statement -> . Declare_Var
    (9) Statement -> . Assignment
    (10) Statement -> . While_Loop
    (11) Statement -> . If_Eif_Else
    (96) Epsilon -> .
    (12) Print -> . PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON
    (24) Declare_Var -> . Type ID SEMICOLON
    (25) Declare_Var -> . Type ID ASSIGN Push_Assign Exp SEMICOLON
    (30) Assignment -> . ID ASSIGN Push_Assign Exp SEMICOLON
    (20) While_Loop -> . WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads
    (13) If_Eif_Else -> . IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else
    (26) Type -> . INT
    (27) Type -> . FLOAT
    (28) Type -> . BOOL
    (29) Type -> . STRING

    CURLYB_CLOSE    reduce using rule 96 (Epsilon -> .)
    PRINT           shift and go to state 12
    ID              shift and go to state 20
    WHILE           shift and go to state 10
    IF              shift and go to state 21
    INT             shift and go to state 23
    FLOAT           shift and go to state 22
    BOOL            shift and go to state 24
    STRING          shift and go to state 16

    Multiple_Statements            shift and go to state 27
    While_Loop                     shift and go to state 17
    Epsilon                        shift and go to state 14
    If_Eif_Else                    shift and go to state 19
    Declare_Var                    shift and go to state 18
    Statement                      shift and go to state 11
    Assignment                     shift and go to state 25
    Print                          shift and go to state 9
    Type                           shift and go to state 13

state 12

    (12) Print -> PRINT . PAR_OPEN Exp PAR_CLOSE SEMICOLON

    PAR_OPEN        shift and go to state 28


state 13

    (24) Declare_Var -> Type . ID SEMICOLON
    (25) Declare_Var -> Type . ID ASSIGN Push_Assign Exp SEMICOLON

    ID              shift and go to state 29


state 14

    (6) Multiple_Statements -> Epsilon .

    CURLYB_CLOSE    reduce using rule 6 (Multiple_Statements -> Epsilon .)


state 15

    (4) Statements_Block -> CURLYB_OPEN Multiple_Statements . CURLYB_CLOSE

    CURLYB_CLOSE    shift and go to state 30


state 16

    (29) Type -> STRING .

    ID              reduce using rule 29 (Type -> STRING .)


state 17

    (10) Statement -> While_Loop .

    PRINT           reduce using rule 10 (Statement -> While_Loop .)
    ID              reduce using rule 10 (Statement -> While_Loop .)
    WHILE           reduce using rule 10 (Statement -> While_Loop .)
    IF              reduce using rule 10 (Statement -> While_Loop .)
    INT             reduce using rule 10 (Statement -> While_Loop .)
    FLOAT           reduce using rule 10 (Statement -> While_Loop .)
    BOOL            reduce using rule 10 (Statement -> While_Loop .)
    STRING          reduce using rule 10 (Statement -> While_Loop .)
    CURLYB_CLOSE    reduce using rule 10 (Statement -> While_Loop .)


state 18

    (8) Statement -> Declare_Var .

    PRINT           reduce using rule 8 (Statement -> Declare_Var .)
    ID              reduce using rule 8 (Statement -> Declare_Var .)
    WHILE           reduce using rule 8 (Statement -> Declare_Var .)
    IF              reduce using rule 8 (Statement -> Declare_Var .)
    INT             reduce using rule 8 (Statement -> Declare_Var .)
    FLOAT           reduce using rule 8 (Statement -> Declare_Var .)
    BOOL            reduce using rule 8 (Statement -> Declare_Var .)
    STRING          reduce using rule 8 (Statement -> Declare_Var .)
    CURLYB_CLOSE    reduce using rule 8 (Statement -> Declare_Var .)


state 19

    (11) Statement -> If_Eif_Else .

    PRINT           reduce using rule 11 (Statement -> If_Eif_Else .)
    ID              reduce using rule 11 (Statement -> If_Eif_Else .)
    WHILE           reduce using rule 11 (Statement -> If_Eif_Else .)
    IF              reduce using rule 11 (Statement -> If_Eif_Else .)
    INT             reduce using rule 11 (Statement -> If_Eif_Else .)
    FLOAT           reduce using rule 11 (Statement -> If_Eif_Else .)
    BOOL            reduce using rule 11 (Statement -> If_Eif_Else .)
    STRING          reduce using rule 11 (Statement -> If_Eif_Else .)
    CURLYB_CLOSE    reduce using rule 11 (Statement -> If_Eif_Else .)


state 20

    (30) Assignment -> ID . ASSIGN Push_Assign Exp SEMICOLON

    ASSIGN          shift and go to state 31


state 21

    (13) If_Eif_Else -> IF . PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else

    PAR_OPEN        shift and go to state 32


state 22

    (27) Type -> FLOAT .

    ID              reduce using rule 27 (Type -> FLOAT .)


state 23

    (26) Type -> INT .

    ID              reduce using rule 26 (Type -> INT .)


state 24

    (28) Type -> BOOL .

    ID              reduce using rule 28 (Type -> BOOL .)


state 25

    (9) Statement -> Assignment .

    PRINT           reduce using rule 9 (Statement -> Assignment .)
    ID              reduce using rule 9 (Statement -> Assignment .)
    WHILE           reduce using rule 9 (Statement -> Assignment .)
    IF              reduce using rule 9 (Statement -> Assignment .)
    INT             reduce using rule 9 (Statement -> Assignment .)
    FLOAT           reduce using rule 9 (Statement -> Assignment .)
    BOOL            reduce using rule 9 (Statement -> Assignment .)
    STRING          reduce using rule 9 (Statement -> Assignment .)
    CURLYB_CLOSE    reduce using rule 9 (Statement -> Assignment .)


state 26

    (20) While_Loop -> WHILE Push_While_Jump . PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads

    PAR_OPEN        shift and go to state 33


state 27

    (5) Multiple_Statements -> Statement Multiple_Statements .

    CURLYB_CLOSE    reduce using rule 5 (Multiple_Statements -> Statement Multiple_Statements .)


state 28

    (12) Print -> PRINT PAR_OPEN . Exp PAR_CLOSE SEMICOLON
    (32) Exp -> . Logical_Or
    (33) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (34) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (38) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (43) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (48) Logical_Not -> . Relational
    (49) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 50
    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Factor                         shift and go to state 42
    Relational                     shift and go to state 36
    Logical_Not                    shift and go to state 39
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Logical_Or                     shift and go to state 44
    Logical_And                    shift and go to state 45
    Exp                            shift and go to state 46
    Expression                     shift and go to state 47

state 29

    (24) Declare_Var -> Type ID . SEMICOLON
    (25) Declare_Var -> Type ID . ASSIGN Push_Assign Exp SEMICOLON

    SEMICOLON       shift and go to state 51
    ASSIGN          shift and go to state 52


state 30

    (4) Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .

    EIF             reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    ELSE            reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    PRINT           reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    ID              reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    WHILE           reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    IF              reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    INT             reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    FLOAT           reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    BOOL            reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    STRING          reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    CURLYB_CLOSE    reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)
    $end            reduce using rule 4 (Statements_Block -> CURLYB_OPEN Multiple_Statements CURLYB_CLOSE .)


state 31

    (30) Assignment -> ID ASSIGN . Push_Assign Exp SEMICOLON
    (31) Push_Assign -> .

    NOT             reduce using rule 31 (Push_Assign -> .)
    PAR_OPEN        reduce using rule 31 (Push_Assign -> .)
    INT_CONST       reduce using rule 31 (Push_Assign -> .)
    MINUS_SIGN      reduce using rule 31 (Push_Assign -> .)
    FLOAT_CONST     reduce using rule 31 (Push_Assign -> .)
    BOOL_CONST      reduce using rule 31 (Push_Assign -> .)
    STRING_CONST    reduce using rule 31 (Push_Assign -> .)
    ID              reduce using rule 31 (Push_Assign -> .)

    Push_Assign                    shift and go to state 53

state 32

    (13) If_Eif_Else -> IF PAR_OPEN . Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else
    (32) Exp -> . Logical_Or
    (33) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (34) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (38) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (43) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (48) Logical_Not -> . Relational
    (49) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 50
    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Factor                         shift and go to state 42
    Relational                     shift and go to state 36
    Logical_Not                    shift and go to state 39
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Logical_Or                     shift and go to state 44
    Logical_And                    shift and go to state 45
    Exp                            shift and go to state 54
    Expression                     shift and go to state 47

state 33

    (20) While_Loop -> WHILE Push_While_Jump PAR_OPEN . Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads
    (32) Exp -> . Logical_Or
    (33) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (34) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (38) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (43) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (48) Logical_Not -> . Relational
    (49) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 50
    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Exp                            shift and go to state 55
    Factor                         shift and go to state 42
    Relational                     shift and go to state 36
    Logical_Not                    shift and go to state 39
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Logical_Or                     shift and go to state 44
    Logical_And                    shift and go to state 45
    Expression                     shift and go to state 47

state 34

    (78) Factor -> PAR_OPEN . Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (80) Push_False_Bottom -> .

    NOT             reduce using rule 80 (Push_False_Bottom -> .)
    PAR_OPEN        reduce using rule 80 (Push_False_Bottom -> .)
    INT_CONST       reduce using rule 80 (Push_False_Bottom -> .)
    MINUS_SIGN      reduce using rule 80 (Push_False_Bottom -> .)
    FLOAT_CONST     reduce using rule 80 (Push_False_Bottom -> .)
    BOOL_CONST      reduce using rule 80 (Push_False_Bottom -> .)
    STRING_CONST    reduce using rule 80 (Push_False_Bottom -> .)
    ID              reduce using rule 80 (Push_False_Bottom -> .)

    Push_False_Bottom              shift and go to state 56

state 35

    (84) Var_Cte -> FLOAT_CONST . Save_Float_Const
    (91) Save_Float_Const -> .

    TIMES_SIGN      reduce using rule 91 (Save_Float_Const -> .)
    DIVIDE_SIGN     reduce using rule 91 (Save_Float_Const -> .)
    MOD_SIGN        reduce using rule 91 (Save_Float_Const -> .)
    PLUS_SIGN       reduce using rule 91 (Save_Float_Const -> .)
    MINUS_SIGN      reduce using rule 91 (Save_Float_Const -> .)
    LESS            reduce using rule 91 (Save_Float_Const -> .)
    LESS_EQUAL      reduce using rule 91 (Save_Float_Const -> .)
    GREATER         reduce using rule 91 (Save_Float_Const -> .)
    GREATER_EQUAL   reduce using rule 91 (Save_Float_Const -> .)
    AND             reduce using rule 91 (Save_Float_Const -> .)
    OR              reduce using rule 91 (Save_Float_Const -> .)
    EQUAL           reduce using rule 91 (Save_Float_Const -> .)
    DIFF            reduce using rule 91 (Save_Float_Const -> .)
    PAR_CLOSE       reduce using rule 91 (Save_Float_Const -> .)
    SEMICOLON       reduce using rule 91 (Save_Float_Const -> .)

    Save_Float_Const               shift and go to state 57

state 36

    (48) Logical_Not -> Relational .

    AND             reduce using rule 48 (Logical_Not -> Relational .)
    OR              reduce using rule 48 (Logical_Not -> Relational .)
    EQUAL           reduce using rule 48 (Logical_Not -> Relational .)
    DIFF            reduce using rule 48 (Logical_Not -> Relational .)
    PAR_CLOSE       reduce using rule 48 (Logical_Not -> Relational .)
    SEMICOLON       reduce using rule 48 (Logical_Not -> Relational .)


state 37

    (87) Var_Cte -> STRING_CONST . Save_String_Const
    (94) Save_String_Const -> .

    TIMES_SIGN      reduce using rule 94 (Save_String_Const -> .)
    DIVIDE_SIGN     reduce using rule 94 (Save_String_Const -> .)
    MOD_SIGN        reduce using rule 94 (Save_String_Const -> .)
    PLUS_SIGN       reduce using rule 94 (Save_String_Const -> .)
    MINUS_SIGN      reduce using rule 94 (Save_String_Const -> .)
    LESS            reduce using rule 94 (Save_String_Const -> .)
    LESS_EQUAL      reduce using rule 94 (Save_String_Const -> .)
    GREATER         reduce using rule 94 (Save_String_Const -> .)
    GREATER_EQUAL   reduce using rule 94 (Save_String_Const -> .)
    AND             reduce using rule 94 (Save_String_Const -> .)
    OR              reduce using rule 94 (Save_String_Const -> .)
    EQUAL           reduce using rule 94 (Save_String_Const -> .)
    DIFF            reduce using rule 94 (Save_String_Const -> .)
    PAR_CLOSE       reduce using rule 94 (Save_String_Const -> .)
    SEMICOLON       reduce using rule 94 (Save_String_Const -> .)

    Save_String_Const              shift and go to state 58

state 38

    (82) Var_Cte -> INT_CONST . Save_Int_Const
    (89) Save_Int_Const -> .

    TIMES_SIGN      reduce using rule 89 (Save_Int_Const -> .)
    DIVIDE_SIGN     reduce using rule 89 (Save_Int_Const -> .)
    MOD_SIGN        reduce using rule 89 (Save_Int_Const -> .)
    PLUS_SIGN       reduce using rule 89 (Save_Int_Const -> .)
    MINUS_SIGN      reduce using rule 89 (Save_Int_Const -> .)
    LESS            reduce using rule 89 (Save_Int_Const -> .)
    LESS_EQUAL      reduce using rule 89 (Save_Int_Const -> .)
    GREATER         reduce using rule 89 (Save_Int_Const -> .)
    GREATER_EQUAL   reduce using rule 89 (Save_Int_Const -> .)
    AND             reduce using rule 89 (Save_Int_Const -> .)
    OR              reduce using rule 89 (Save_Int_Const -> .)
    EQUAL           reduce using rule 89 (Save_Int_Const -> .)
    DIFF            reduce using rule 89 (Save_Int_Const -> .)
    PAR_CLOSE       reduce using rule 89 (Save_Int_Const -> .)
    SEMICOLON       reduce using rule 89 (Save_Int_Const -> .)

    Save_Int_Const                 shift and go to state 59

state 39

    (43) Logical_And -> Logical_Not . And_Quad Multiple_Nots
    (46) And_Quad -> .

    AND             reduce using rule 46 (And_Quad -> .)
    OR              reduce using rule 46 (And_Quad -> .)
    EQUAL           reduce using rule 46 (And_Quad -> .)
    DIFF            reduce using rule 46 (And_Quad -> .)
    PAR_CLOSE       reduce using rule 46 (And_Quad -> .)
    SEMICOLON       reduce using rule 46 (And_Quad -> .)

    And_Quad                       shift and go to state 60

state 40

    (86) Var_Cte -> BOOL_CONST . Save_Bool_Const
    (93) Save_Bool_Const -> .

    TIMES_SIGN      reduce using rule 93 (Save_Bool_Const -> .)
    DIVIDE_SIGN     reduce using rule 93 (Save_Bool_Const -> .)
    MOD_SIGN        reduce using rule 93 (Save_Bool_Const -> .)
    PLUS_SIGN       reduce using rule 93 (Save_Bool_Const -> .)
    MINUS_SIGN      reduce using rule 93 (Save_Bool_Const -> .)
    LESS            reduce using rule 93 (Save_Bool_Const -> .)
    LESS_EQUAL      reduce using rule 93 (Save_Bool_Const -> .)
    GREATER         reduce using rule 93 (Save_Bool_Const -> .)
    GREATER_EQUAL   reduce using rule 93 (Save_Bool_Const -> .)
    AND             reduce using rule 93 (Save_Bool_Const -> .)
    OR              reduce using rule 93 (Save_Bool_Const -> .)
    EQUAL           reduce using rule 93 (Save_Bool_Const -> .)
    DIFF            reduce using rule 93 (Save_Bool_Const -> .)
    PAR_CLOSE       reduce using rule 93 (Save_Bool_Const -> .)
    SEMICOLON       reduce using rule 93 (Save_Bool_Const -> .)

    Save_Bool_Const                shift and go to state 61

state 41

    (62) Expression -> Term . Sum_Sub_Quad Multiple_Terms
    (66) Sum_Sub_Quad -> .

    PLUS_SIGN       reduce using rule 66 (Sum_Sub_Quad -> .)
    MINUS_SIGN      reduce using rule 66 (Sum_Sub_Quad -> .)
    LESS            reduce using rule 66 (Sum_Sub_Quad -> .)
    LESS_EQUAL      reduce using rule 66 (Sum_Sub_Quad -> .)
    GREATER         reduce using rule 66 (Sum_Sub_Quad -> .)
    GREATER_EQUAL   reduce using rule 66 (Sum_Sub_Quad -> .)
    AND             reduce using rule 66 (Sum_Sub_Quad -> .)
    OR              reduce using rule 66 (Sum_Sub_Quad -> .)
    EQUAL           reduce using rule 66 (Sum_Sub_Quad -> .)
    DIFF            reduce using rule 66 (Sum_Sub_Quad -> .)
    PAR_CLOSE       reduce using rule 66 (Sum_Sub_Quad -> .)
    SEMICOLON       reduce using rule 66 (Sum_Sub_Quad -> .)

    Sum_Sub_Quad                   shift and go to state 62

state 42

    (69) Term -> Factor . Mult_Div_Mod_Quad Multiple_Factors
    (74) Mult_Div_Mod_Quad -> .

    TIMES_SIGN      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    DIVIDE_SIGN     reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    MOD_SIGN        reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    PLUS_SIGN       reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    MINUS_SIGN      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    LESS            reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    LESS_EQUAL      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    GREATER         reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    GREATER_EQUAL   reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    AND             reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    OR              reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    EQUAL           reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    DIFF            reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    PAR_CLOSE       reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    SEMICOLON       reduce using rule 74 (Mult_Div_Mod_Quad -> .)

    Mult_Div_Mod_Quad              shift and go to state 63

state 43

    (79) Factor -> Var_Cte .

    TIMES_SIGN      reduce using rule 79 (Factor -> Var_Cte .)
    DIVIDE_SIGN     reduce using rule 79 (Factor -> Var_Cte .)
    MOD_SIGN        reduce using rule 79 (Factor -> Var_Cte .)
    PLUS_SIGN       reduce using rule 79 (Factor -> Var_Cte .)
    MINUS_SIGN      reduce using rule 79 (Factor -> Var_Cte .)
    AND             reduce using rule 79 (Factor -> Var_Cte .)
    OR              reduce using rule 79 (Factor -> Var_Cte .)
    EQUAL           reduce using rule 79 (Factor -> Var_Cte .)
    DIFF            reduce using rule 79 (Factor -> Var_Cte .)
    PAR_CLOSE       reduce using rule 79 (Factor -> Var_Cte .)
    SEMICOLON       reduce using rule 79 (Factor -> Var_Cte .)
    LESS            reduce using rule 79 (Factor -> Var_Cte .)
    LESS_EQUAL      reduce using rule 79 (Factor -> Var_Cte .)
    GREATER         reduce using rule 79 (Factor -> Var_Cte .)
    GREATER_EQUAL   reduce using rule 79 (Factor -> Var_Cte .)


state 44

    (32) Exp -> Logical_Or .
    (33) Exp -> Logical_Or . EQUAL Push_Equal Logical_Or Equity_Quad
    (34) Exp -> Logical_Or . DIFF Push_Diff Logical_Or Equity_Quad

    PAR_CLOSE       reduce using rule 32 (Exp -> Logical_Or .)
    SEMICOLON       reduce using rule 32 (Exp -> Logical_Or .)
    EQUAL           shift and go to state 64
    DIFF            shift and go to state 65


state 45

    (38) Logical_Or -> Logical_And . Or_Quad Multiple_Ands
    (41) Or_Quad -> .

    OR              reduce using rule 41 (Or_Quad -> .)
    EQUAL           reduce using rule 41 (Or_Quad -> .)
    DIFF            reduce using rule 41 (Or_Quad -> .)
    PAR_CLOSE       reduce using rule 41 (Or_Quad -> .)
    SEMICOLON       reduce using rule 41 (Or_Quad -> .)

    Or_Quad                        shift and go to state 66

state 46

    (12) Print -> PRINT PAR_OPEN Exp . PAR_CLOSE SEMICOLON

    PAR_CLOSE       shift and go to state 67


state 47

    (52) Relational -> Expression .
    (53) Relational -> Expression . LESS Push_Less Expression Relational_Quad
    (54) Relational -> Expression . LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> Expression . GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> Expression . GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad

    AND             reduce using rule 52 (Relational -> Expression .)
    OR              reduce using rule 52 (Relational -> Expression .)
    EQUAL           reduce using rule 52 (Relational -> Expression .)
    DIFF            reduce using rule 52 (Relational -> Expression .)
    PAR_CLOSE       reduce using rule 52 (Relational -> Expression .)
    SEMICOLON       reduce using rule 52 (Relational -> Expression .)
    LESS            shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREATER         shift and go to state 71
    GREATER_EQUAL   shift and go to state 70


state 48

    (88) Var_Cte -> ID . Get_Id_Value
    (95) Get_Id_Value -> .

    TIMES_SIGN      reduce using rule 95 (Get_Id_Value -> .)
    DIVIDE_SIGN     reduce using rule 95 (Get_Id_Value -> .)
    MOD_SIGN        reduce using rule 95 (Get_Id_Value -> .)
    PLUS_SIGN       reduce using rule 95 (Get_Id_Value -> .)
    MINUS_SIGN      reduce using rule 95 (Get_Id_Value -> .)
    LESS            reduce using rule 95 (Get_Id_Value -> .)
    LESS_EQUAL      reduce using rule 95 (Get_Id_Value -> .)
    GREATER         reduce using rule 95 (Get_Id_Value -> .)
    GREATER_EQUAL   reduce using rule 95 (Get_Id_Value -> .)
    AND             reduce using rule 95 (Get_Id_Value -> .)
    OR              reduce using rule 95 (Get_Id_Value -> .)
    EQUAL           reduce using rule 95 (Get_Id_Value -> .)
    DIFF            reduce using rule 95 (Get_Id_Value -> .)
    PAR_CLOSE       reduce using rule 95 (Get_Id_Value -> .)
    SEMICOLON       reduce using rule 95 (Get_Id_Value -> .)

    Get_Id_Value                   shift and go to state 72

state 49

    (83) Var_Cte -> MINUS_SIGN . INT_CONST Save_Neg_Int_Const
    (85) Var_Cte -> MINUS_SIGN . FLOAT_CONST Save_Neg_Float_Const

    INT_CONST       shift and go to state 73
    FLOAT_CONST     shift and go to state 74


state 50

    (49) Logical_Not -> NOT . Push_Not Relational Not_Quad
    (51) Push_Not -> .

    PAR_OPEN        reduce using rule 51 (Push_Not -> .)
    INT_CONST       reduce using rule 51 (Push_Not -> .)
    MINUS_SIGN      reduce using rule 51 (Push_Not -> .)
    FLOAT_CONST     reduce using rule 51 (Push_Not -> .)
    BOOL_CONST      reduce using rule 51 (Push_Not -> .)
    STRING_CONST    reduce using rule 51 (Push_Not -> .)
    ID              reduce using rule 51 (Push_Not -> .)

    Push_Not                       shift and go to state 75

state 51

    (24) Declare_Var -> Type ID SEMICOLON .

    PRINT           reduce using rule 24 (Declare_Var -> Type ID SEMICOLON .)
    ID              reduce using rule 24 (Declare_Var -> Type ID SEMICOLON .)
    WHILE           reduce using rule 24 (Declare_Var -> Type ID SEMICOLON .)
    IF              reduce using rule 24 (Declare_Var -> Type ID SEMICOLON .)
    INT             reduce using rule 24 (Declare_Var -> Type ID SEMICOLON .)
    FLOAT           reduce using rule 24 (Declare_Var -> Type ID SEMICOLON .)
    BOOL            reduce using rule 24 (Declare_Var -> Type ID SEMICOLON .)
    STRING          reduce using rule 24 (Declare_Var -> Type ID SEMICOLON .)
    CURLYB_CLOSE    reduce using rule 24 (Declare_Var -> Type ID SEMICOLON .)


state 52

    (25) Declare_Var -> Type ID ASSIGN . Push_Assign Exp SEMICOLON
    (31) Push_Assign -> .

    NOT             reduce using rule 31 (Push_Assign -> .)
    PAR_OPEN        reduce using rule 31 (Push_Assign -> .)
    INT_CONST       reduce using rule 31 (Push_Assign -> .)
    MINUS_SIGN      reduce using rule 31 (Push_Assign -> .)
    FLOAT_CONST     reduce using rule 31 (Push_Assign -> .)
    BOOL_CONST      reduce using rule 31 (Push_Assign -> .)
    STRING_CONST    reduce using rule 31 (Push_Assign -> .)
    ID              reduce using rule 31 (Push_Assign -> .)

    Push_Assign                    shift and go to state 76

state 53

    (30) Assignment -> ID ASSIGN Push_Assign . Exp SEMICOLON
    (32) Exp -> . Logical_Or
    (33) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (34) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (38) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (43) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (48) Logical_Not -> . Relational
    (49) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 50
    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Factor                         shift and go to state 42
    Relational                     shift and go to state 36
    Logical_Not                    shift and go to state 39
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Logical_Or                     shift and go to state 44
    Logical_And                    shift and go to state 45
    Exp                            shift and go to state 77
    Expression                     shift and go to state 47

state 54

    (13) If_Eif_Else -> IF PAR_OPEN Exp . PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else

    PAR_CLOSE       shift and go to state 78


state 55

    (20) While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp . PAR_CLOSE While_Quad Statements_Block Fill_While_Quads

    PAR_CLOSE       shift and go to state 79


state 56

    (78) Factor -> PAR_OPEN Push_False_Bottom . Exp PAR_CLOSE Pop_False_Bottom
    (32) Exp -> . Logical_Or
    (33) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (34) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (38) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (43) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (48) Logical_Not -> . Relational
    (49) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 50
    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Factor                         shift and go to state 42
    Relational                     shift and go to state 36
    Logical_Not                    shift and go to state 39
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Logical_Or                     shift and go to state 44
    Logical_And                    shift and go to state 45
    Exp                            shift and go to state 80
    Expression                     shift and go to state 47

state 57

    (84) Var_Cte -> FLOAT_CONST Save_Float_Const .

    TIMES_SIGN      reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    DIVIDE_SIGN     reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    MOD_SIGN        reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    PLUS_SIGN       reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    MINUS_SIGN      reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    LESS            reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    LESS_EQUAL      reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    GREATER         reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    GREATER_EQUAL   reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    AND             reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    OR              reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    EQUAL           reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    DIFF            reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    PAR_CLOSE       reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)
    SEMICOLON       reduce using rule 84 (Var_Cte -> FLOAT_CONST Save_Float_Const .)


state 58

    (87) Var_Cte -> STRING_CONST Save_String_Const .

    TIMES_SIGN      reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    DIVIDE_SIGN     reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    MOD_SIGN        reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    PLUS_SIGN       reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    MINUS_SIGN      reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    LESS            reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    LESS_EQUAL      reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    GREATER         reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    GREATER_EQUAL   reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    AND             reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    OR              reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    EQUAL           reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    DIFF            reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    PAR_CLOSE       reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)
    SEMICOLON       reduce using rule 87 (Var_Cte -> STRING_CONST Save_String_Const .)


state 59

    (82) Var_Cte -> INT_CONST Save_Int_Const .

    TIMES_SIGN      reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    DIVIDE_SIGN     reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    MOD_SIGN        reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    PLUS_SIGN       reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    MINUS_SIGN      reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    LESS            reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    LESS_EQUAL      reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    GREATER         reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    GREATER_EQUAL   reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    AND             reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    OR              reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    EQUAL           reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    DIFF            reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    PAR_CLOSE       reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)
    SEMICOLON       reduce using rule 82 (Var_Cte -> INT_CONST Save_Int_Const .)


state 60

    (43) Logical_And -> Logical_Not And_Quad . Multiple_Nots
    (44) Multiple_Nots -> . AND Push_And Logical_Not And_Quad Multiple_Nots
    (45) Multiple_Nots -> . Epsilon
    (96) Epsilon -> .

    AND             shift and go to state 81
    OR              reduce using rule 96 (Epsilon -> .)
    EQUAL           reduce using rule 96 (Epsilon -> .)
    DIFF            reduce using rule 96 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 96 (Epsilon -> .)
    SEMICOLON       reduce using rule 96 (Epsilon -> .)

    Multiple_Nots                  shift and go to state 83
    Epsilon                        shift and go to state 82

state 61

    (86) Var_Cte -> BOOL_CONST Save_Bool_Const .

    TIMES_SIGN      reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    DIVIDE_SIGN     reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    MOD_SIGN        reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    PLUS_SIGN       reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    MINUS_SIGN      reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    LESS            reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    LESS_EQUAL      reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    GREATER         reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    GREATER_EQUAL   reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    AND             reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    OR              reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    EQUAL           reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    DIFF            reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    PAR_CLOSE       reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)
    SEMICOLON       reduce using rule 86 (Var_Cte -> BOOL_CONST Save_Bool_Const .)


state 62

    (62) Expression -> Term Sum_Sub_Quad . Multiple_Terms
    (63) Multiple_Terms -> . PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms
    (64) Multiple_Terms -> . MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms
    (65) Multiple_Terms -> . Epsilon
    (96) Epsilon -> .

    PLUS_SIGN       shift and go to state 87
    MINUS_SIGN      shift and go to state 86
    LESS            reduce using rule 96 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 96 (Epsilon -> .)
    GREATER         reduce using rule 96 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 96 (Epsilon -> .)
    AND             reduce using rule 96 (Epsilon -> .)
    OR              reduce using rule 96 (Epsilon -> .)
    EQUAL           reduce using rule 96 (Epsilon -> .)
    DIFF            reduce using rule 96 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 96 (Epsilon -> .)
    SEMICOLON       reduce using rule 96 (Epsilon -> .)

    Multiple_Terms                 shift and go to state 84
    Epsilon                        shift and go to state 85

state 63

    (69) Term -> Factor Mult_Div_Mod_Quad . Multiple_Factors
    (70) Multiple_Factors -> . TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (71) Multiple_Factors -> . DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (72) Multiple_Factors -> . MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (73) Multiple_Factors -> . Epsilon
    (96) Epsilon -> .

    TIMES_SIGN      shift and go to state 88
    DIVIDE_SIGN     shift and go to state 92
    MOD_SIGN        shift and go to state 89
    PLUS_SIGN       reduce using rule 96 (Epsilon -> .)
    MINUS_SIGN      reduce using rule 96 (Epsilon -> .)
    LESS            reduce using rule 96 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 96 (Epsilon -> .)
    GREATER         reduce using rule 96 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 96 (Epsilon -> .)
    AND             reduce using rule 96 (Epsilon -> .)
    OR              reduce using rule 96 (Epsilon -> .)
    EQUAL           reduce using rule 96 (Epsilon -> .)
    DIFF            reduce using rule 96 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 96 (Epsilon -> .)
    SEMICOLON       reduce using rule 96 (Epsilon -> .)

    Epsilon                        shift and go to state 90
    Multiple_Factors               shift and go to state 91

state 64

    (33) Exp -> Logical_Or EQUAL . Push_Equal Logical_Or Equity_Quad
    (36) Push_Equal -> .

    NOT             reduce using rule 36 (Push_Equal -> .)
    PAR_OPEN        reduce using rule 36 (Push_Equal -> .)
    INT_CONST       reduce using rule 36 (Push_Equal -> .)
    MINUS_SIGN      reduce using rule 36 (Push_Equal -> .)
    FLOAT_CONST     reduce using rule 36 (Push_Equal -> .)
    BOOL_CONST      reduce using rule 36 (Push_Equal -> .)
    STRING_CONST    reduce using rule 36 (Push_Equal -> .)
    ID              reduce using rule 36 (Push_Equal -> .)

    Push_Equal                     shift and go to state 93

state 65

    (34) Exp -> Logical_Or DIFF . Push_Diff Logical_Or Equity_Quad
    (37) Push_Diff -> .

    NOT             reduce using rule 37 (Push_Diff -> .)
    PAR_OPEN        reduce using rule 37 (Push_Diff -> .)
    INT_CONST       reduce using rule 37 (Push_Diff -> .)
    MINUS_SIGN      reduce using rule 37 (Push_Diff -> .)
    FLOAT_CONST     reduce using rule 37 (Push_Diff -> .)
    BOOL_CONST      reduce using rule 37 (Push_Diff -> .)
    STRING_CONST    reduce using rule 37 (Push_Diff -> .)
    ID              reduce using rule 37 (Push_Diff -> .)

    Push_Diff                      shift and go to state 94

state 66

    (38) Logical_Or -> Logical_And Or_Quad . Multiple_Ands
    (39) Multiple_Ands -> . OR Push_Or Logical_And Or_Quad Multiple_Ands
    (40) Multiple_Ands -> . Epsilon
    (96) Epsilon -> .

    OR              shift and go to state 97
    EQUAL           reduce using rule 96 (Epsilon -> .)
    DIFF            reduce using rule 96 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 96 (Epsilon -> .)
    SEMICOLON       reduce using rule 96 (Epsilon -> .)

    Multiple_Ands                  shift and go to state 95
    Epsilon                        shift and go to state 96

state 67

    (12) Print -> PRINT PAR_OPEN Exp PAR_CLOSE . SEMICOLON

    SEMICOLON       shift and go to state 98


state 68

    (53) Relational -> Expression LESS . Push_Less Expression Relational_Quad
    (58) Push_Less -> .

    PAR_OPEN        reduce using rule 58 (Push_Less -> .)
    INT_CONST       reduce using rule 58 (Push_Less -> .)
    MINUS_SIGN      reduce using rule 58 (Push_Less -> .)
    FLOAT_CONST     reduce using rule 58 (Push_Less -> .)
    BOOL_CONST      reduce using rule 58 (Push_Less -> .)
    STRING_CONST    reduce using rule 58 (Push_Less -> .)
    ID              reduce using rule 58 (Push_Less -> .)

    Push_Less                      shift and go to state 99

state 69

    (54) Relational -> Expression LESS_EQUAL . Push_Less_Equal Expression Relational_Quad
    (59) Push_Less_Equal -> .

    PAR_OPEN        reduce using rule 59 (Push_Less_Equal -> .)
    INT_CONST       reduce using rule 59 (Push_Less_Equal -> .)
    MINUS_SIGN      reduce using rule 59 (Push_Less_Equal -> .)
    FLOAT_CONST     reduce using rule 59 (Push_Less_Equal -> .)
    BOOL_CONST      reduce using rule 59 (Push_Less_Equal -> .)
    STRING_CONST    reduce using rule 59 (Push_Less_Equal -> .)
    ID              reduce using rule 59 (Push_Less_Equal -> .)

    Push_Less_Equal                shift and go to state 100

state 70

    (56) Relational -> Expression GREATER_EQUAL . Push_Greater_Equal Expression Relational_Quad
    (61) Push_Greater_Equal -> .

    PAR_OPEN        reduce using rule 61 (Push_Greater_Equal -> .)
    INT_CONST       reduce using rule 61 (Push_Greater_Equal -> .)
    MINUS_SIGN      reduce using rule 61 (Push_Greater_Equal -> .)
    FLOAT_CONST     reduce using rule 61 (Push_Greater_Equal -> .)
    BOOL_CONST      reduce using rule 61 (Push_Greater_Equal -> .)
    STRING_CONST    reduce using rule 61 (Push_Greater_Equal -> .)
    ID              reduce using rule 61 (Push_Greater_Equal -> .)

    Push_Greater_Equal             shift and go to state 101

state 71

    (55) Relational -> Expression GREATER . Push_Greater Expression Relational_Quad
    (60) Push_Greater -> .

    PAR_OPEN        reduce using rule 60 (Push_Greater -> .)
    INT_CONST       reduce using rule 60 (Push_Greater -> .)
    MINUS_SIGN      reduce using rule 60 (Push_Greater -> .)
    FLOAT_CONST     reduce using rule 60 (Push_Greater -> .)
    BOOL_CONST      reduce using rule 60 (Push_Greater -> .)
    STRING_CONST    reduce using rule 60 (Push_Greater -> .)
    ID              reduce using rule 60 (Push_Greater -> .)

    Push_Greater                   shift and go to state 102

state 72

    (88) Var_Cte -> ID Get_Id_Value .

    TIMES_SIGN      reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    DIVIDE_SIGN     reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    MOD_SIGN        reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    PLUS_SIGN       reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    MINUS_SIGN      reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    LESS            reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    LESS_EQUAL      reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    GREATER         reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    GREATER_EQUAL   reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    AND             reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    OR              reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    EQUAL           reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    DIFF            reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    PAR_CLOSE       reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)
    SEMICOLON       reduce using rule 88 (Var_Cte -> ID Get_Id_Value .)


state 73

    (83) Var_Cte -> MINUS_SIGN INT_CONST . Save_Neg_Int_Const
    (90) Save_Neg_Int_Const -> .

    TIMES_SIGN      reduce using rule 90 (Save_Neg_Int_Const -> .)
    DIVIDE_SIGN     reduce using rule 90 (Save_Neg_Int_Const -> .)
    MOD_SIGN        reduce using rule 90 (Save_Neg_Int_Const -> .)
    PLUS_SIGN       reduce using rule 90 (Save_Neg_Int_Const -> .)
    MINUS_SIGN      reduce using rule 90 (Save_Neg_Int_Const -> .)
    LESS            reduce using rule 90 (Save_Neg_Int_Const -> .)
    LESS_EQUAL      reduce using rule 90 (Save_Neg_Int_Const -> .)
    GREATER         reduce using rule 90 (Save_Neg_Int_Const -> .)
    GREATER_EQUAL   reduce using rule 90 (Save_Neg_Int_Const -> .)
    AND             reduce using rule 90 (Save_Neg_Int_Const -> .)
    OR              reduce using rule 90 (Save_Neg_Int_Const -> .)
    EQUAL           reduce using rule 90 (Save_Neg_Int_Const -> .)
    DIFF            reduce using rule 90 (Save_Neg_Int_Const -> .)
    PAR_CLOSE       reduce using rule 90 (Save_Neg_Int_Const -> .)
    SEMICOLON       reduce using rule 90 (Save_Neg_Int_Const -> .)

    Save_Neg_Int_Const             shift and go to state 103

state 74

    (85) Var_Cte -> MINUS_SIGN FLOAT_CONST . Save_Neg_Float_Const
    (92) Save_Neg_Float_Const -> .

    TIMES_SIGN      reduce using rule 92 (Save_Neg_Float_Const -> .)
    DIVIDE_SIGN     reduce using rule 92 (Save_Neg_Float_Const -> .)
    MOD_SIGN        reduce using rule 92 (Save_Neg_Float_Const -> .)
    PLUS_SIGN       reduce using rule 92 (Save_Neg_Float_Const -> .)
    MINUS_SIGN      reduce using rule 92 (Save_Neg_Float_Const -> .)
    LESS            reduce using rule 92 (Save_Neg_Float_Const -> .)
    LESS_EQUAL      reduce using rule 92 (Save_Neg_Float_Const -> .)
    GREATER         reduce using rule 92 (Save_Neg_Float_Const -> .)
    GREATER_EQUAL   reduce using rule 92 (Save_Neg_Float_Const -> .)
    AND             reduce using rule 92 (Save_Neg_Float_Const -> .)
    OR              reduce using rule 92 (Save_Neg_Float_Const -> .)
    EQUAL           reduce using rule 92 (Save_Neg_Float_Const -> .)
    DIFF            reduce using rule 92 (Save_Neg_Float_Const -> .)
    PAR_CLOSE       reduce using rule 92 (Save_Neg_Float_Const -> .)
    SEMICOLON       reduce using rule 92 (Save_Neg_Float_Const -> .)

    Save_Neg_Float_Const           shift and go to state 104

state 75

    (49) Logical_Not -> NOT Push_Not . Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Factor                         shift and go to state 42
    Relational                     shift and go to state 105
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Expression                     shift and go to state 47

state 76

    (25) Declare_Var -> Type ID ASSIGN Push_Assign . Exp SEMICOLON
    (32) Exp -> . Logical_Or
    (33) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (34) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (38) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (43) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (48) Logical_Not -> . Relational
    (49) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 50
    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Factor                         shift and go to state 42
    Relational                     shift and go to state 36
    Logical_Not                    shift and go to state 39
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Logical_Or                     shift and go to state 44
    Logical_And                    shift and go to state 45
    Exp                            shift and go to state 106
    Expression                     shift and go to state 47

state 77

    (30) Assignment -> ID ASSIGN Push_Assign Exp . SEMICOLON

    SEMICOLON       shift and go to state 107


state 78

    (13) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE . If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else
    (18) If_GoToF_Quad -> .

    CURLYB_OPEN     reduce using rule 18 (If_GoToF_Quad -> .)

    If_GoToF_Quad                  shift and go to state 108

state 79

    (20) While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE . While_Quad Statements_Block Fill_While_Quads
    (22) While_Quad -> .

    CURLYB_OPEN     reduce using rule 22 (While_Quad -> .)

    While_Quad                     shift and go to state 109

state 80

    (78) Factor -> PAR_OPEN Push_False_Bottom Exp . PAR_CLOSE Pop_False_Bottom

    PAR_CLOSE       shift and go to state 110


state 81

    (44) Multiple_Nots -> AND . Push_And Logical_Not And_Quad Multiple_Nots
    (47) Push_And -> .

    NOT             reduce using rule 47 (Push_And -> .)
    PAR_OPEN        reduce using rule 47 (Push_And -> .)
    INT_CONST       reduce using rule 47 (Push_And -> .)
    MINUS_SIGN      reduce using rule 47 (Push_And -> .)
    FLOAT_CONST     reduce using rule 47 (Push_And -> .)
    BOOL_CONST      reduce using rule 47 (Push_And -> .)
    STRING_CONST    reduce using rule 47 (Push_And -> .)
    ID              reduce using rule 47 (Push_And -> .)

    Push_And                       shift and go to state 111

state 82

    (45) Multiple_Nots -> Epsilon .

    OR              reduce using rule 45 (Multiple_Nots -> Epsilon .)
    EQUAL           reduce using rule 45 (Multiple_Nots -> Epsilon .)
    DIFF            reduce using rule 45 (Multiple_Nots -> Epsilon .)
    PAR_CLOSE       reduce using rule 45 (Multiple_Nots -> Epsilon .)
    SEMICOLON       reduce using rule 45 (Multiple_Nots -> Epsilon .)


state 83

    (43) Logical_And -> Logical_Not And_Quad Multiple_Nots .

    OR              reduce using rule 43 (Logical_And -> Logical_Not And_Quad Multiple_Nots .)
    EQUAL           reduce using rule 43 (Logical_And -> Logical_Not And_Quad Multiple_Nots .)
    DIFF            reduce using rule 43 (Logical_And -> Logical_Not And_Quad Multiple_Nots .)
    PAR_CLOSE       reduce using rule 43 (Logical_And -> Logical_Not And_Quad Multiple_Nots .)
    SEMICOLON       reduce using rule 43 (Logical_And -> Logical_Not And_Quad Multiple_Nots .)


state 84

    (62) Expression -> Term Sum_Sub_Quad Multiple_Terms .

    LESS            reduce using rule 62 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    LESS_EQUAL      reduce using rule 62 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    GREATER         reduce using rule 62 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    GREATER_EQUAL   reduce using rule 62 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    AND             reduce using rule 62 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    OR              reduce using rule 62 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    PAR_CLOSE       reduce using rule 62 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    SEMICOLON       reduce using rule 62 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    EQUAL           reduce using rule 62 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)
    DIFF            reduce using rule 62 (Expression -> Term Sum_Sub_Quad Multiple_Terms .)


state 85

    (65) Multiple_Terms -> Epsilon .

    LESS            reduce using rule 65 (Multiple_Terms -> Epsilon .)
    LESS_EQUAL      reduce using rule 65 (Multiple_Terms -> Epsilon .)
    GREATER         reduce using rule 65 (Multiple_Terms -> Epsilon .)
    GREATER_EQUAL   reduce using rule 65 (Multiple_Terms -> Epsilon .)
    AND             reduce using rule 65 (Multiple_Terms -> Epsilon .)
    OR              reduce using rule 65 (Multiple_Terms -> Epsilon .)
    EQUAL           reduce using rule 65 (Multiple_Terms -> Epsilon .)
    DIFF            reduce using rule 65 (Multiple_Terms -> Epsilon .)
    PAR_CLOSE       reduce using rule 65 (Multiple_Terms -> Epsilon .)
    SEMICOLON       reduce using rule 65 (Multiple_Terms -> Epsilon .)


state 86

    (64) Multiple_Terms -> MINUS_SIGN . Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms
    (68) Push_Minus_Sign -> .

    PAR_OPEN        reduce using rule 68 (Push_Minus_Sign -> .)
    INT_CONST       reduce using rule 68 (Push_Minus_Sign -> .)
    MINUS_SIGN      reduce using rule 68 (Push_Minus_Sign -> .)
    FLOAT_CONST     reduce using rule 68 (Push_Minus_Sign -> .)
    BOOL_CONST      reduce using rule 68 (Push_Minus_Sign -> .)
    STRING_CONST    reduce using rule 68 (Push_Minus_Sign -> .)
    ID              reduce using rule 68 (Push_Minus_Sign -> .)

    Push_Minus_Sign                shift and go to state 112

state 87

    (63) Multiple_Terms -> PLUS_SIGN . Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms
    (67) Push_Plus_Sign -> .

    PAR_OPEN        reduce using rule 67 (Push_Plus_Sign -> .)
    INT_CONST       reduce using rule 67 (Push_Plus_Sign -> .)
    MINUS_SIGN      reduce using rule 67 (Push_Plus_Sign -> .)
    FLOAT_CONST     reduce using rule 67 (Push_Plus_Sign -> .)
    BOOL_CONST      reduce using rule 67 (Push_Plus_Sign -> .)
    STRING_CONST    reduce using rule 67 (Push_Plus_Sign -> .)
    ID              reduce using rule 67 (Push_Plus_Sign -> .)

    Push_Plus_Sign                 shift and go to state 113

state 88

    (70) Multiple_Factors -> TIMES_SIGN . Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (75) Push_Times_Sign -> .

    PAR_OPEN        reduce using rule 75 (Push_Times_Sign -> .)
    INT_CONST       reduce using rule 75 (Push_Times_Sign -> .)
    MINUS_SIGN      reduce using rule 75 (Push_Times_Sign -> .)
    FLOAT_CONST     reduce using rule 75 (Push_Times_Sign -> .)
    BOOL_CONST      reduce using rule 75 (Push_Times_Sign -> .)
    STRING_CONST    reduce using rule 75 (Push_Times_Sign -> .)
    ID              reduce using rule 75 (Push_Times_Sign -> .)

    Push_Times_Sign                shift and go to state 114

state 89

    (72) Multiple_Factors -> MOD_SIGN . Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (77) Push_Mod_Sign -> .

    PAR_OPEN        reduce using rule 77 (Push_Mod_Sign -> .)
    INT_CONST       reduce using rule 77 (Push_Mod_Sign -> .)
    MINUS_SIGN      reduce using rule 77 (Push_Mod_Sign -> .)
    FLOAT_CONST     reduce using rule 77 (Push_Mod_Sign -> .)
    BOOL_CONST      reduce using rule 77 (Push_Mod_Sign -> .)
    STRING_CONST    reduce using rule 77 (Push_Mod_Sign -> .)
    ID              reduce using rule 77 (Push_Mod_Sign -> .)

    Push_Mod_Sign                  shift and go to state 115

state 90

    (73) Multiple_Factors -> Epsilon .

    PLUS_SIGN       reduce using rule 73 (Multiple_Factors -> Epsilon .)
    MINUS_SIGN      reduce using rule 73 (Multiple_Factors -> Epsilon .)
    LESS            reduce using rule 73 (Multiple_Factors -> Epsilon .)
    LESS_EQUAL      reduce using rule 73 (Multiple_Factors -> Epsilon .)
    GREATER         reduce using rule 73 (Multiple_Factors -> Epsilon .)
    GREATER_EQUAL   reduce using rule 73 (Multiple_Factors -> Epsilon .)
    AND             reduce using rule 73 (Multiple_Factors -> Epsilon .)
    OR              reduce using rule 73 (Multiple_Factors -> Epsilon .)
    EQUAL           reduce using rule 73 (Multiple_Factors -> Epsilon .)
    DIFF            reduce using rule 73 (Multiple_Factors -> Epsilon .)
    PAR_CLOSE       reduce using rule 73 (Multiple_Factors -> Epsilon .)
    SEMICOLON       reduce using rule 73 (Multiple_Factors -> Epsilon .)


state 91

    (69) Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .

    PLUS_SIGN       reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    MINUS_SIGN      reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS            reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS_EQUAL      reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER         reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER_EQUAL   reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    AND             reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    OR              reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    EQUAL           reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    DIFF            reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    PAR_CLOSE       reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)
    SEMICOLON       reduce using rule 69 (Term -> Factor Mult_Div_Mod_Quad Multiple_Factors .)


state 92

    (71) Multiple_Factors -> DIVIDE_SIGN . Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (76) Push_Divide_Sign -> .

    PAR_OPEN        reduce using rule 76 (Push_Divide_Sign -> .)
    INT_CONST       reduce using rule 76 (Push_Divide_Sign -> .)
    MINUS_SIGN      reduce using rule 76 (Push_Divide_Sign -> .)
    FLOAT_CONST     reduce using rule 76 (Push_Divide_Sign -> .)
    BOOL_CONST      reduce using rule 76 (Push_Divide_Sign -> .)
    STRING_CONST    reduce using rule 76 (Push_Divide_Sign -> .)
    ID              reduce using rule 76 (Push_Divide_Sign -> .)

    Push_Divide_Sign               shift and go to state 116

state 93

    (33) Exp -> Logical_Or EQUAL Push_Equal . Logical_Or Equity_Quad
    (38) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (43) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (48) Logical_Not -> . Relational
    (49) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 50
    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Factor                         shift and go to state 42
    Relational                     shift and go to state 36
    Logical_Not                    shift and go to state 39
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Logical_Or                     shift and go to state 117
    Logical_And                    shift and go to state 45
    Expression                     shift and go to state 47

state 94

    (34) Exp -> Logical_Or DIFF Push_Diff . Logical_Or Equity_Quad
    (38) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (43) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (48) Logical_Not -> . Relational
    (49) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 50
    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Factor                         shift and go to state 42
    Relational                     shift and go to state 36
    Logical_Not                    shift and go to state 39
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Logical_Or                     shift and go to state 118
    Logical_And                    shift and go to state 45
    Expression                     shift and go to state 47

state 95

    (38) Logical_Or -> Logical_And Or_Quad Multiple_Ands .

    EQUAL           reduce using rule 38 (Logical_Or -> Logical_And Or_Quad Multiple_Ands .)
    DIFF            reduce using rule 38 (Logical_Or -> Logical_And Or_Quad Multiple_Ands .)
    PAR_CLOSE       reduce using rule 38 (Logical_Or -> Logical_And Or_Quad Multiple_Ands .)
    SEMICOLON       reduce using rule 38 (Logical_Or -> Logical_And Or_Quad Multiple_Ands .)


state 96

    (40) Multiple_Ands -> Epsilon .

    EQUAL           reduce using rule 40 (Multiple_Ands -> Epsilon .)
    DIFF            reduce using rule 40 (Multiple_Ands -> Epsilon .)
    PAR_CLOSE       reduce using rule 40 (Multiple_Ands -> Epsilon .)
    SEMICOLON       reduce using rule 40 (Multiple_Ands -> Epsilon .)


state 97

    (39) Multiple_Ands -> OR . Push_Or Logical_And Or_Quad Multiple_Ands
    (42) Push_Or -> .

    NOT             reduce using rule 42 (Push_Or -> .)
    PAR_OPEN        reduce using rule 42 (Push_Or -> .)
    INT_CONST       reduce using rule 42 (Push_Or -> .)
    MINUS_SIGN      reduce using rule 42 (Push_Or -> .)
    FLOAT_CONST     reduce using rule 42 (Push_Or -> .)
    BOOL_CONST      reduce using rule 42 (Push_Or -> .)
    STRING_CONST    reduce using rule 42 (Push_Or -> .)
    ID              reduce using rule 42 (Push_Or -> .)

    Push_Or                        shift and go to state 119

state 98

    (12) Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .

    PRINT           reduce using rule 12 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    ID              reduce using rule 12 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    WHILE           reduce using rule 12 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    IF              reduce using rule 12 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    INT             reduce using rule 12 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    FLOAT           reduce using rule 12 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    BOOL            reduce using rule 12 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    STRING          reduce using rule 12 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)
    CURLYB_CLOSE    reduce using rule 12 (Print -> PRINT PAR_OPEN Exp PAR_CLOSE SEMICOLON .)


state 99

    (53) Relational -> Expression LESS Push_Less . Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Factor                         shift and go to state 42
    Expression                     shift and go to state 120

state 100

    (54) Relational -> Expression LESS_EQUAL Push_Less_Equal . Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Factor                         shift and go to state 42
    Expression                     shift and go to state 121

state 101

    (56) Relational -> Expression GREATER_EQUAL Push_Greater_Equal . Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Factor                         shift and go to state 42
    Expression                     shift and go to state 122

state 102

    (55) Relational -> Expression GREATER Push_Greater . Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Factor                         shift and go to state 42
    Expression                     shift and go to state 123

state 103

    (83) Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .

    TIMES_SIGN      reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    DIVIDE_SIGN     reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    MOD_SIGN        reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    PLUS_SIGN       reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    MINUS_SIGN      reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    LESS            reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    LESS_EQUAL      reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    GREATER         reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    GREATER_EQUAL   reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    AND             reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    OR              reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    EQUAL           reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    DIFF            reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    PAR_CLOSE       reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)
    SEMICOLON       reduce using rule 83 (Var_Cte -> MINUS_SIGN INT_CONST Save_Neg_Int_Const .)


state 104

    (85) Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .

    TIMES_SIGN      reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    DIVIDE_SIGN     reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    MOD_SIGN        reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    PLUS_SIGN       reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    MINUS_SIGN      reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    LESS            reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    LESS_EQUAL      reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    GREATER         reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    GREATER_EQUAL   reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    AND             reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    OR              reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    EQUAL           reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    DIFF            reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    PAR_CLOSE       reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)
    SEMICOLON       reduce using rule 85 (Var_Cte -> MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const .)


state 105

    (49) Logical_Not -> NOT Push_Not Relational . Not_Quad
    (50) Not_Quad -> .

    AND             reduce using rule 50 (Not_Quad -> .)
    OR              reduce using rule 50 (Not_Quad -> .)
    EQUAL           reduce using rule 50 (Not_Quad -> .)
    DIFF            reduce using rule 50 (Not_Quad -> .)
    PAR_CLOSE       reduce using rule 50 (Not_Quad -> .)
    SEMICOLON       reduce using rule 50 (Not_Quad -> .)

    Not_Quad                       shift and go to state 124

state 106

    (25) Declare_Var -> Type ID ASSIGN Push_Assign Exp . SEMICOLON

    SEMICOLON       shift and go to state 125


state 107

    (30) Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .

    PRINT           reduce using rule 30 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    ID              reduce using rule 30 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    WHILE           reduce using rule 30 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    IF              reduce using rule 30 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    INT             reduce using rule 30 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    FLOAT           reduce using rule 30 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    BOOL            reduce using rule 30 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    STRING          reduce using rule 30 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)
    CURLYB_CLOSE    reduce using rule 30 (Assignment -> ID ASSIGN Push_Assign Exp SEMICOLON .)


state 108

    (13) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad . Statements_Block GoTo_Fill Eif_Recursion Optional_Else
    (4) Statements_Block -> . CURLYB_OPEN Multiple_Statements CURLYB_CLOSE

    CURLYB_OPEN     shift and go to state 8

    Statements_Block               shift and go to state 126

state 109

    (20) While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad . Statements_Block Fill_While_Quads
    (4) Statements_Block -> . CURLYB_OPEN Multiple_Statements CURLYB_CLOSE

    CURLYB_OPEN     shift and go to state 8

    Statements_Block               shift and go to state 127

state 110

    (78) Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE . Pop_False_Bottom
    (81) Pop_False_Bottom -> .

    TIMES_SIGN      reduce using rule 81 (Pop_False_Bottom -> .)
    DIVIDE_SIGN     reduce using rule 81 (Pop_False_Bottom -> .)
    MOD_SIGN        reduce using rule 81 (Pop_False_Bottom -> .)
    PLUS_SIGN       reduce using rule 81 (Pop_False_Bottom -> .)
    MINUS_SIGN      reduce using rule 81 (Pop_False_Bottom -> .)
    LESS            reduce using rule 81 (Pop_False_Bottom -> .)
    LESS_EQUAL      reduce using rule 81 (Pop_False_Bottom -> .)
    GREATER         reduce using rule 81 (Pop_False_Bottom -> .)
    GREATER_EQUAL   reduce using rule 81 (Pop_False_Bottom -> .)
    AND             reduce using rule 81 (Pop_False_Bottom -> .)
    OR              reduce using rule 81 (Pop_False_Bottom -> .)
    EQUAL           reduce using rule 81 (Pop_False_Bottom -> .)
    DIFF            reduce using rule 81 (Pop_False_Bottom -> .)
    PAR_CLOSE       reduce using rule 81 (Pop_False_Bottom -> .)
    SEMICOLON       reduce using rule 81 (Pop_False_Bottom -> .)

    Pop_False_Bottom               shift and go to state 128

state 111

    (44) Multiple_Nots -> AND Push_And . Logical_Not And_Quad Multiple_Nots
    (48) Logical_Not -> . Relational
    (49) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 50
    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Factor                         shift and go to state 42
    Relational                     shift and go to state 36
    Logical_Not                    shift and go to state 129
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Expression                     shift and go to state 47

state 112

    (64) Multiple_Terms -> MINUS_SIGN Push_Minus_Sign . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Term                           shift and go to state 130
    Var_Cte                        shift and go to state 43
    Factor                         shift and go to state 42

state 113

    (63) Multiple_Terms -> PLUS_SIGN Push_Plus_Sign . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Term                           shift and go to state 131
    Var_Cte                        shift and go to state 43
    Factor                         shift and go to state 42

state 114

    (70) Multiple_Factors -> TIMES_SIGN Push_Times_Sign . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Var_Cte                        shift and go to state 43
    Factor                         shift and go to state 132

state 115

    (72) Multiple_Factors -> MOD_SIGN Push_Mod_Sign . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Var_Cte                        shift and go to state 43
    Factor                         shift and go to state 133

state 116

    (71) Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Var_Cte                        shift and go to state 43
    Factor                         shift and go to state 134

state 117

    (33) Exp -> Logical_Or EQUAL Push_Equal Logical_Or . Equity_Quad
    (35) Equity_Quad -> .

    PAR_CLOSE       reduce using rule 35 (Equity_Quad -> .)
    SEMICOLON       reduce using rule 35 (Equity_Quad -> .)

    Equity_Quad                    shift and go to state 135

state 118

    (34) Exp -> Logical_Or DIFF Push_Diff Logical_Or . Equity_Quad
    (35) Equity_Quad -> .

    PAR_CLOSE       reduce using rule 35 (Equity_Quad -> .)
    SEMICOLON       reduce using rule 35 (Equity_Quad -> .)

    Equity_Quad                    shift and go to state 136

state 119

    (39) Multiple_Ands -> OR Push_Or . Logical_And Or_Quad Multiple_Ands
    (43) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (48) Logical_Not -> . Relational
    (49) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 50
    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Factor                         shift and go to state 42
    Relational                     shift and go to state 36
    Logical_Not                    shift and go to state 39
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Logical_And                    shift and go to state 137
    Expression                     shift and go to state 47

state 120

    (53) Relational -> Expression LESS Push_Less Expression . Relational_Quad
    (57) Relational_Quad -> .

    AND             reduce using rule 57 (Relational_Quad -> .)
    OR              reduce using rule 57 (Relational_Quad -> .)
    EQUAL           reduce using rule 57 (Relational_Quad -> .)
    DIFF            reduce using rule 57 (Relational_Quad -> .)
    PAR_CLOSE       reduce using rule 57 (Relational_Quad -> .)
    SEMICOLON       reduce using rule 57 (Relational_Quad -> .)

    Relational_Quad                shift and go to state 138

state 121

    (54) Relational -> Expression LESS_EQUAL Push_Less_Equal Expression . Relational_Quad
    (57) Relational_Quad -> .

    AND             reduce using rule 57 (Relational_Quad -> .)
    OR              reduce using rule 57 (Relational_Quad -> .)
    EQUAL           reduce using rule 57 (Relational_Quad -> .)
    DIFF            reduce using rule 57 (Relational_Quad -> .)
    PAR_CLOSE       reduce using rule 57 (Relational_Quad -> .)
    SEMICOLON       reduce using rule 57 (Relational_Quad -> .)

    Relational_Quad                shift and go to state 139

state 122

    (56) Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression . Relational_Quad
    (57) Relational_Quad -> .

    AND             reduce using rule 57 (Relational_Quad -> .)
    OR              reduce using rule 57 (Relational_Quad -> .)
    EQUAL           reduce using rule 57 (Relational_Quad -> .)
    DIFF            reduce using rule 57 (Relational_Quad -> .)
    PAR_CLOSE       reduce using rule 57 (Relational_Quad -> .)
    SEMICOLON       reduce using rule 57 (Relational_Quad -> .)

    Relational_Quad                shift and go to state 140

state 123

    (55) Relational -> Expression GREATER Push_Greater Expression . Relational_Quad
    (57) Relational_Quad -> .

    AND             reduce using rule 57 (Relational_Quad -> .)
    OR              reduce using rule 57 (Relational_Quad -> .)
    EQUAL           reduce using rule 57 (Relational_Quad -> .)
    DIFF            reduce using rule 57 (Relational_Quad -> .)
    PAR_CLOSE       reduce using rule 57 (Relational_Quad -> .)
    SEMICOLON       reduce using rule 57 (Relational_Quad -> .)

    Relational_Quad                shift and go to state 141

state 124

    (49) Logical_Not -> NOT Push_Not Relational Not_Quad .

    AND             reduce using rule 49 (Logical_Not -> NOT Push_Not Relational Not_Quad .)
    OR              reduce using rule 49 (Logical_Not -> NOT Push_Not Relational Not_Quad .)
    EQUAL           reduce using rule 49 (Logical_Not -> NOT Push_Not Relational Not_Quad .)
    DIFF            reduce using rule 49 (Logical_Not -> NOT Push_Not Relational Not_Quad .)
    PAR_CLOSE       reduce using rule 49 (Logical_Not -> NOT Push_Not Relational Not_Quad .)
    SEMICOLON       reduce using rule 49 (Logical_Not -> NOT Push_Not Relational Not_Quad .)


state 125

    (25) Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .

    PRINT           reduce using rule 25 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    ID              reduce using rule 25 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    WHILE           reduce using rule 25 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    IF              reduce using rule 25 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    INT             reduce using rule 25 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    FLOAT           reduce using rule 25 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    BOOL            reduce using rule 25 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    STRING          reduce using rule 25 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)
    CURLYB_CLOSE    reduce using rule 25 (Declare_Var -> Type ID ASSIGN Push_Assign Exp SEMICOLON .)


state 126

    (13) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block . GoTo_Fill Eif_Recursion Optional_Else
    (19) GoTo_Fill -> .

    EIF             reduce using rule 19 (GoTo_Fill -> .)
    ELSE            reduce using rule 19 (GoTo_Fill -> .)
    PRINT           reduce using rule 19 (GoTo_Fill -> .)
    ID              reduce using rule 19 (GoTo_Fill -> .)
    WHILE           reduce using rule 19 (GoTo_Fill -> .)
    IF              reduce using rule 19 (GoTo_Fill -> .)
    INT             reduce using rule 19 (GoTo_Fill -> .)
    FLOAT           reduce using rule 19 (GoTo_Fill -> .)
    BOOL            reduce using rule 19 (GoTo_Fill -> .)
    STRING          reduce using rule 19 (GoTo_Fill -> .)
    CURLYB_CLOSE    reduce using rule 19 (GoTo_Fill -> .)

    GoTo_Fill                      shift and go to state 142

state 127

    (20) While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block . Fill_While_Quads
    (23) Fill_While_Quads -> .

    PRINT           reduce using rule 23 (Fill_While_Quads -> .)
    ID              reduce using rule 23 (Fill_While_Quads -> .)
    WHILE           reduce using rule 23 (Fill_While_Quads -> .)
    IF              reduce using rule 23 (Fill_While_Quads -> .)
    INT             reduce using rule 23 (Fill_While_Quads -> .)
    FLOAT           reduce using rule 23 (Fill_While_Quads -> .)
    BOOL            reduce using rule 23 (Fill_While_Quads -> .)
    STRING          reduce using rule 23 (Fill_While_Quads -> .)
    CURLYB_CLOSE    reduce using rule 23 (Fill_While_Quads -> .)

    Fill_While_Quads               shift and go to state 143

state 128

    (78) Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .

    TIMES_SIGN      reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    DIVIDE_SIGN     reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    MOD_SIGN        reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    PLUS_SIGN       reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    MINUS_SIGN      reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    AND             reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    OR              reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    EQUAL           reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    DIFF            reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    PAR_CLOSE       reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    SEMICOLON       reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    LESS            reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    LESS_EQUAL      reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    GREATER         reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)
    GREATER_EQUAL   reduce using rule 78 (Factor -> PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom .)


state 129

    (44) Multiple_Nots -> AND Push_And Logical_Not . And_Quad Multiple_Nots
    (46) And_Quad -> .

    AND             reduce using rule 46 (And_Quad -> .)
    OR              reduce using rule 46 (And_Quad -> .)
    EQUAL           reduce using rule 46 (And_Quad -> .)
    DIFF            reduce using rule 46 (And_Quad -> .)
    PAR_CLOSE       reduce using rule 46 (And_Quad -> .)
    SEMICOLON       reduce using rule 46 (And_Quad -> .)

    And_Quad                       shift and go to state 144

state 130

    (64) Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term . Sum_Sub_Quad Multiple_Terms
    (66) Sum_Sub_Quad -> .

    PLUS_SIGN       reduce using rule 66 (Sum_Sub_Quad -> .)
    MINUS_SIGN      reduce using rule 66 (Sum_Sub_Quad -> .)
    LESS            reduce using rule 66 (Sum_Sub_Quad -> .)
    LESS_EQUAL      reduce using rule 66 (Sum_Sub_Quad -> .)
    GREATER         reduce using rule 66 (Sum_Sub_Quad -> .)
    GREATER_EQUAL   reduce using rule 66 (Sum_Sub_Quad -> .)
    AND             reduce using rule 66 (Sum_Sub_Quad -> .)
    OR              reduce using rule 66 (Sum_Sub_Quad -> .)
    EQUAL           reduce using rule 66 (Sum_Sub_Quad -> .)
    DIFF            reduce using rule 66 (Sum_Sub_Quad -> .)
    PAR_CLOSE       reduce using rule 66 (Sum_Sub_Quad -> .)
    SEMICOLON       reduce using rule 66 (Sum_Sub_Quad -> .)

    Sum_Sub_Quad                   shift and go to state 145

state 131

    (63) Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term . Sum_Sub_Quad Multiple_Terms
    (66) Sum_Sub_Quad -> .

    PLUS_SIGN       reduce using rule 66 (Sum_Sub_Quad -> .)
    MINUS_SIGN      reduce using rule 66 (Sum_Sub_Quad -> .)
    LESS            reduce using rule 66 (Sum_Sub_Quad -> .)
    LESS_EQUAL      reduce using rule 66 (Sum_Sub_Quad -> .)
    GREATER         reduce using rule 66 (Sum_Sub_Quad -> .)
    GREATER_EQUAL   reduce using rule 66 (Sum_Sub_Quad -> .)
    AND             reduce using rule 66 (Sum_Sub_Quad -> .)
    OR              reduce using rule 66 (Sum_Sub_Quad -> .)
    EQUAL           reduce using rule 66 (Sum_Sub_Quad -> .)
    DIFF            reduce using rule 66 (Sum_Sub_Quad -> .)
    PAR_CLOSE       reduce using rule 66 (Sum_Sub_Quad -> .)
    SEMICOLON       reduce using rule 66 (Sum_Sub_Quad -> .)

    Sum_Sub_Quad                   shift and go to state 146

state 132

    (70) Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor . Mult_Div_Mod_Quad Multiple_Factors
    (74) Mult_Div_Mod_Quad -> .

    TIMES_SIGN      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    DIVIDE_SIGN     reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    MOD_SIGN        reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    PLUS_SIGN       reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    MINUS_SIGN      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    LESS            reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    LESS_EQUAL      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    GREATER         reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    GREATER_EQUAL   reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    AND             reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    OR              reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    EQUAL           reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    DIFF            reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    PAR_CLOSE       reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    SEMICOLON       reduce using rule 74 (Mult_Div_Mod_Quad -> .)

    Mult_Div_Mod_Quad              shift and go to state 147

state 133

    (72) Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor . Mult_Div_Mod_Quad Multiple_Factors
    (74) Mult_Div_Mod_Quad -> .

    TIMES_SIGN      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    DIVIDE_SIGN     reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    MOD_SIGN        reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    PLUS_SIGN       reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    MINUS_SIGN      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    LESS            reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    LESS_EQUAL      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    GREATER         reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    GREATER_EQUAL   reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    AND             reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    OR              reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    EQUAL           reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    DIFF            reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    PAR_CLOSE       reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    SEMICOLON       reduce using rule 74 (Mult_Div_Mod_Quad -> .)

    Mult_Div_Mod_Quad              shift and go to state 148

state 134

    (71) Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor . Mult_Div_Mod_Quad Multiple_Factors
    (74) Mult_Div_Mod_Quad -> .

    TIMES_SIGN      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    DIVIDE_SIGN     reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    MOD_SIGN        reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    PLUS_SIGN       reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    MINUS_SIGN      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    LESS            reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    LESS_EQUAL      reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    GREATER         reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    GREATER_EQUAL   reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    AND             reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    OR              reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    EQUAL           reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    DIFF            reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    PAR_CLOSE       reduce using rule 74 (Mult_Div_Mod_Quad -> .)
    SEMICOLON       reduce using rule 74 (Mult_Div_Mod_Quad -> .)

    Mult_Div_Mod_Quad              shift and go to state 149

state 135

    (33) Exp -> Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad .

    PAR_CLOSE       reduce using rule 33 (Exp -> Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad .)
    SEMICOLON       reduce using rule 33 (Exp -> Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad .)


state 136

    (34) Exp -> Logical_Or DIFF Push_Diff Logical_Or Equity_Quad .

    PAR_CLOSE       reduce using rule 34 (Exp -> Logical_Or DIFF Push_Diff Logical_Or Equity_Quad .)
    SEMICOLON       reduce using rule 34 (Exp -> Logical_Or DIFF Push_Diff Logical_Or Equity_Quad .)


state 137

    (39) Multiple_Ands -> OR Push_Or Logical_And . Or_Quad Multiple_Ands
    (41) Or_Quad -> .

    OR              reduce using rule 41 (Or_Quad -> .)
    EQUAL           reduce using rule 41 (Or_Quad -> .)
    DIFF            reduce using rule 41 (Or_Quad -> .)
    PAR_CLOSE       reduce using rule 41 (Or_Quad -> .)
    SEMICOLON       reduce using rule 41 (Or_Quad -> .)

    Or_Quad                        shift and go to state 150

state 138

    (53) Relational -> Expression LESS Push_Less Expression Relational_Quad .

    AND             reduce using rule 53 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)
    OR              reduce using rule 53 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)
    EQUAL           reduce using rule 53 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)
    DIFF            reduce using rule 53 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)
    PAR_CLOSE       reduce using rule 53 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)
    SEMICOLON       reduce using rule 53 (Relational -> Expression LESS Push_Less Expression Relational_Quad .)


state 139

    (54) Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .

    AND             reduce using rule 54 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)
    OR              reduce using rule 54 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)
    EQUAL           reduce using rule 54 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)
    DIFF            reduce using rule 54 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)
    PAR_CLOSE       reduce using rule 54 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)
    SEMICOLON       reduce using rule 54 (Relational -> Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad .)


state 140

    (56) Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .

    AND             reduce using rule 56 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)
    OR              reduce using rule 56 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)
    EQUAL           reduce using rule 56 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)
    DIFF            reduce using rule 56 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)
    PAR_CLOSE       reduce using rule 56 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)
    SEMICOLON       reduce using rule 56 (Relational -> Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad .)


state 141

    (55) Relational -> Expression GREATER Push_Greater Expression Relational_Quad .

    AND             reduce using rule 55 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)
    OR              reduce using rule 55 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)
    EQUAL           reduce using rule 55 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)
    DIFF            reduce using rule 55 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)
    PAR_CLOSE       reduce using rule 55 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)
    SEMICOLON       reduce using rule 55 (Relational -> Expression GREATER Push_Greater Expression Relational_Quad .)


state 142

    (13) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill . Eif_Recursion Optional_Else
    (14) Eif_Recursion -> . EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion
    (15) Eif_Recursion -> . Epsilon
    (96) Epsilon -> .

    EIF             shift and go to state 153
    ELSE            reduce using rule 96 (Epsilon -> .)
    PRINT           reduce using rule 96 (Epsilon -> .)
    ID              reduce using rule 96 (Epsilon -> .)
    WHILE           reduce using rule 96 (Epsilon -> .)
    IF              reduce using rule 96 (Epsilon -> .)
    INT             reduce using rule 96 (Epsilon -> .)
    FLOAT           reduce using rule 96 (Epsilon -> .)
    BOOL            reduce using rule 96 (Epsilon -> .)
    STRING          reduce using rule 96 (Epsilon -> .)
    CURLYB_CLOSE    reduce using rule 96 (Epsilon -> .)

    Eif_Recursion                  shift and go to state 151
    Epsilon                        shift and go to state 152

state 143

    (20) While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .

    PRINT           reduce using rule 20 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    ID              reduce using rule 20 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    WHILE           reduce using rule 20 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    IF              reduce using rule 20 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    INT             reduce using rule 20 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    FLOAT           reduce using rule 20 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    BOOL            reduce using rule 20 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    STRING          reduce using rule 20 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)
    CURLYB_CLOSE    reduce using rule 20 (While_Loop -> WHILE Push_While_Jump PAR_OPEN Exp PAR_CLOSE While_Quad Statements_Block Fill_While_Quads .)


state 144

    (44) Multiple_Nots -> AND Push_And Logical_Not And_Quad . Multiple_Nots
    (44) Multiple_Nots -> . AND Push_And Logical_Not And_Quad Multiple_Nots
    (45) Multiple_Nots -> . Epsilon
    (96) Epsilon -> .

    AND             shift and go to state 81
    OR              reduce using rule 96 (Epsilon -> .)
    EQUAL           reduce using rule 96 (Epsilon -> .)
    DIFF            reduce using rule 96 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 96 (Epsilon -> .)
    SEMICOLON       reduce using rule 96 (Epsilon -> .)

    Multiple_Nots                  shift and go to state 154
    Epsilon                        shift and go to state 82

state 145

    (64) Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad . Multiple_Terms
    (63) Multiple_Terms -> . PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms
    (64) Multiple_Terms -> . MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms
    (65) Multiple_Terms -> . Epsilon
    (96) Epsilon -> .

    PLUS_SIGN       shift and go to state 87
    MINUS_SIGN      shift and go to state 86
    LESS            reduce using rule 96 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 96 (Epsilon -> .)
    GREATER         reduce using rule 96 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 96 (Epsilon -> .)
    AND             reduce using rule 96 (Epsilon -> .)
    OR              reduce using rule 96 (Epsilon -> .)
    EQUAL           reduce using rule 96 (Epsilon -> .)
    DIFF            reduce using rule 96 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 96 (Epsilon -> .)
    SEMICOLON       reduce using rule 96 (Epsilon -> .)

    Multiple_Terms                 shift and go to state 155
    Epsilon                        shift and go to state 85

state 146

    (63) Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad . Multiple_Terms
    (63) Multiple_Terms -> . PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms
    (64) Multiple_Terms -> . MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms
    (65) Multiple_Terms -> . Epsilon
    (96) Epsilon -> .

    PLUS_SIGN       shift and go to state 87
    MINUS_SIGN      shift and go to state 86
    LESS            reduce using rule 96 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 96 (Epsilon -> .)
    GREATER         reduce using rule 96 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 96 (Epsilon -> .)
    AND             reduce using rule 96 (Epsilon -> .)
    OR              reduce using rule 96 (Epsilon -> .)
    EQUAL           reduce using rule 96 (Epsilon -> .)
    DIFF            reduce using rule 96 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 96 (Epsilon -> .)
    SEMICOLON       reduce using rule 96 (Epsilon -> .)

    Multiple_Terms                 shift and go to state 156
    Epsilon                        shift and go to state 85

state 147

    (70) Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad . Multiple_Factors
    (70) Multiple_Factors -> . TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (71) Multiple_Factors -> . DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (72) Multiple_Factors -> . MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (73) Multiple_Factors -> . Epsilon
    (96) Epsilon -> .

    TIMES_SIGN      shift and go to state 88
    DIVIDE_SIGN     shift and go to state 92
    MOD_SIGN        shift and go to state 89
    PLUS_SIGN       reduce using rule 96 (Epsilon -> .)
    MINUS_SIGN      reduce using rule 96 (Epsilon -> .)
    LESS            reduce using rule 96 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 96 (Epsilon -> .)
    GREATER         reduce using rule 96 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 96 (Epsilon -> .)
    AND             reduce using rule 96 (Epsilon -> .)
    OR              reduce using rule 96 (Epsilon -> .)
    EQUAL           reduce using rule 96 (Epsilon -> .)
    DIFF            reduce using rule 96 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 96 (Epsilon -> .)
    SEMICOLON       reduce using rule 96 (Epsilon -> .)

    Epsilon                        shift and go to state 90
    Multiple_Factors               shift and go to state 157

state 148

    (72) Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad . Multiple_Factors
    (70) Multiple_Factors -> . TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (71) Multiple_Factors -> . DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (72) Multiple_Factors -> . MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (73) Multiple_Factors -> . Epsilon
    (96) Epsilon -> .

    TIMES_SIGN      shift and go to state 88
    DIVIDE_SIGN     shift and go to state 92
    MOD_SIGN        shift and go to state 89
    PLUS_SIGN       reduce using rule 96 (Epsilon -> .)
    MINUS_SIGN      reduce using rule 96 (Epsilon -> .)
    LESS            reduce using rule 96 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 96 (Epsilon -> .)
    GREATER         reduce using rule 96 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 96 (Epsilon -> .)
    AND             reduce using rule 96 (Epsilon -> .)
    OR              reduce using rule 96 (Epsilon -> .)
    EQUAL           reduce using rule 96 (Epsilon -> .)
    DIFF            reduce using rule 96 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 96 (Epsilon -> .)
    SEMICOLON       reduce using rule 96 (Epsilon -> .)

    Epsilon                        shift and go to state 90
    Multiple_Factors               shift and go to state 158

state 149

    (71) Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad . Multiple_Factors
    (70) Multiple_Factors -> . TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (71) Multiple_Factors -> . DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (72) Multiple_Factors -> . MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors
    (73) Multiple_Factors -> . Epsilon
    (96) Epsilon -> .

    TIMES_SIGN      shift and go to state 88
    DIVIDE_SIGN     shift and go to state 92
    MOD_SIGN        shift and go to state 89
    PLUS_SIGN       reduce using rule 96 (Epsilon -> .)
    MINUS_SIGN      reduce using rule 96 (Epsilon -> .)
    LESS            reduce using rule 96 (Epsilon -> .)
    LESS_EQUAL      reduce using rule 96 (Epsilon -> .)
    GREATER         reduce using rule 96 (Epsilon -> .)
    GREATER_EQUAL   reduce using rule 96 (Epsilon -> .)
    AND             reduce using rule 96 (Epsilon -> .)
    OR              reduce using rule 96 (Epsilon -> .)
    EQUAL           reduce using rule 96 (Epsilon -> .)
    DIFF            reduce using rule 96 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 96 (Epsilon -> .)
    SEMICOLON       reduce using rule 96 (Epsilon -> .)

    Epsilon                        shift and go to state 90
    Multiple_Factors               shift and go to state 159

state 150

    (39) Multiple_Ands -> OR Push_Or Logical_And Or_Quad . Multiple_Ands
    (39) Multiple_Ands -> . OR Push_Or Logical_And Or_Quad Multiple_Ands
    (40) Multiple_Ands -> . Epsilon
    (96) Epsilon -> .

    OR              shift and go to state 97
    EQUAL           reduce using rule 96 (Epsilon -> .)
    DIFF            reduce using rule 96 (Epsilon -> .)
    PAR_CLOSE       reduce using rule 96 (Epsilon -> .)
    SEMICOLON       reduce using rule 96 (Epsilon -> .)

    Multiple_Ands                  shift and go to state 160
    Epsilon                        shift and go to state 96

state 151

    (13) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion . Optional_Else
    (16) Optional_Else -> . ELSE Statements_Block
    (17) Optional_Else -> . Epsilon
    (96) Epsilon -> .

    ELSE            shift and go to state 162
    PRINT           reduce using rule 96 (Epsilon -> .)
    ID              reduce using rule 96 (Epsilon -> .)
    WHILE           reduce using rule 96 (Epsilon -> .)
    IF              reduce using rule 96 (Epsilon -> .)
    INT             reduce using rule 96 (Epsilon -> .)
    FLOAT           reduce using rule 96 (Epsilon -> .)
    BOOL            reduce using rule 96 (Epsilon -> .)
    STRING          reduce using rule 96 (Epsilon -> .)
    CURLYB_CLOSE    reduce using rule 96 (Epsilon -> .)

    Optional_Else                  shift and go to state 161
    Epsilon                        shift and go to state 163

state 152

    (15) Eif_Recursion -> Epsilon .

    ELSE            reduce using rule 15 (Eif_Recursion -> Epsilon .)
    PRINT           reduce using rule 15 (Eif_Recursion -> Epsilon .)
    ID              reduce using rule 15 (Eif_Recursion -> Epsilon .)
    WHILE           reduce using rule 15 (Eif_Recursion -> Epsilon .)
    IF              reduce using rule 15 (Eif_Recursion -> Epsilon .)
    INT             reduce using rule 15 (Eif_Recursion -> Epsilon .)
    FLOAT           reduce using rule 15 (Eif_Recursion -> Epsilon .)
    BOOL            reduce using rule 15 (Eif_Recursion -> Epsilon .)
    STRING          reduce using rule 15 (Eif_Recursion -> Epsilon .)
    CURLYB_CLOSE    reduce using rule 15 (Eif_Recursion -> Epsilon .)


state 153

    (14) Eif_Recursion -> EIF . PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion

    PAR_OPEN        shift and go to state 164


state 154

    (44) Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .

    OR              reduce using rule 44 (Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .)
    EQUAL           reduce using rule 44 (Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .)
    DIFF            reduce using rule 44 (Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .)
    PAR_CLOSE       reduce using rule 44 (Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .)
    SEMICOLON       reduce using rule 44 (Multiple_Nots -> AND Push_And Logical_Not And_Quad Multiple_Nots .)


state 155

    (64) Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .

    LESS            reduce using rule 64 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    LESS_EQUAL      reduce using rule 64 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    GREATER         reduce using rule 64 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    GREATER_EQUAL   reduce using rule 64 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    AND             reduce using rule 64 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    OR              reduce using rule 64 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    EQUAL           reduce using rule 64 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    DIFF            reduce using rule 64 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    PAR_CLOSE       reduce using rule 64 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    SEMICOLON       reduce using rule 64 (Multiple_Terms -> MINUS_SIGN Push_Minus_Sign Term Sum_Sub_Quad Multiple_Terms .)


state 156

    (63) Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .

    LESS            reduce using rule 63 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    LESS_EQUAL      reduce using rule 63 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    GREATER         reduce using rule 63 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    GREATER_EQUAL   reduce using rule 63 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    AND             reduce using rule 63 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    OR              reduce using rule 63 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    EQUAL           reduce using rule 63 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    DIFF            reduce using rule 63 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    PAR_CLOSE       reduce using rule 63 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)
    SEMICOLON       reduce using rule 63 (Multiple_Terms -> PLUS_SIGN Push_Plus_Sign Term Sum_Sub_Quad Multiple_Terms .)


state 157

    (70) Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .

    PLUS_SIGN       reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    MINUS_SIGN      reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS            reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS_EQUAL      reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER         reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER_EQUAL   reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    AND             reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    OR              reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    EQUAL           reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    DIFF            reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    PAR_CLOSE       reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    SEMICOLON       reduce using rule 70 (Multiple_Factors -> TIMES_SIGN Push_Times_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)


state 158

    (72) Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .

    PLUS_SIGN       reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    MINUS_SIGN      reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS            reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS_EQUAL      reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER         reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER_EQUAL   reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    AND             reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    OR              reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    EQUAL           reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    DIFF            reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    PAR_CLOSE       reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    SEMICOLON       reduce using rule 72 (Multiple_Factors -> MOD_SIGN Push_Mod_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)


state 159

    (71) Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .

    PLUS_SIGN       reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    MINUS_SIGN      reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS            reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    LESS_EQUAL      reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER         reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    GREATER_EQUAL   reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    AND             reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    OR              reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    EQUAL           reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    DIFF            reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    PAR_CLOSE       reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)
    SEMICOLON       reduce using rule 71 (Multiple_Factors -> DIVIDE_SIGN Push_Divide_Sign Factor Mult_Div_Mod_Quad Multiple_Factors .)


state 160

    (39) Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands .

    EQUAL           reduce using rule 39 (Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands .)
    DIFF            reduce using rule 39 (Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands .)
    PAR_CLOSE       reduce using rule 39 (Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands .)
    SEMICOLON       reduce using rule 39 (Multiple_Ands -> OR Push_Or Logical_And Or_Quad Multiple_Ands .)


state 161

    (13) If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .

    PRINT           reduce using rule 13 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    ID              reduce using rule 13 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    WHILE           reduce using rule 13 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    IF              reduce using rule 13 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    INT             reduce using rule 13 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    FLOAT           reduce using rule 13 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    BOOL            reduce using rule 13 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    STRING          reduce using rule 13 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)
    CURLYB_CLOSE    reduce using rule 13 (If_Eif_Else -> IF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion Optional_Else .)


state 162

    (16) Optional_Else -> ELSE . Statements_Block
    (4) Statements_Block -> . CURLYB_OPEN Multiple_Statements CURLYB_CLOSE

    CURLYB_OPEN     shift and go to state 8

    Statements_Block               shift and go to state 165

state 163

    (17) Optional_Else -> Epsilon .

    PRINT           reduce using rule 17 (Optional_Else -> Epsilon .)
    ID              reduce using rule 17 (Optional_Else -> Epsilon .)
    WHILE           reduce using rule 17 (Optional_Else -> Epsilon .)
    IF              reduce using rule 17 (Optional_Else -> Epsilon .)
    INT             reduce using rule 17 (Optional_Else -> Epsilon .)
    FLOAT           reduce using rule 17 (Optional_Else -> Epsilon .)
    BOOL            reduce using rule 17 (Optional_Else -> Epsilon .)
    STRING          reduce using rule 17 (Optional_Else -> Epsilon .)
    CURLYB_CLOSE    reduce using rule 17 (Optional_Else -> Epsilon .)


state 164

    (14) Eif_Recursion -> EIF PAR_OPEN . Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion
    (32) Exp -> . Logical_Or
    (33) Exp -> . Logical_Or EQUAL Push_Equal Logical_Or Equity_Quad
    (34) Exp -> . Logical_Or DIFF Push_Diff Logical_Or Equity_Quad
    (38) Logical_Or -> . Logical_And Or_Quad Multiple_Ands
    (43) Logical_And -> . Logical_Not And_Quad Multiple_Nots
    (48) Logical_Not -> . Relational
    (49) Logical_Not -> . NOT Push_Not Relational Not_Quad
    (52) Relational -> . Expression
    (53) Relational -> . Expression LESS Push_Less Expression Relational_Quad
    (54) Relational -> . Expression LESS_EQUAL Push_Less_Equal Expression Relational_Quad
    (55) Relational -> . Expression GREATER Push_Greater Expression Relational_Quad
    (56) Relational -> . Expression GREATER_EQUAL Push_Greater_Equal Expression Relational_Quad
    (62) Expression -> . Term Sum_Sub_Quad Multiple_Terms
    (69) Term -> . Factor Mult_Div_Mod_Quad Multiple_Factors
    (78) Factor -> . PAR_OPEN Push_False_Bottom Exp PAR_CLOSE Pop_False_Bottom
    (79) Factor -> . Var_Cte
    (82) Var_Cte -> . INT_CONST Save_Int_Const
    (83) Var_Cte -> . MINUS_SIGN INT_CONST Save_Neg_Int_Const
    (84) Var_Cte -> . FLOAT_CONST Save_Float_Const
    (85) Var_Cte -> . MINUS_SIGN FLOAT_CONST Save_Neg_Float_Const
    (86) Var_Cte -> . BOOL_CONST Save_Bool_Const
    (87) Var_Cte -> . STRING_CONST Save_String_Const
    (88) Var_Cte -> . ID Get_Id_Value

    NOT             shift and go to state 50
    PAR_OPEN        shift and go to state 34
    INT_CONST       shift and go to state 38
    MINUS_SIGN      shift and go to state 49
    FLOAT_CONST     shift and go to state 35
    BOOL_CONST      shift and go to state 40
    STRING_CONST    shift and go to state 37
    ID              shift and go to state 48

    Factor                         shift and go to state 42
    Relational                     shift and go to state 36
    Logical_Not                    shift and go to state 39
    Term                           shift and go to state 41
    Var_Cte                        shift and go to state 43
    Logical_Or                     shift and go to state 44
    Logical_And                    shift and go to state 45
    Exp                            shift and go to state 166
    Expression                     shift and go to state 47

state 165

    (16) Optional_Else -> ELSE Statements_Block .

    PRINT           reduce using rule 16 (Optional_Else -> ELSE Statements_Block .)
    ID              reduce using rule 16 (Optional_Else -> ELSE Statements_Block .)
    WHILE           reduce using rule 16 (Optional_Else -> ELSE Statements_Block .)
    IF              reduce using rule 16 (Optional_Else -> ELSE Statements_Block .)
    INT             reduce using rule 16 (Optional_Else -> ELSE Statements_Block .)
    FLOAT           reduce using rule 16 (Optional_Else -> ELSE Statements_Block .)
    BOOL            reduce using rule 16 (Optional_Else -> ELSE Statements_Block .)
    STRING          reduce using rule 16 (Optional_Else -> ELSE Statements_Block .)
    CURLYB_CLOSE    reduce using rule 16 (Optional_Else -> ELSE Statements_Block .)


state 166

    (14) Eif_Recursion -> EIF PAR_OPEN Exp . PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion

    PAR_CLOSE       shift and go to state 167


state 167

    (14) Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE . If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion
    (18) If_GoToF_Quad -> .

    CURLYB_OPEN     reduce using rule 18 (If_GoToF_Quad -> .)

    If_GoToF_Quad                  shift and go to state 168

state 168

    (14) Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad . Statements_Block GoTo_Fill Eif_Recursion
    (4) Statements_Block -> . CURLYB_OPEN Multiple_Statements CURLYB_CLOSE

    CURLYB_OPEN     shift and go to state 8

    Statements_Block               shift and go to state 169

state 169

    (14) Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block . GoTo_Fill Eif_Recursion
    (19) GoTo_Fill -> .

    EIF             reduce using rule 19 (GoTo_Fill -> .)
    ELSE            reduce using rule 19 (GoTo_Fill -> .)
    PRINT           reduce using rule 19 (GoTo_Fill -> .)
    ID              reduce using rule 19 (GoTo_Fill -> .)
    WHILE           reduce using rule 19 (GoTo_Fill -> .)
    IF              reduce using rule 19 (GoTo_Fill -> .)
    INT             reduce using rule 19 (GoTo_Fill -> .)
    FLOAT           reduce using rule 19 (GoTo_Fill -> .)
    BOOL            reduce using rule 19 (GoTo_Fill -> .)
    STRING          reduce using rule 19 (GoTo_Fill -> .)
    CURLYB_CLOSE    reduce using rule 19 (GoTo_Fill -> .)

    GoTo_Fill                      shift and go to state 170

state 170

    (14) Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill . Eif_Recursion
    (14) Eif_Recursion -> . EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion
    (15) Eif_Recursion -> . Epsilon
    (96) Epsilon -> .

    EIF             shift and go to state 153
    ELSE            reduce using rule 96 (Epsilon -> .)
    PRINT           reduce using rule 96 (Epsilon -> .)
    ID              reduce using rule 96 (Epsilon -> .)
    WHILE           reduce using rule 96 (Epsilon -> .)
    IF              reduce using rule 96 (Epsilon -> .)
    INT             reduce using rule 96 (Epsilon -> .)
    FLOAT           reduce using rule 96 (Epsilon -> .)
    BOOL            reduce using rule 96 (Epsilon -> .)
    STRING          reduce using rule 96 (Epsilon -> .)
    CURLYB_CLOSE    reduce using rule 96 (Epsilon -> .)

    Epsilon                        shift and go to state 152
    Eif_Recursion                  shift and go to state 171

state 171

    (14) Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .

    ELSE            reduce using rule 14 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    PRINT           reduce using rule 14 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    ID              reduce using rule 14 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    WHILE           reduce using rule 14 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    IF              reduce using rule 14 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    INT             reduce using rule 14 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    FLOAT           reduce using rule 14 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    BOOL            reduce using rule 14 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    STRING          reduce using rule 14 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)
    CURLYB_CLOSE    reduce using rule 14 (Eif_Recursion -> EIF PAR_OPEN Exp PAR_CLOSE If_GoToF_Quad Statements_Block GoTo_Fill Eif_Recursion .)

